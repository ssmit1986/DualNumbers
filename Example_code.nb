Notebook[{

Cell[CellGroupData[{
Cell["DualNumbers", \
"Section",ExpressionUUID->"8ee5ae86-a341-4457-8275-7b676122c998"],

Cell[CellGroupData[{

Cell["Code from the README file", \
"Subsection",ExpressionUUID->"1bac6c56-1e77-46ba-80a7-2e06ea470861"],

Cell[CellGroupData[{

Cell["Installation", \
"Subsubsection",ExpressionUUID->"3c79962b-7dde-4a2d-bcef-7a171664d20f"],

Cell["Install the paclet:", \
"Text",ExpressionUUID->"62ab5172-7515-474e-b58d-82c53aa14e6a"],

Cell[BoxData[
 RowBox[{"PacletInstall", "[", 
  "\"\<https://github.com/ssmit1986/DualNumbers/releases/download/1.2/\
DualNumbers-1.2.paclet\>\"", "]"}]], "Input",
 CellLabel->"In[1]:=",ExpressionUUID->"0cb9b1cb-4882-46ae-b86d-a755e0d7c69a"],

Cell["Load the package from the cloned repository:", \
"Text",ExpressionUUID->"28f45967-93e7-4046-8b32-cf276cc7b22c"],

Cell[BoxData[
 RowBox[{
  RowBox[{"PacletDirectoryLoad", "[", 
   RowBox[{"NotebookDirectory", "[", "]"}], "]"}], ";"}]], "Input",
 CellLabel->"In[4]:=",ExpressionUUID->"b89bbb37-0b56-4466-a120-bc5cec3058a2"],

Cell["Load the package:", \
"Text",ExpressionUUID->"5f738776-bbae-4a74-ad28-c0a67f4d5a01"],

Cell[BoxData[
 RowBox[{"<<", "DualNumbers`"}]], "Input",
 CellLabel->"In[5]:=",ExpressionUUID->"97772dfb-291f-4d8b-91ce-a9ba88494cef"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Examples", \
"Subsubsection",ExpressionUUID->"19e093bd-fac8-4ad2-a2ff-6d5cc419064d"],

Cell[TextData[{
 "Expand ",
 Cell[BoxData[
  FormBox["f", TraditionalForm]],ExpressionUUID->
  "740093c7-9dd4-4714-9ed4-8beeb34abeee"],
 " as a series in ",
 Cell[BoxData[
  FormBox["\[CurlyEpsilon]", TraditionalForm]],ExpressionUUID->
  "379162a3-f901-413a-935e-289e5b37aa00"]
}], "Text",ExpressionUUID->"d212c0cc-0228-4e55-8dfe-a522fe2bf7b0"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Normal", "@", 
   RowBox[{"Series", "[", 
    RowBox[{
     RowBox[{"f", "[", 
      RowBox[{"a", "+", 
       RowBox[{"b", " ", "\[CurlyEpsilon]"}]}], "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"\[CurlyEpsilon]", ",", "0", ",", "4"}], "}"}]}], "]"}]}], "/.", 
  RowBox[{
   RowBox[{"Power", "[", 
    RowBox[{"\[CurlyEpsilon]", ",", 
     RowBox[{"_", "?", 
      RowBox[{"(", 
       RowBox[{"GreaterEqualThan", "[", "2", "]"}], ")"}]}]}], "]"}], 
   "\[Rule]", "0"}]}]], "Input",
 CellLabel->"In[69]:=",ExpressionUUID->"f0bae856-24a1-4159-aa47-a10dfb05f413"],

Cell[BoxData[
 RowBox[{
  RowBox[{"f", "[", "a", "]"}], "+", 
  RowBox[{"b", " ", "\[CurlyEpsilon]", " ", 
   RowBox[{
    SuperscriptBox["f", "\[Prime]",
     MultilineFunction->None], "[", "a", "]"}]}]}]], "Output",
 CellLabel->"Out[69]=",ExpressionUUID->"ac5792d8-f92c-4ffb-8e79-2c566f57c057"]
}, Open  ]],

Cell[TextData[{
 Cell[BoxData[
  FormBox[
   StyleBox["DualSimplify",
    FontWeight->"Bold"], TraditionalForm]],ExpressionUUID->
  "8be093ef-f295-42ad-a3d1-a2313ea2e516"],
 " does this automatically:"
}], "Text",ExpressionUUID->"13fb8ec4-9707-427e-9e68-9d89f401a6fb"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"DualSimplify", "[", 
  RowBox[{"f", "[", 
   RowBox[{"a", "+", 
    RowBox[{"b", " ", "\[CurlyEpsilon]"}]}], "]"}], "]"}]], "Input",
 CellLabel->"In[72]:=",ExpressionUUID->"a9a4f68a-8e77-483e-a5fd-6bc860934c0f"],

Cell[BoxData[
 RowBox[{
  RowBox[{"f", "[", "a", "]"}], "+", 
  RowBox[{"b", " ", "\[CurlyEpsilon]", " ", 
   RowBox[{
    SuperscriptBox["f", "\[Prime]",
     MultilineFunction->None], "[", "a", "]"}]}]}]], "Output",
 CellLabel->"Out[72]=",ExpressionUUID->"1e2eb875-42ef-4011-90ee-dac73fccb2ba"]
}, Open  ]],

Cell["Example of a function with no symbolic derivative:", \
"Text",ExpressionUUID->"0c40e998-ccc6-41bf-8abf-d01df3c6871c"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"f", "[", "a_", "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"x", "=", "1."}], ",", "y", ",", 
       RowBox[{"i", "=", "0"}]}], "}"}], ",", 
     RowBox[{
      RowBox[{"While", "[", 
       RowBox[{
        RowBox[{"Not", "[", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{"y", "=", 
            RowBox[{"Cos", "[", 
             RowBox[{"a", " ", "x"}], "]"}]}], ")"}], "\[Equal]", "x"}], 
         "]"}], ",", 
        RowBox[{
         RowBox[{"x", "=", "y"}], ";", "\[IndentingNewLine]", 
         RowBox[{"i", "++"}]}]}], "]"}], ";", "\[IndentingNewLine]", "x"}]}], 
    "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"Derivative", "[", "1", "]"}], "@", "f"}]}], "Input",
 CellLabel->"In[3]:=",ExpressionUUID->"f1ad9e51-c055-44b9-b71d-e2688a2d81ba"],

Cell[BoxData[
 RowBox[{"0", "&"}]], "Output",
 CellLabel->"Out[4]=",ExpressionUUID->"9a4ae280-9f7c-4618-b27f-a8618fcbd586"]
}, Open  ]],

Cell["Calculate the derivative by using a dual number as input:", \
"Text",ExpressionUUID->"db076d2c-73d1-4295-ac01-ec1e9b4b9ce3"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"d", "=", 
  RowBox[{"f", "[", 
   RowBox[{"Dual", "[", 
    RowBox[{"0.5", ",", "1."}], "]"}], "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"Standard", "[", "d", "]"}], "\n", 
 RowBox[{"NonStandard", "[", "d", "]"}]}], "Input",
 CellLabel->"In[6]:=",ExpressionUUID->"4c18e64e-555b-48f6-acb8-284dd3b85dbe"],

Cell[BoxData[
 RowBox[{"Dual", "[", 
  RowBox[{"0.900367222589753`", ",", 
   RowBox[{"-", "0.3217712605132238`"}]}], "]"}]], "Output",
 CellLabel->"Out[6]=",ExpressionUUID->"ba0f66bf-d7c9-4f46-92de-597a5ae36229"],

Cell[BoxData["0.900367222589753`"], "Output",
 CellLabel->"Out[7]=",ExpressionUUID->"7ddf3c76-06ec-40df-9fe3-47f735224a0d"],

Cell[BoxData[
 RowBox[{"-", "0.3217712605132238`"}]], "Output",
 CellLabel->"Out[8]=",ExpressionUUID->"6bbb8549-21c3-4a62-bb2f-6f75a5c5ec0d"]
}, Open  ]],

Cell["Verify with a differential quotient:", \
"Text",ExpressionUUID->"5367ac52-bfd1-40de-9a1d-65275cdee759"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"With", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"h", "=", "0.001"}], ",", 
     RowBox[{"a", "=", "0.5"}]}], "}"}], ",", 
   RowBox[{
    RowBox[{"(", 
     RowBox[{
      RowBox[{"f", "[", 
       RowBox[{"a", "+", "h"}], "]"}], "-", 
      RowBox[{"f", "[", 
       RowBox[{"a", "-", "h"}], "]"}]}], ")"}], "/", 
    RowBox[{"(", 
     RowBox[{"2", " ", "h"}], ")"}]}]}], "]"}]], "Input",
 CellLabel->"In[9]:=",ExpressionUUID->"f0c8efd2-a193-4511-ad6d-1c5cc76a74d7"],

Cell[BoxData[
 RowBox[{"-", "0.32177100547187143`"}]], "Output",
 CellLabel->"Out[9]=",ExpressionUUID->"c03d7322-c448-42d8-864d-c017be8e5e56"]
}, Open  ]],

Cell["The nonstandard part does not even need to be numeric:", \
"Text",ExpressionUUID->"8ceea3e3-8a96-4b3d-9aaa-3ee96f051edd"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"f", "[", 
  RowBox[{"Dual", "[", 
   RowBox[{"0.5", ",", "b"}], "]"}], "]"}]], "Input",
 CellLabel->"In[18]:=",ExpressionUUID->"e1b6a71a-1a67-4c72-8e55-0436bce49fd9"],

Cell[BoxData[
 RowBox[{"Dual", "[", 
  RowBox[{"0.900367222589753`", ",", 
   RowBox[{
    RowBox[{"-", "0.3217712605132238`"}], " ", "b"}]}], "]"}]], "Output",
 CellLabel->"Out[18]=",ExpressionUUID->"424807e0-313c-4765-8771-0934020956e3"]
}, Open  ]],

Cell[TextData[{
 "Numeric dual numbers can be compared with ",
 Cell[BoxData[
  TagBox[
   ButtonBox[
    StyleBox["Equal", "SymbolsRefLink",
     ShowStringCharacters->True,
     FontFamily->"Source Sans Pro"],
    BaseStyle->Dynamic[
      FEPrivate`If[
       CurrentValue["MouseOver"], {
       "Link", FontColor -> RGBColor[0.854902, 0.396078, 0.145098]}, {
       "Link"}]],
    ButtonData->"paclet:ref/Equal",
    ContentPadding->False],
   MouseAppearanceTag["LinkHand"]]], "InlineFormula",
  FontFamily->"Source Sans Pro",ExpressionUUID->
  "4e36d188-839f-4917-8f02-70b86361ba2e"],
 ", ",
 Cell[BoxData[
  TagBox[
   ButtonBox[
    StyleBox["Less", "SymbolsRefLink",
     ShowStringCharacters->True,
     FontFamily->"Source Sans Pro"],
    BaseStyle->Dynamic[
      FEPrivate`If[
       CurrentValue["MouseOver"], {
       "Link", FontColor -> RGBColor[0.854902, 0.396078, 0.145098]}, {
       "Link"}]],
    ButtonData->"paclet:ref/Less",
    ContentPadding->False],
   MouseAppearanceTag["LinkHand"]]], "InlineFormula",
  FontFamily->"Source Sans Pro",ExpressionUUID->
  "5b04f718-9fa4-437a-b484-9c0a494237d8"],
 ", ",
 Cell[BoxData[
  TagBox[
   ButtonBox[
    StyleBox["Greater", "SymbolsRefLink",
     ShowStringCharacters->True,
     FontFamily->"Source Sans Pro"],
    BaseStyle->Dynamic[
      FEPrivate`If[
       CurrentValue["MouseOver"], {
       "Link", FontColor -> RGBColor[0.854902, 0.396078, 0.145098]}, {
       "Link"}]],
    ButtonData->"paclet:ref/Greater",
    ContentPadding->False],
   MouseAppearanceTag["LinkHand"]]], "InlineFormula",
  FontFamily->"Source Sans Pro",ExpressionUUID->
  "137b26b7-d08b-4cfb-b9a5-f0673d791cad"],
 ", etc. Symbolic dual numbers remain unaffected:"
}], "Text",ExpressionUUID->"b281d883-4028-45bc-a08d-aa0c802ac860"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"Dual", "[", 
   RowBox[{"0.5", ",", "1"}], "]"}], "\[Equal]", "0.5"}], "\n", 
 RowBox[{
  RowBox[{"Dual", "[", 
   RowBox[{"0.5", ",", "1"}], "]"}], "\[Equal]", 
  RowBox[{"Dual", "[", 
   RowBox[{"0.5", ",", "2"}], "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Dual", "[", 
   RowBox[{"x", ",", "1"}], "]"}], "\[Equal]", 
  RowBox[{"Dual", "[", 
   RowBox[{"y", ",", "2"}], "]"}]}]}], "Input",
 CellLabel->"In[12]:=",ExpressionUUID->"3412a10d-c2cb-4e60-9d6d-a9d0944d0b25"],

Cell[BoxData["True"], "Output",
 CellLabel->"Out[12]=",ExpressionUUID->"6886d4d4-d000-4e8d-9646-513e90ff0aac"],

Cell[BoxData["True"], "Output",
 CellLabel->"Out[13]=",ExpressionUUID->"5e8da2f6-a042-4cf3-9e15-bdaca57fb12f"],

Cell[BoxData[
 RowBox[{
  RowBox[{"Dual", "[", 
   RowBox[{"x", ",", "1"}], "]"}], "\[Equal]", 
  RowBox[{"Dual", "[", 
   RowBox[{"y", ",", "2"}], "]"}]}]], "Output",
 CellLabel->"Out[14]=",ExpressionUUID->"1d6bba04-4da9-4fad-8fec-d3453a9980aa"]
}, Open  ]],

Cell["\<\
Calculate the derivatives of a 2-argument function and compare with the \
gradient calculated symbolically:\
\>", "Text",ExpressionUUID->"cc768077-957b-4438-9f04-ddd1334cf38f"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"g", "[", 
    RowBox[{"x_", ",", "y_"}], "]"}], ":=", 
   RowBox[{
    RowBox[{"Sin", "[", 
     RowBox[{"x", "*", "y"}], "]"}], "/", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"x", "^", "2"}], "+", 
      RowBox[{"y", "^", "2"}]}], ")"}]}]}], ";"}], "\n", 
 RowBox[{"d", "=", 
  RowBox[{
   RowBox[{"g", "[", 
    RowBox[{
     RowBox[{"Dual", "[", 
      RowBox[{"0.5", ",", "b1"}], "]"}], ",", 
     RowBox[{"Dual", "[", 
      RowBox[{"2.", ",", "b2"}], "]"}]}], "]"}], "//", 
   "Simplify"}]}], "\[IndentingNewLine]", 
 RowBox[{"grad", "=", 
  RowBox[{
   RowBox[{"D", "[", 
    RowBox[{
     RowBox[{"g", "[", 
      RowBox[{"x", ",", "y"}], "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"{", 
       RowBox[{"x", ",", "y"}], "}"}], "}"}]}], "]"}], "/.", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"x", "\[Rule]", "0.5"}], ",", 
     RowBox[{"y", "\[Rule]", "2."}]}], "}"}]}]}]}], "Input",
 CellLabel->"In[23]:=",ExpressionUUID->"83d45a49-1509-49f4-b53d-565f75982a08"],

Cell[BoxData[
 RowBox[{"Dual", "[", 
  RowBox[{"0.19799317289597565`", ",", 
   RowBox[{
    RowBox[{"0.20767327972713032`", " ", "b1"}], "-", 
    RowBox[{"0.12278153850584299`", " ", "b2"}]}]}], "]"}]], "Output",
 CellLabel->"Out[24]=",ExpressionUUID->"272b7b42-adf9-44e5-bb07-52da4e7f3699"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.20767327972713032`", ",", 
   RowBox[{"-", "0.12278153850584299`"}]}], "}"}]], "Output",
 CellLabel->"Out[25]=",ExpressionUUID->"34777e0f-0e28-4494-951f-1a99c0b6a237"]
}, Open  ]],

Cell[TextData[{
 "The following relation holds for the directional derivative calculated for ",
 Cell[BoxData[
  FormBox["g", TraditionalForm]],ExpressionUUID->
  "ea42a7a4-3bb0-48ac-9dfc-a7ab030abeb9"]
}], "Text",ExpressionUUID->"a7e08957-e6f8-4832-bdeb-50f93a971010"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"NonStandard", "[", "d", "]"}], "\[Equal]", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"b1", ",", "b2"}], "}"}], ".", "grad"}]}]], "Input",
 CellLabel->"In[26]:=",ExpressionUUID->"2a5632f8-1447-4c5e-9cea-b4e7f1465746"],

Cell[BoxData["True"], "Output",
 CellLabel->"Out[26]=",ExpressionUUID->"9fa11209-c172-4aeb-ac80-b50c19d6167a"]
}, Open  ]],

Cell[TextData[{
 "If you use numeric nonstandard parts, the only way to get the full gradient \
of ",
 Cell[BoxData[
  FormBox["g", TraditionalForm]],ExpressionUUID->
  "a11916ae-f966-4b9f-825d-d260784681d1"],
 " is by evaluating it twice:"
}], "Text",ExpressionUUID->"aa1292ab-2b69-4d4b-9520-8763bd1ac46e"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"{", 
  RowBox[{
   RowBox[{"g", "[", 
    RowBox[{
     RowBox[{"Dual", "[", 
      RowBox[{"0.5", ",", "1."}], "]"}], ",", "2."}], "]"}], ",", 
   RowBox[{"g", "[", 
    RowBox[{"0.5", ",", 
     RowBox[{"Dual", "[", 
      RowBox[{"2.", ",", "1."}], "]"}]}], "]"}]}], 
  "}"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"NonStandard", "[", "%", "]"}], "\[Equal]", "grad"}]}], "Input",
 CellLabel->"In[29]:=",ExpressionUUID->"c5ed9fc2-aca7-4802-b9a4-c083492bdaf0"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"Dual", "[", 
    RowBox[{"0.19799317289597565`", ",", "0.20767327972713032`"}], "]"}], ",", 
   RowBox[{"Dual", "[", 
    RowBox[{"0.19799317289597565`", ",", 
     RowBox[{"-", "0.12278153850584299`"}]}], "]"}]}], "}"}]], "Output",
 CellLabel->"Out[29]=",ExpressionUUID->"0870543a-b745-4e8f-8a5b-e8d62b844874"],

Cell[BoxData["True"], "Output",
 CellLabel->"Out[30]=",ExpressionUUID->"d2de42e3-b2fe-4946-8cbc-1cdf6767a136"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["Dual arrays", \
"Subsubsection",ExpressionUUID->"c998eb02-299e-424c-9747-61bbef47c8aa"],

Cell["\<\
Define a list of dual numbers. You can take the inner product like with \
normal numbers:\
\>", "Text",ExpressionUUID->"a05d593e-96dd-443b-bf68-777a706baf2a"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"dvec", "=", 
  RowBox[{
   RowBox[{
    RowBox[{"Dual", "[", 
     RowBox[{"#", ",", "1."}], "]"}], "&"}], "/@", 
   RowBox[{"RandomReal", "[", 
    RowBox[{"1", ",", "5"}], "]"}]}]}], "\n", 
 RowBox[{"dvec", ".", "dvec"}]}], "Input",
 CellLabel->"In[31]:=",ExpressionUUID->"f2e79813-517e-4913-958c-7e436a477fc0"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"Dual", "[", 
    RowBox[{"0.4424322205278919`", ",", "1.`"}], "]"}], ",", 
   RowBox[{"Dual", "[", 
    RowBox[{"0.37710219696925895`", ",", "1.`"}], "]"}], ",", 
   RowBox[{"Dual", "[", 
    RowBox[{"0.15420160993984577`", ",", "1.`"}], "]"}], ",", 
   RowBox[{"Dual", "[", 
    RowBox[{"0.21357249566410075`", ",", "1.`"}], "]"}], ",", 
   RowBox[{"Dual", "[", 
    RowBox[{"0.509544370917058`", ",", "1.`"}], "]"}]}], "}"}]], "Output",
 CellLabel->"Out[31]=",ExpressionUUID->"f74081f9-1e93-4d33-9306-92a49754c7e5"],

Cell[BoxData[
 RowBox[{"Dual", "[", 
  RowBox[{"0.666979150065776`", ",", "3.3937057880363106`"}], "]"}]], "Output",
 CellLabel->"Out[32]=",ExpressionUUID->"5a6afaee-4398-4e39-b093-50de716c81e9"]
}, Open  ]],

Cell["This format is quite slow for large numbers, though:", \
"Text",ExpressionUUID->"25b49340-e20d-41a9-b752-92712e7f54bc"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"dvec", "=", 
   RowBox[{
    RowBox[{
     RowBox[{"Dual", "[", 
      RowBox[{"#", ",", "1."}], "]"}], "&"}], "/@", 
    RowBox[{"RandomReal", "[", 
     RowBox[{"1", ",", 
      RowBox[{"10", "^", "3"}]}], "]"}]}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"dvec", ".", "dvec"}], "//", "RepeatedTiming"}]}], "Input",
 CellLabel->"In[35]:=",ExpressionUUID->"e14d81d2-2478-4d2b-b9ee-117e6f2574c5"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.0134259999999999935`2.", ",", 
   RowBox[{"Dual", "[", 
    RowBox[{"340.35987834982757`", ",", "1013.6016341010367`"}], "]"}]}], 
  "}"}]], "Output",
 CellLabel->"Out[36]=",ExpressionUUID->"af412c40-5d6c-4293-9bd0-e0861fbe0961"]
}, Open  ]],

Cell["Convert the list to a more efficient format:", \
"Text",ExpressionUUID->"f413bb78-68b5-4fa2-ac81-76701079f1f9"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"dvecPacked", "=", 
   RowBox[{"PackDualArray", "[", "dvec", "]"}]}], ";"}], "\n", 
 RowBox[{"dvecPacked", "//", "Short"}]}], "Input",
 CellLabel->"In[43]:=",ExpressionUUID->"371997b7-b9d2-4c0b-a96e-fc214cf44cf6"],

Cell[BoxData[
 TagBox[
  RowBox[{"Dual", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "0.7886407985223389`", ",", "0.05064134719808422`", ",", 
      "0.4688222313323376`", ",", 
      RowBox[{"\[LeftSkeleton]", "994", "\[RightSkeleton]"}], ",", 
      "0.8386213676851417`", ",", "0.5240010236577652`", ",", 
      "0.2296946529681283`"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"1.`", ",", 
      RowBox[{"\[LeftSkeleton]", "998", "\[RightSkeleton]"}], ",", "1.`"}], 
     "}"}]}], "]"}],
  Short]], "Output",
 CellLabel->
  "Out[44]//Short=",ExpressionUUID->"4f965baf-5cbf-4844-b3d0-ffca2c566158"]
}, Open  ]],

Cell["This inner product can be calculated much faster like this:", \
"Text",ExpressionUUID->"99c2b295-9f04-41cb-ba68-4b18b01b32da"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"dvecPacked", ".", "dvecPacked"}], "//", 
  "RepeatedTiming"}]], "Input",
 CellLabel->"In[39]:=",ExpressionUUID->"2cb33653-32cf-4056-a04a-07e1325b889f"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.0000528208169506335`2.", ",", 
   RowBox[{"Dual", "[", 
    RowBox[{"340.35987834982757`", ",", "1013.6016341010368`"}], "]"}]}], 
  "}"}]], "Output",
 CellLabel->"Out[39]=",ExpressionUUID->"23252a72-dd83-4229-82c8-4bb6e3a533f8"]
}, Open  ]],

Cell["You can always unpack again:", \
"Text",ExpressionUUID->"64fda5da-f8ad-409f-b1f8-0bd71f87ff46"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"UnpackDualArray", "[", "dvecPacked", "]"}], "===", 
  "dvec"}]], "Input",
 CellLabel->"In[40]:=",ExpressionUUID->"5e7dd383-749b-47e6-8e1a-6ef176169560"],

Cell[BoxData["True"], "Output",
 CellLabel->"Out[40]=",ExpressionUUID->"00c67318-7fdc-47a4-96c6-39a4b5d45316"]
}, Open  ]],

Cell["Test if a dual array is in packed or unpacked form:", \
"Text",ExpressionUUID->"8bf1c261-cd3c-42a4-9452-4c6370b69d81"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"DualArrayQ", "[", "dvecPacked", "]"}], "\n", 
 RowBox[{"UnpackedDualArrayQ", "[", "dvec", "]"}]}], "Input",
 CellLabel->"In[45]:=",ExpressionUUID->"b870f717-dc08-4d88-90f3-e3f6890df523"],

Cell[BoxData["True"], "Output",
 CellLabel->"Out[45]=",ExpressionUUID->"6efef544-8167-454d-ad7d-eaae5925e7d5"],

Cell[BoxData["True"], "Output",
 CellLabel->"Out[46]=",ExpressionUUID->"f73d416a-69d5-4d9b-a81f-7b0c8e47efcf"]
}, Open  ]],

Cell[TextData[{
 "You can define packed dual arrays directly without ",
 Cell[BoxData[
  FormBox[
   StyleBox["PackDualArray",
    FontWeight->"Bold"], TraditionalForm]],ExpressionUUID->
  "2058c1e0-06f1-492d-b866-459b32b08929"],
 ". The standard and nonstandard part should satisfy ",
 Cell[BoxData[
  TagBox[
   ButtonBox[
    StyleBox["ArrayQ", "SymbolsRefLink",
     ShowStringCharacters->True,
     FontFamily->"Source Sans Pro"],
    BaseStyle->Dynamic[
      FEPrivate`If[
       CurrentValue["MouseOver"], {
       "Link", FontColor -> RGBColor[0.854902, 0.396078, 0.145098]}, {
       "Link"}]],
    ButtonData->"paclet:ref/ArrayQ",
    ContentPadding->False],
   MouseAppearanceTag["LinkHand"]]], "InlineFormula",
  FontFamily->"Source Sans Pro",ExpressionUUID->
  "b4ae2f4d-e63e-4079-8ac6-e13b0da760e4"],
 " and have the same ",
 Cell[BoxData[
  TagBox[
   ButtonBox[
    StyleBox["Dimensions", "SymbolsRefLink",
     ShowStringCharacters->True,
     FontFamily->"Source Sans Pro"],
    BaseStyle->Dynamic[
      FEPrivate`If[
       CurrentValue["MouseOver"], {
       "Link", FontColor -> RGBColor[0.854902, 0.396078, 0.145098]}, {
       "Link"}]],
    ButtonData->"paclet:ref/Dimensions",
    ContentPadding->False],
   MouseAppearanceTag["LinkHand"]]], "InlineFormula",
  FontFamily->"Source Sans Pro",ExpressionUUID->
  "430cff36-2ba4-43b1-b7a5-cb5522ca976d"],
 ":"
}], "Text",ExpressionUUID->"7ae4aac7-734a-4b67-bbf1-141c237f29e3"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"myArray", "=", 
  RowBox[{"Dual", "[", 
   RowBox[{
    RowBox[{"Range", "[", "10", "]"}], ",", 
    RowBox[{"ConstantArray", "[", 
     RowBox[{"1", ",", "10"}], "]"}]}], "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"DualArrayQ", "[", "myArray", "]"}]}], "Input",
 CellLabel->"In[48]:=",ExpressionUUID->"b6ccc2eb-74ac-4fa7-acab-93da9a1517ed"],

Cell[BoxData[
 RowBox[{"Dual", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
    "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "7", ",", "8",
      ",", "9", ",", "10"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1",
      ",", "1", ",", "1"}], "}"}]}], "]"}]], "Output",
 CellLabel->"Out[48]=",ExpressionUUID->"0756c45b-3de3-44d5-92da-095e2b79d5b3"],

Cell[BoxData["True"], "Output",
 CellLabel->"Out[49]=",ExpressionUUID->"ab2deb44-8f20-45cb-9b13-9c08e04ac5c6"]
}, Open  ]]
}, Closed]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Symbols", \
"Subsection",ExpressionUUID->"480ee803-0653-481c-ba8a-1ac428f21399"],

Cell[CellGroupData[{

Cell["Construction and accessing standard/nonstandard parts", \
"Subsubsection",ExpressionUUID->"6a59529d-398c-4b37-8c91-e92b7872fd6f"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"?", "Dual"}], "\[IndentingNewLine]", 
 RowBox[{"?", "ToDual"}], "\[IndentingNewLine]", 
 RowBox[{"?", "Standard"}], "\[IndentingNewLine]", 
 RowBox[{"?", "NonStandard"}], "\[IndentingNewLine]", 
 RowBox[{"?", "StandardNonStandard"}], "\[IndentingNewLine]", 
 RowBox[{"?", "StandardAll"}]}], "Input",
 CellLabel->"In[3]:=",ExpressionUUID->"3082b9ef-db93-4ab3-b0ce-e85ddbdee692"],

Cell[BoxData[
 InterpretationBox[
  StyleBox[
   FrameBox[
    DynamicModuleBox[{System`InformationDump`open$$ = False, 
     System`InformationDump`mouseOver$$ = False}, 
     PaneSelectorBox[{True->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False,
             BaseStyle -> None],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"\\!\\(\\*RowBox[{\\\"Dual\\\", \\\"[\\\", \
RowBox[{StyleBox[\\\"a\\\", \\\"TI\\\"], \\\",\\\",  StyleBox[\\\"b\\\", \
\\\"TI\\\"]}], \\\"]\\\"}]\\) represents a dual number with standard part \\!\
\\(\\*StyleBox[\\\"a\\\", \\\"TI\\\"]\\) and infinitesimal part \
\\!\\(\\*StyleBox[\\\"b\\\", \\\"TI\\\"]\\).\\n\\!\\(\\*RowBox[{\\\"Dual\\\", \
\\\"[\\\", RowBox[{StyleBox[SubscriptBox[\\\"array\\\", StyleBox[\\\"1\\\", \
\\\"TR\\\"]], \\\"TI\\\"], \\\",\\\",  StyleBox[SubscriptBox[\\\"array\\\", \
StyleBox[\\\"2\\\", \\\"TR\\\"]], \\\"TI\\\"]}], \\\"]\\\"}]\\) represents an \
array of dual numbers. The arrays should have the same shape (i.e., \
Dimensions[\\!\\(\\*StyleBox[SubscriptBox[\\\"array\\\", StyleBox[\\\"1\\\", \
\\\"TR\\\"]], \\\"TI\\\"]\\)] === \
Dimensions[\\!\\(\\*StyleBox[SubscriptBox[\\\"array\\\", StyleBox[\\\"2\\\", \
\\\"TR\\\"]], \\\"TI\\\"]\\)])\\n\\!\\(\\*RowBox[{\\\"Dual\\\", \\\"[\\\", \
RowBox[{StyleBox[\\\"a\\\", \\\"TI\\\"]}], \\\"]\\\"}]\\) uses ToDual[a, 0] \
to construct a dual quantity.\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          PaneBox[GridBox[{
             {
              
              DynamicModuleBox[{System`InformationDump`open$$ = {
               False, False, False, False, False, False, False, False, False, 
                False, False, False}}, 
               StyleBox[GridBox[{
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Attributes\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Attributes\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Attributes", "Tooltip"]& ], 
                   RowBox[{"{", "ReadProtected", "}"}]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Full Name\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"FullName\"",
                    TooltipStyle->"TextStyling"],
                    
                    Annotation[#, "FullName", 
                    "Tooltip"]& ], "\<\"DualNumbers`Dual\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {Right, Left}},
                 GridBoxDividers->None,
                 GridBoxItemSize->{"Columns" -> {Automatic, Automatic}},
                 GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.5599999999999999]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}], "DialogStyle",
                StripOnInput->False],
               DynamicModuleValues:>{}]}
            },
            DefaultBaseStyle->"Column",
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.5599999999999999]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[3.6]}, 
                Offset[0.2]}}],
           FrameMargins->6], ""},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpener"]], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpenerHot"]]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, False],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"], False->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"\\!\\(\\*RowBox[{\\\"Dual\\\", \\\"[\\\", \
RowBox[{StyleBox[\\\"a\\\", \\\"TI\\\"], \\\",\\\",  StyleBox[\\\"b\\\", \
\\\"TI\\\"]}], \\\"]\\\"}]\\) represents a dual number with standard part \\!\
\\(\\*StyleBox[\\\"a\\\", \\\"TI\\\"]\\) and infinitesimal part \
\\!\\(\\*StyleBox[\\\"b\\\", \\\"TI\\\"]\\).\\n\\!\\(\\*RowBox[{\\\"Dual\\\", \
\\\"[\\\", RowBox[{StyleBox[SubscriptBox[\\\"array\\\", StyleBox[\\\"1\\\", \
\\\"TR\\\"]], \\\"TI\\\"], \\\",\\\",  StyleBox[SubscriptBox[\\\"array\\\", \
StyleBox[\\\"2\\\", \\\"TR\\\"]], \\\"TI\\\"]}], \\\"]\\\"}]\\) represents an \
array of dual numbers. The arrays should have the same shape (i.e., \
Dimensions[\\!\\(\\*StyleBox[SubscriptBox[\\\"array\\\", StyleBox[\\\"1\\\", \
\\\"TR\\\"]], \\\"TI\\\"]\\)] === \
Dimensions[\\!\\(\\*StyleBox[SubscriptBox[\\\"array\\\", StyleBox[\\\"2\\\", \
\\\"TR\\\"]], \\\"TI\\\"]\\)])\\n\\!\\(\\*RowBox[{\\\"Dual\\\", \\\"[\\\", \
RowBox[{StyleBox[\\\"a\\\", \\\"TI\\\"]}], \\\"]\\\"}]\\) uses ToDual[a, 0] \
to construct a dual quantity.\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"],
               ImageSizeCache->{12., {3., 9.}}], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpenerHot"],
               ImageSizeCache->{12., {3., 9.}}]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, True],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}, Dynamic[System`InformationDump`open$$],
      BaselinePosition->Baseline,
      FrameMargins->0,
      ImageSize->Automatic],
     DynamicModuleValues:>{}],
    BaseStyle->"InformationGridFrame",
    StripOnInput->False], "InformationGridPlain",
   StripOnInput->False],
  InformationData[
   Association[
   "ObjectType" -> "Symbol", "Usage" -> 
    "\!\(\*RowBox[{\"Dual\", \"[\", RowBox[{StyleBox[\"a\", \"TI\"], \",\",  \
StyleBox[\"b\", \"TI\"]}], \"]\"}]\) represents a dual number with standard \
part \!\(\*StyleBox[\"a\", \"TI\"]\) and infinitesimal part \
\!\(\*StyleBox[\"b\", \"TI\"]\).\n\!\(\*RowBox[{\"Dual\", \"[\", \
RowBox[{StyleBox[SubscriptBox[\"array\", StyleBox[\"1\", \"TR\"]], \"TI\"], \
\",\",  StyleBox[SubscriptBox[\"array\", StyleBox[\"2\", \"TR\"]], \"TI\"]}], \
\"]\"}]\) represents an array of dual numbers. The arrays should have the \
same shape (i.e., Dimensions[\!\(\*StyleBox[SubscriptBox[\"array\", StyleBox[\
\"1\", \"TR\"]], \"TI\"]\)] === \
Dimensions[\!\(\*StyleBox[SubscriptBox[\"array\", StyleBox[\"2\", \"TR\"]], \
\"TI\"]\)])\n\!\(\*RowBox[{\"Dual\", \"[\", RowBox[{StyleBox[\"a\", \
\"TI\"]}], \"]\"}]\) uses ToDual[a, 0] to construct a dual quantity.", 
    "Documentation" -> None, "OwnValues" -> None, "UpValues" -> None, 
    "DownValues" -> None, "SubValues" -> None, "DefaultValues" -> None, 
    "NValues" -> None, "FormatValues" -> None, "Options" -> None, 
    "Attributes" -> {ReadProtected}, "FullName" -> "DualNumbers`Dual"], 
   False]]], "Output",
 CellLabel->"Out[3]=",ExpressionUUID->"faa0880a-a7d8-4ebe-b319-782509ba3be1"],

Cell[BoxData[
 InterpretationBox[
  StyleBox[
   FrameBox[
    DynamicModuleBox[{System`InformationDump`open$$ = False, 
     System`InformationDump`mouseOver$$ = False}, 
     PaneSelectorBox[{True->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False,
             BaseStyle -> None],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"\\!\\(\\*RowBox[{\\\"ToDual\\\", \\\"[\\\", \
RowBox[{StyleBox[\\\"expr\\\", \\\"TI\\\"], \\\",\\\",  \
StyleBox[\\\"const\\\", \\\"TI\\\"]}], \\\"]\\\"}]\\) constructs a dual \
scalar or array with constant nonstandard part. The default value for \
\\!\\(\\*StyleBox[\\\"const\\\", \\\"TI\\\"]\\) is 0.\"\>", 
             "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          PaneBox[GridBox[{
             {
              
              DynamicModuleBox[{System`InformationDump`open$$ = {
               False, False, False, False, False, False, False, False, False, 
                False, False, False}}, 
               StyleBox[GridBox[{
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Definitions\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Definitions\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Definitions", "Tooltip"]& ], GridBox[{
                    {
                    RowBox[{
                    RowBox[{"ToDual", "[", 
                    RowBox[{"DualNumbers`Private`d_Dual", ",", "___"}], "]"}],
                     ":=", "DualNumbers`Private`d"}]},
                    {
                    RowBox[{
                    RowBox[{"ToDual", "[", 
                    RowBox[{
                    RowBox[{
                    "DualNumbers`Private`a_SparseArray", "?", 
                    "DualFreeArrayQ"}], ",", 
                    RowBox[{"DualNumbers`Private`const", ":", 
                    RowBox[{"Except", "[", 
                    RowBox[{"_", "?", "ArrayQ"}], "]"}], ":", "0"}]}], "]"}], 
                    ":=", 
                    RowBox[{"Dual", "[", 
                    RowBox[{"DualNumbers`Private`a", ",", 
                    RowBox[{"SparseArray", "[", 
                    RowBox[{
                    RowBox[{"{", "}"}], ",", 
                    RowBox[{"Dimensions", "[", "DualNumbers`Private`a", "]"}],
                     ",", "DualNumbers`Private`const"}], "]"}]}], "]"}]}]},
                    {
                    RowBox[{
                    RowBox[{"ToDual", "[", 
                    RowBox[{
                    RowBox[{"DualNumbers`Private`a_", "?", "DualFreeArrayQ"}],
                     ",", 
                    RowBox[{"DualNumbers`Private`const", ":", 
                    RowBox[{"Except", "[", 
                    RowBox[{"_", "?", "ArrayQ"}], "]"}], ":", "0"}]}], "]"}], 
                    ":=", 
                    RowBox[{"Dual", "[", 
                    RowBox[{"DualNumbers`Private`a", ",", 
                    RowBox[{"ConstantArray", "[", 
                    RowBox[{"DualNumbers`Private`const", ",", 
                    RowBox[{
                    "Dimensions", "[", "DualNumbers`Private`a", "]"}]}], 
                    "]"}]}], "]"}]}]},
                    {
                    RowBox[{
                    RowBox[{"ToDual", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"DualNumbers`Private`a_", "?", "ArrayQ"}], "/;", 
                    RowBox[{"!", 
                    RowBox[{
                    "DualFreeArrayQ", "[", "DualNumbers`Private`a", "]"}]}]}],
                     ",", 
                    RowBox[{"DualNumbers`Private`const", ":", 
                    RowBox[{"Except", "[", 
                    RowBox[{"_", "?", "ArrayQ"}], "]"}], ":", "0"}]}], "]"}], 
                    ":=", 
                    RowBox[{"PackDualArray", "[", 
                    RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"ToDual", "[", 
                    RowBox[{"#1", ",", "DualNumbers`Private`const"}], "]"}], 
                    "&"}], ",", "DualNumbers`Private`a", ",", 
                    RowBox[{"{", 
                    RowBox[{"ArrayDepth", "[", "DualNumbers`Private`a", "]"}],
                     "}"}]}], "]"}], "]"}]}]},
                    {
                    RowBox[{
                    RowBox[{"ToDual", "[", 
                    RowBox[{
                    RowBox[{"DualNumbers`Private`a_", "?", "DualFreeArrayQ"}],
                     ",", 
                    RowBox[{
                    "DualNumbers`Private`b_", "?", "DualFreeArrayQ"}]}], 
                    "]"}], ":=", 
                    RowBox[{"Dual", "[", 
                    RowBox[{
                    "DualNumbers`Private`a", ",", "DualNumbers`Private`b"}], 
                    "]"}]}]},
                    {
                    RowBox[{
                    RowBox[{"ToDual", "[", 
                    RowBox[{
                    RowBox[{"DualNumbers`Private`a", ":", 
                    RowBox[{"Except", "[", 
                    RowBox[{"_", "?", "ArrayQ"}], "]"}]}], ",", 
                    RowBox[{
                    "DualNumbers`Private`arr_SparseArray", "?", 
                    "DualFreeArrayQ"}]}], "]"}], ":=", 
                    RowBox[{"Dual", "[", 
                    RowBox[{
                    RowBox[{"SparseArray", "[", 
                    RowBox[{
                    RowBox[{"{", "}"}], ",", 
                    RowBox[{
                    "Dimensions", "[", "DualNumbers`Private`arr", "]"}], ",", 
                    "DualNumbers`Private`a"}], "]"}], ",", 
                    "DualNumbers`Private`arr"}], "]"}]}]},
                    {
                    RowBox[{
                    RowBox[{"ToDual", "[", 
                    RowBox[{
                    RowBox[{"DualNumbers`Private`a", ":", 
                    RowBox[{"Except", "[", 
                    RowBox[{"_", "?", "ArrayQ"}], "]"}]}], ",", 
                    RowBox[{
                    "DualNumbers`Private`arr_", "?", "DualFreeArrayQ"}]}], 
                    "]"}], ":=", 
                    RowBox[{"Dual", "[", 
                    RowBox[{
                    RowBox[{"ConstantArray", "[", 
                    RowBox[{"DualNumbers`Private`a", ",", 
                    RowBox[{
                    "Dimensions", "[", "DualNumbers`Private`arr", "]"}]}], 
                    "]"}], ",", "DualNumbers`Private`arr"}], "]"}]}]},
                    {
                    RowBox[{
                    RowBox[{"ToDual", "[", 
                    RowBox[{"DualNumbers`Private`a_", ",", 
                    RowBox[{"DualNumbers`Private`const", ":", 
                    RowBox[{"Except", "[", 
                    RowBox[{"_", "?", "ArrayQ"}], "]"}], ":", "0"}]}], "]"}], 
                    ":=", 
                    RowBox[{"Dual", "[", 
                    RowBox[{
                    "DualNumbers`Private`a", ",", 
                    "DualNumbers`Private`const"}], "]"}]}]},
                    {
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    "ToDual", "[", "DualNumbers`Private`args__", "]"}], "/;", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Message", "[", 
                    RowBox[{
                    StyleBox[
                    RowBox[{"ToDual", "::", "cons"}], "MessageName"], ",", 
                    RowBox[{"Short", "/@", 
                    RowBox[{"{", "DualNumbers`Private`args", "}"}]}]}], "]"}],
                     ";", "False"}], ")"}]}], ":=", "Undefined"}]}
                    },
                    DefaultBaseStyle->"Column",
                    GridBoxAlignment->{"Columns" -> {{Left}}},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]},
                  {
                   TagBox[
                    TooltipBox[
                    
                    StyleBox["\<\" Default Definitions\"\>", 
                    "InformationRowLabel",
                    StripOnInput->False],
                    "\"DefaultValues\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "DefaultValues", "Tooltip"]& ], 
                   InterpretationBox[GridBox[{
                    {
                    RowBox[{
                    RowBox[{"SyntaxInformation", "[", "ToDual", "]"}], "=", 
                    RowBox[{"{", 
                    RowBox[{"\<\"ArgumentsPattern\"\>", "\[Rule]", 
                    RowBox[{"{", "__", "}"}]}], "}"}]}]}
                    },
                    BaselinePosition->{Baseline, {1, 1}},
                    
                    GridBoxAlignment->{
                    "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}],
                    
                    ColumnForm[{
                    SyntaxInformation[DualNumbers`ToDual] = {
                    "ArgumentsPattern" -> {
                    BlankSequence[]}}}],
                    Editable->False]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Full Name\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"FullName\"",
                    TooltipStyle->"TextStyling"],
                    
                    Annotation[#, "FullName", 
                    "Tooltip"]& ], "\<\"DualNumbers`ToDual\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {Right, Left}},
                 GridBoxDividers->None,
                 GridBoxItemSize->{"Columns" -> {Automatic, Automatic}},
                 GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.5599999999999999]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}], "DialogStyle",
                StripOnInput->False],
               DynamicModuleValues:>{}]}
            },
            DefaultBaseStyle->"Column",
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.5599999999999999]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[3.6]}, 
                Offset[0.2]}}],
           FrameMargins->6], ""},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpener"]], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpenerHot"]]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, False],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"], False->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"\\!\\(\\*RowBox[{\\\"ToDual\\\", \\\"[\\\", \
RowBox[{StyleBox[\\\"expr\\\", \\\"TI\\\"], \\\",\\\",  \
StyleBox[\\\"const\\\", \\\"TI\\\"]}], \\\"]\\\"}]\\) constructs a dual \
scalar or array with constant nonstandard part. The default value for \
\\!\\(\\*StyleBox[\\\"const\\\", \\\"TI\\\"]\\) is 0.\"\>", 
             "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"],
               ImageSizeCache->{12., {3., 9.}}], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpenerHot"],
               ImageSizeCache->{12., {3., 9.}}]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, True],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}, Dynamic[System`InformationDump`open$$],
      BaselinePosition->Baseline,
      FrameMargins->0,
      ImageSize->Automatic],
     DynamicModuleValues:>{}],
    BaseStyle->"InformationGridFrame",
    StripOnInput->False], "InformationGridPlain",
   StripOnInput->False],
  InformationData[
   Association[
   "ObjectType" -> "Symbol", "Usage" -> 
    "\!\(\*RowBox[{\"ToDual\", \"[\", RowBox[{StyleBox[\"expr\", \"TI\"], \",\
\",  StyleBox[\"const\", \"TI\"]}], \"]\"}]\) constructs a dual scalar or \
array with constant nonstandard part. The default value for \
\!\(\*StyleBox[\"const\", \"TI\"]\) is 0.", "Documentation" -> None, 
    "OwnValues" -> None, "UpValues" -> None, "DownValues" -> 
    Information`InformationValueForm[
     DownValues, DualNumbers`ToDual, {DualNumbers`ToDual[
         Pattern[DualNumbers`Private`d, 
          Blank[DualNumbers`Dual]], 
         BlankNullSequence[]] :> DualNumbers`Private`d, DualNumbers`ToDual[
         PatternTest[
          Pattern[DualNumbers`Private`a, 
           Blank[SparseArray]], DualNumbers`DualFreeArrayQ], 
         Optional[
          Pattern[DualNumbers`Private`const, 
           Except[
            PatternTest[
             Blank[], ArrayQ]]], 0]] :> 
       DualNumbers`Dual[DualNumbers`Private`a, 
         SparseArray[{}, 
          Dimensions[DualNumbers`Private`a], DualNumbers`Private`const]], 
       DualNumbers`ToDual[
         PatternTest[
          Pattern[DualNumbers`Private`a, 
           Blank[]], DualNumbers`DualFreeArrayQ], 
         Optional[
          Pattern[DualNumbers`Private`const, 
           Except[
            PatternTest[
             Blank[], ArrayQ]]], 0]] :> 
       DualNumbers`Dual[DualNumbers`Private`a, 
         ConstantArray[DualNumbers`Private`const, 
          Dimensions[DualNumbers`Private`a]]], DualNumbers`ToDual[
         Condition[
          PatternTest[
           Pattern[DualNumbers`Private`a, 
            Blank[]], ArrayQ], 
          Not[
           DualNumbers`DualFreeArrayQ[DualNumbers`Private`a]]], 
         Optional[
          Pattern[DualNumbers`Private`const, 
           Except[
            PatternTest[
             Blank[], ArrayQ]]], 0]] :> DualNumbers`PackDualArray[
         Map[
         DualNumbers`ToDual[#, DualNumbers`Private`const]& , 
          DualNumbers`Private`a, {
           ArrayDepth[DualNumbers`Private`a]}]], DualNumbers`ToDual[
         PatternTest[
          Pattern[DualNumbers`Private`a, 
           Blank[]], DualNumbers`DualFreeArrayQ], 
         PatternTest[
          Pattern[DualNumbers`Private`b, 
           Blank[]], DualNumbers`DualFreeArrayQ]] :> 
       DualNumbers`Dual[DualNumbers`Private`a, DualNumbers`Private`b], 
       DualNumbers`ToDual[
         Pattern[DualNumbers`Private`a, 
          Except[
           PatternTest[
            Blank[], ArrayQ]]], 
         PatternTest[
          Pattern[DualNumbers`Private`arr, 
           Blank[SparseArray]], DualNumbers`DualFreeArrayQ]] :> 
       DualNumbers`Dual[
         SparseArray[{}, 
          Dimensions[DualNumbers`Private`arr], DualNumbers`Private`a], 
         DualNumbers`Private`arr], DualNumbers`ToDual[
         Pattern[DualNumbers`Private`a, 
          Except[
           PatternTest[
            Blank[], ArrayQ]]], 
         PatternTest[
          Pattern[DualNumbers`Private`arr, 
           Blank[]], DualNumbers`DualFreeArrayQ]] :> DualNumbers`Dual[
         ConstantArray[DualNumbers`Private`a, 
          Dimensions[DualNumbers`Private`arr]], DualNumbers`Private`arr], 
       DualNumbers`ToDual[
         Pattern[DualNumbers`Private`a, 
          Blank[]], 
         Optional[
          Pattern[DualNumbers`Private`const, 
           Except[
            PatternTest[
             Blank[], ArrayQ]]], 0]] :> 
       DualNumbers`Dual[DualNumbers`Private`a, DualNumbers`Private`const], 
       Condition[
         DualNumbers`ToDual[
          Pattern[DualNumbers`Private`args, 
           BlankSequence[]]], Message[
           MessageName[DualNumbers`ToDual, "cons"], 
           Map[Short, {DualNumbers`Private`args}]]; False] :> Undefined}], 
    "SubValues" -> None, "DefaultValues" -> 
    Information`InformationValueForm[
     DefaultValues, DualNumbers`ToDual, {
      SyntaxInformation[DualNumbers`ToDual] -> {"ArgumentsPattern" -> {
           BlankSequence[]}}}], "NValues" -> None, "FormatValues" -> None, 
    "Options" -> None, "Attributes" -> {}, "FullName" -> 
    "DualNumbers`ToDual"], False]]], "Output",
 CellLabel->"Out[4]=",ExpressionUUID->"c0abb32c-af31-47ca-9088-749b61c36e74"],

Cell[BoxData[
 InterpretationBox[
  StyleBox[
   FrameBox[
    DynamicModuleBox[{System`InformationDump`open$$ = False, 
     System`InformationDump`mouseOver$$ = False}, 
     PaneSelectorBox[{True->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False,
             BaseStyle -> None],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"\\!\\(\\*RowBox[{\\\"Standard\\\", \\\"[\\\", \
RowBox[{StyleBox[\\\"d\\\", \\\"TI\\\"]}], \\\"]\\\"}]\\) extracts the \
standard part of a dual number \\!\\(\\*StyleBox[\\\"d\\\", \\\"TI\\\"]\\) \
(i.e., the first argument).\\nSymbolic quantities are assumed to have zero \
nonstandard parts. Threads over lists.\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          PaneBox[GridBox[{
             {
              
              DynamicModuleBox[{System`InformationDump`open$$ = {
               False, False, False, False, False, False, False, False, False, 
                False, False, False}}, 
               StyleBox[GridBox[{
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Definitions\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Definitions\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Definitions", "Tooltip"]& ], GridBox[{
                    {
                    RowBox[{
                    RowBox[{"Standard", "[", 
                    RowBox[{"Dual", "[", 
                    RowBox[{"DualNumbers`Private`a_", ",", "_"}], "]"}], 
                    "]"}], ":=", "DualNumbers`Private`a"}]},
                    {
                    RowBox[{
                    RowBox[{"Standard", "[", "DualNumbers`Private`x_", "]"}], 
                    ":=", "DualNumbers`Private`x"}]}
                    },
                    DefaultBaseStyle->"Column",
                    GridBoxAlignment->{"Columns" -> {{Left}}},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]},
                  {
                   TagBox[
                    TooltipBox[
                    
                    StyleBox["\<\" Default Definitions\"\>", 
                    "InformationRowLabel",
                    StripOnInput->False],
                    "\"DefaultValues\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "DefaultValues", "Tooltip"]& ], 
                   InterpretationBox[GridBox[{
                    {
                    RowBox[{
                    RowBox[{"SyntaxInformation", "[", "Standard", "]"}], "=", 
                    RowBox[{"{", 
                    RowBox[{"\<\"ArgumentsPattern\"\>", "\[Rule]", 
                    RowBox[{"{", "_", "}"}]}], "}"}]}]}
                    },
                    BaselinePosition->{Baseline, {1, 1}},
                    
                    GridBoxAlignment->{
                    "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}],
                    
                    ColumnForm[{
                    SyntaxInformation[DualNumbers`Standard] = {
                    "ArgumentsPattern" -> {
                    Blank[]}}}],
                    Editable->False]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Attributes\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Attributes\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Attributes", "Tooltip"]& ], 
                   RowBox[{"{", "Listable", "}"}]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Full Name\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"FullName\"",
                    TooltipStyle->"TextStyling"],
                    
                    Annotation[#, "FullName", 
                    "Tooltip"]& ], "\<\"DualNumbers`Standard\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {Right, Left}},
                 GridBoxDividers->None,
                 GridBoxItemSize->{"Columns" -> {Automatic, Automatic}},
                 GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.5599999999999999]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}], "DialogStyle",
                StripOnInput->False],
               DynamicModuleValues:>{}]}
            },
            DefaultBaseStyle->"Column",
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.5599999999999999]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[3.6]}, 
                Offset[0.2]}}],
           FrameMargins->6], ""},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpener"]], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpenerHot"]]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, False],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"], False->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"\\!\\(\\*RowBox[{\\\"Standard\\\", \\\"[\\\", \
RowBox[{StyleBox[\\\"d\\\", \\\"TI\\\"]}], \\\"]\\\"}]\\) extracts the \
standard part of a dual number \\!\\(\\*StyleBox[\\\"d\\\", \\\"TI\\\"]\\) \
(i.e., the first argument).\\nSymbolic quantities are assumed to have zero \
nonstandard parts. Threads over lists.\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"],
               ImageSizeCache->{12., {3., 9.}}], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpenerHot"],
               ImageSizeCache->{12., {3., 9.}}]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, True],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}, Dynamic[System`InformationDump`open$$],
      BaselinePosition->Baseline,
      FrameMargins->0,
      ImageSize->Automatic],
     DynamicModuleValues:>{}],
    BaseStyle->"InformationGridFrame",
    StripOnInput->False], "InformationGridPlain",
   StripOnInput->False],
  InformationData[
   Association[
   "ObjectType" -> "Symbol", "Usage" -> 
    "\!\(\*RowBox[{\"Standard\", \"[\", RowBox[{StyleBox[\"d\", \"TI\"]}], \
\"]\"}]\) extracts the standard part of a dual number \!\(\*StyleBox[\"d\", \
\"TI\"]\) (i.e., the first argument).\nSymbolic quantities are assumed to \
have zero nonstandard parts. Threads over lists.", "Documentation" -> None, 
    "OwnValues" -> None, "UpValues" -> None, "DownValues" -> 
    Information`InformationValueForm[
     DownValues, DualNumbers`Standard, {DualNumbers`Standard[
         DualNumbers`Dual[
          Pattern[DualNumbers`Private`a, 
           Blank[]], 
          Blank[]]] :> DualNumbers`Private`a, DualNumbers`Standard[
         Pattern[DualNumbers`Private`x, 
          Blank[]]] :> DualNumbers`Private`x}], "SubValues" -> None, 
    "DefaultValues" -> 
    Information`InformationValueForm[
     DefaultValues, DualNumbers`Standard, {
      SyntaxInformation[DualNumbers`Standard] -> {"ArgumentsPattern" -> {
           Blank[]}}}], "NValues" -> None, "FormatValues" -> None, "Options" -> 
    None, "Attributes" -> {Listable}, "FullName" -> "DualNumbers`Standard"], 
   False]]], "Output",
 CellLabel->"Out[5]=",ExpressionUUID->"70e8537a-caaf-4bd5-aecc-3174dad25148"],

Cell[BoxData[
 InterpretationBox[
  StyleBox[
   FrameBox[
    DynamicModuleBox[{System`InformationDump`open$$ = False, 
     System`InformationDump`mouseOver$$ = False}, 
     PaneSelectorBox[{True->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False,
             BaseStyle -> None],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"\\!\\(\\*RowBox[{\\\"NonStandard\\\", \\\"[\\\", \
RowBox[{StyleBox[\\\"d\\\", \\\"TI\\\"]}], \\\"]\\\"}]\\) extracts the \
nonstandard part of a dual number \\!\\(\\*StyleBox[\\\"d\\\", \\\"TI\\\"]\\) \
(i.e., the second argument).\\nSymbolic quantities are assumed to have zero \
nonstandard parts. Threads over lists.\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          PaneBox[GridBox[{
             {
              
              DynamicModuleBox[{System`InformationDump`open$$ = {
               False, False, False, False, False, False, False, False, False, 
                False, False, False}}, 
               StyleBox[GridBox[{
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Definitions\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Definitions\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Definitions", "Tooltip"]& ], GridBox[{
                    {
                    RowBox[{
                    RowBox[{"NonStandard", "[", 
                    RowBox[{"Dual", "[", 
                    RowBox[{"_", ",", "DualNumbers`Private`b_"}], "]"}], 
                    "]"}], ":=", "DualNumbers`Private`b"}]},
                    {
                    RowBox[{
                    RowBox[{"NonStandard", "[", "_", "]"}], ":=", "0"}]}
                    },
                    DefaultBaseStyle->"Column",
                    GridBoxAlignment->{"Columns" -> {{Left}}},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]},
                  {
                   TagBox[
                    TooltipBox[
                    
                    StyleBox["\<\" Default Definitions\"\>", 
                    "InformationRowLabel",
                    StripOnInput->False],
                    "\"DefaultValues\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "DefaultValues", "Tooltip"]& ], 
                   InterpretationBox[GridBox[{
                    {
                    RowBox[{
                    RowBox[{"SyntaxInformation", "[", "NonStandard", "]"}], 
                    "=", 
                    RowBox[{"{", 
                    RowBox[{"\<\"ArgumentsPattern\"\>", "\[Rule]", 
                    RowBox[{"{", "_", "}"}]}], "}"}]}]}
                    },
                    BaselinePosition->{Baseline, {1, 1}},
                    GridBoxAlignment->{
                    "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}],
                    
                    ColumnForm[{
                    SyntaxInformation[DualNumbers`NonStandard] = {
                    "ArgumentsPattern" -> {
                    Blank[]}}}],
                    Editable->False]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Attributes\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Attributes\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Attributes", "Tooltip"]& ], 
                   RowBox[{"{", "Listable", "}"}]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Full Name\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"FullName\"",
                    TooltipStyle->"TextStyling"],
                    
                    Annotation[#, "FullName", 
                    "Tooltip"]& ], "\<\"DualNumbers`NonStandard\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {Right, Left}},
                 GridBoxDividers->None,
                 GridBoxItemSize->{"Columns" -> {Automatic, Automatic}},
                 GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.5599999999999999]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}], "DialogStyle",
                StripOnInput->False],
               DynamicModuleValues:>{}]}
            },
            DefaultBaseStyle->"Column",
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.5599999999999999]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[3.6]}, 
                Offset[0.2]}}],
           FrameMargins->6], ""},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpener"]], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpenerHot"]]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, False],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"], False->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"\\!\\(\\*RowBox[{\\\"NonStandard\\\", \\\"[\\\", \
RowBox[{StyleBox[\\\"d\\\", \\\"TI\\\"]}], \\\"]\\\"}]\\) extracts the \
nonstandard part of a dual number \\!\\(\\*StyleBox[\\\"d\\\", \\\"TI\\\"]\\) \
(i.e., the second argument).\\nSymbolic quantities are assumed to have zero \
nonstandard parts. Threads over lists.\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"],
               ImageSizeCache->{12., {3., 9.}}], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpenerHot"],
               ImageSizeCache->{12., {3., 9.}}]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, True],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}, Dynamic[System`InformationDump`open$$],
      BaselinePosition->Baseline,
      FrameMargins->0,
      ImageSize->Automatic],
     DynamicModuleValues:>{}],
    BaseStyle->"InformationGridFrame",
    StripOnInput->False], "InformationGridPlain",
   StripOnInput->False],
  InformationData[
   Association[
   "ObjectType" -> "Symbol", "Usage" -> 
    "\!\(\*RowBox[{\"NonStandard\", \"[\", RowBox[{StyleBox[\"d\", \"TI\"]}], \
\"]\"}]\) extracts the nonstandard part of a dual number \
\!\(\*StyleBox[\"d\", \"TI\"]\) (i.e., the second argument).\nSymbolic \
quantities are assumed to have zero nonstandard parts. Threads over lists.", 
    "Documentation" -> None, "OwnValues" -> None, "UpValues" -> None, 
    "DownValues" -> 
    Information`InformationValueForm[
     DownValues, DualNumbers`NonStandard, {DualNumbers`NonStandard[
         DualNumbers`Dual[
          Blank[], 
          Pattern[DualNumbers`Private`b, 
           Blank[]]]] :> DualNumbers`Private`b, DualNumbers`NonStandard[
         Blank[]] :> 0}], "SubValues" -> None, "DefaultValues" -> 
    Information`InformationValueForm[
     DefaultValues, DualNumbers`NonStandard, {
      SyntaxInformation[DualNumbers`NonStandard] -> {"ArgumentsPattern" -> {
           Blank[]}}}], "NValues" -> None, "FormatValues" -> None, "Options" -> 
    None, "Attributes" -> {Listable}, "FullName" -> 
    "DualNumbers`NonStandard"], False]]], "Output",
 CellLabel->"Out[6]=",ExpressionUUID->"cfb8cdb7-6a17-4910-8139-05d5648b63c7"],

Cell[BoxData[
 InterpretationBox[
  StyleBox[
   FrameBox[
    DynamicModuleBox[{System`InformationDump`open$$ = False, 
     System`InformationDump`mouseOver$$ = False}, 
     PaneSelectorBox[{True->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False,
             BaseStyle -> None],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"\\!\\(\\*RowBox[{\\\"StandardNonStandard\\\", \\\"[\
\\\", RowBox[{StyleBox[\\\"d\\\", \\\"TI\\\"]}], \\\"]\\\"}]\\) extracts the \
standard and nonstandard parts of a dual number \\!\\(\\*StyleBox[\\\"d\\\", \
\\\"TI\\\"]\\) and returns them as a \
list.\\n\\!\\(\\*RowBox[{\\\"StandardNonStandard\\\", \\\"[\\\", \
RowBox[{StyleBox[\\\"dualArray\\\", \\\"TI\\\"]}], \\\"]\\\"}]\\) returns the \
same as StandardNonStandard[UnpackDualArray[\\!\\(\\*StyleBox[\\\"dualArray\\\
\", \\\"TI\\\"]\\)]].\\nSymbolic quantities are assumed to have zero \
nonstandard parts. Threads over lists.\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          PaneBox[GridBox[{
             {
              
              DynamicModuleBox[{System`InformationDump`open$$ = {
               False, False, False, False, False, False, False, False, False, 
                False, False, False}}, 
               StyleBox[GridBox[{
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Definitions\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Definitions\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Definitions", "Tooltip"]& ], GridBox[{
                    {
                    RowBox[{
                    RowBox[{"StandardNonStandard", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"Dual", "[", 
                    RowBox[{
                    "DualNumbers`Private`a_", ",", "DualNumbers`Private`b_"}],
                     "]"}], ")"}], "?", "DualArrayQ"}], "]"}], ":=", 
                    RowBox[{"With", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"DualNumbers`Private`depth", "=", 
                    RowBox[{
                    "ArrayDepth", "[", "DualNumbers`Private`a", "]"}]}], 
                    "}"}], ",", 
                    RowBox[{"Transpose", "[", 
                    RowBox[{
                    RowBox[{"ToPackedArray", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    "DualNumbers`Private`a", ",", "DualNumbers`Private`b"}], 
                    "}"}], "]"}], ",", 
                    RowBox[{"Prepend", "[", 
                    RowBox[{
                    RowBox[{"Range", "[", 
                    RowBox[{"DualNumbers`Private`depth", "-", "1"}], "]"}], 
                    ",", "DualNumbers`Private`depth"}], "]"}]}], "]"}]}], 
                    "]"}]}]},
                    {
                    RowBox[{
                    RowBox[{"StandardNonStandard", "[", 
                    RowBox[{"Dual", "[", 
                    RowBox[{
                    "DualNumbers`Private`a_", ",", "DualNumbers`Private`b_"}],
                     "]"}], "]"}], ":=", 
                    RowBox[{"{", 
                    RowBox[{
                    "DualNumbers`Private`a", ",", "DualNumbers`Private`b"}], 
                    "}"}]}]},
                    {
                    RowBox[{
                    RowBox[{
                    "StandardNonStandard", "[", "DualNumbers`Private`x_", 
                    "]"}], ":=", 
                    RowBox[{"{", 
                    RowBox[{"DualNumbers`Private`x", ",", "0"}], "}"}]}]}
                    },
                    DefaultBaseStyle->"Column",
                    GridBoxAlignment->{"Columns" -> {{Left}}},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Attributes\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Attributes\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Attributes", "Tooltip"]& ], 
                   RowBox[{"{", "Listable", "}"}]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Full Name\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"FullName\"",
                    TooltipStyle->"TextStyling"],
                    
                    Annotation[#, "FullName", 
                    "Tooltip"]& ], "\<\"DualNumbers`StandardNonStandard\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {Right, Left}},
                 GridBoxDividers->None,
                 GridBoxItemSize->{"Columns" -> {Automatic, Automatic}},
                 GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.5599999999999999]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}], "DialogStyle",
                StripOnInput->False],
               DynamicModuleValues:>{}]}
            },
            DefaultBaseStyle->"Column",
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.5599999999999999]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[3.6]}, 
                Offset[0.2]}}],
           FrameMargins->6], ""},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpener"]], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpenerHot"]]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, False],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"], False->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"\\!\\(\\*RowBox[{\\\"StandardNonStandard\\\", \\\"[\
\\\", RowBox[{StyleBox[\\\"d\\\", \\\"TI\\\"]}], \\\"]\\\"}]\\) extracts the \
standard and nonstandard parts of a dual number \\!\\(\\*StyleBox[\\\"d\\\", \
\\\"TI\\\"]\\) and returns them as a \
list.\\n\\!\\(\\*RowBox[{\\\"StandardNonStandard\\\", \\\"[\\\", \
RowBox[{StyleBox[\\\"dualArray\\\", \\\"TI\\\"]}], \\\"]\\\"}]\\) returns the \
same as StandardNonStandard[UnpackDualArray[\\!\\(\\*StyleBox[\\\"dualArray\\\
\", \\\"TI\\\"]\\)]].\\nSymbolic quantities are assumed to have zero \
nonstandard parts. Threads over lists.\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"],
               ImageSizeCache->{12., {3., 9.}}], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpenerHot"],
               ImageSizeCache->{12., {3., 9.}}]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, True],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}, Dynamic[System`InformationDump`open$$],
      BaselinePosition->Baseline,
      FrameMargins->0,
      ImageSize->Automatic],
     DynamicModuleValues:>{}],
    BaseStyle->"InformationGridFrame",
    StripOnInput->False], "InformationGridPlain",
   StripOnInput->False],
  InformationData[
   Association[
   "ObjectType" -> "Symbol", "Usage" -> 
    "\!\(\*RowBox[{\"StandardNonStandard\", \"[\", RowBox[{StyleBox[\"d\", \
\"TI\"]}], \"]\"}]\) extracts the standard and nonstandard parts of a dual \
number \!\(\*StyleBox[\"d\", \"TI\"]\) and returns them as a list.\n\
\!\(\*RowBox[{\"StandardNonStandard\", \"[\", RowBox[{StyleBox[\"dualArray\", \
\"TI\"]}], \"]\"}]\) returns the same as StandardNonStandard[UnpackDualArray[\
\!\(\*StyleBox[\"dualArray\", \"TI\"]\)]].\nSymbolic quantities are assumed \
to have zero nonstandard parts. Threads over lists.", "Documentation" -> None,
     "OwnValues" -> None, "UpValues" -> None, "DownValues" -> 
    Information`InformationValueForm[
     DownValues, DualNumbers`StandardNonStandard, {
      DualNumbers`StandardNonStandard[
         PatternTest[
          DualNumbers`Dual[
           Pattern[DualNumbers`Private`a, 
            Blank[]], 
           Pattern[DualNumbers`Private`b, 
            Blank[]]], DualNumbers`DualArrayQ]] :> 
       With[{DualNumbers`Private`depth = ArrayDepth[DualNumbers`Private`a]}, 
         Transpose[
          
          Developer`ToPackedArray[{
           DualNumbers`Private`a, DualNumbers`Private`b}], 
          Prepend[
           Range[
            Subtract[DualNumbers`Private`depth, 1]], 
           DualNumbers`Private`depth]]], DualNumbers`StandardNonStandard[
         DualNumbers`Dual[
          Pattern[DualNumbers`Private`a, 
           Blank[]], 
          Pattern[DualNumbers`Private`b, 
           Blank[]]]] :> {DualNumbers`Private`a, DualNumbers`Private`b}, 
       DualNumbers`StandardNonStandard[
         Pattern[DualNumbers`Private`x, 
          Blank[]]] :> {DualNumbers`Private`x, 0}}], "SubValues" -> None, 
    "DefaultValues" -> None, "NValues" -> None, "FormatValues" -> None, 
    "Options" -> None, "Attributes" -> {Listable}, "FullName" -> 
    "DualNumbers`StandardNonStandard"], False]]], "Output",
 CellLabel->"Out[7]=",ExpressionUUID->"cc9bfce0-b532-4568-bad4-4c6fc529d0a2"],

Cell[BoxData[
 InterpretationBox[
  StyleBox[
   FrameBox[
    DynamicModuleBox[{System`InformationDump`open$$ = False, 
     System`InformationDump`mouseOver$$ = False}, 
     PaneSelectorBox[{True->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False,
             BaseStyle -> None],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"\\!\\(\\*RowBox[{\\\"StandardAll\\\", \\\"[\\\", \
RowBox[{StyleBox[\\\"expr\\\", \\\"TI\\\"]}], \\\"]\\\"}]\\) replaces all \
dual numbers in \\!\\(\\*StyleBox[\\\"expr\\\", \\\"TI\\\"]\\) with their \
standard parts.\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          PaneBox[GridBox[{
             {
              
              DynamicModuleBox[{System`InformationDump`open$$ = {
               False, False, False, False, False, False, False, False, False, 
                False, False, False}}, 
               StyleBox[GridBox[{
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Definitions\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Definitions\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Definitions", "Tooltip"]& ], GridBox[{
                    {
                    RowBox[{
                    RowBox[{
                    "StandardAll", "[", "DualNumbers`Private`expr_", "]"}], ":=", 
                    RowBox[{
                    "DualNumbers`Private`expr", "//.", "\[VeryThinSpace]", 
                    RowBox[{
                    RowBox[{"Dual", "[", 
                    RowBox[{"DualNumbers`Private`a_", ",", "_"}], "]"}], 
                    "\[RuleDelayed]", "DualNumbers`Private`a"}]}]}]}
                    },
                    DefaultBaseStyle->"Column",
                    GridBoxAlignment->{"Columns" -> {{Left}}},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]},
                  {
                   TagBox[
                    TooltipBox[
                    
                    StyleBox["\<\" Default Definitions\"\>", 
                    "InformationRowLabel",
                    StripOnInput->False],
                    "\"DefaultValues\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "DefaultValues", "Tooltip"]& ], 
                   InterpretationBox[GridBox[{
                    {
                    RowBox[{
                    RowBox[{"SyntaxInformation", "[", "StandardAll", "]"}], 
                    "=", 
                    RowBox[{"{", 
                    RowBox[{"\<\"ArgumentsPattern\"\>", "\[Rule]", 
                    RowBox[{"{", "_", "}"}]}], "}"}]}]}
                    },
                    BaselinePosition->{Baseline, {1, 1}},
                    
                    GridBoxAlignment->{
                    "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}],
                    
                    ColumnForm[{
                    SyntaxInformation[DualNumbers`StandardAll] = {
                    "ArgumentsPattern" -> {
                    Blank[]}}}],
                    Editable->False]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Full Name\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"FullName\"",
                    TooltipStyle->"TextStyling"],
                    
                    Annotation[#, "FullName", 
                    "Tooltip"]& ], "\<\"DualNumbers`StandardAll\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {Right, Left}},
                 GridBoxDividers->None,
                 GridBoxItemSize->{"Columns" -> {Automatic, Automatic}},
                 GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.5599999999999999]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}], "DialogStyle",
                StripOnInput->False],
               DynamicModuleValues:>{}]}
            },
            DefaultBaseStyle->"Column",
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.5599999999999999]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[3.6]}, 
                Offset[0.2]}}],
           FrameMargins->6], ""},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpener"]], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpenerHot"]]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, False],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"], False->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"\\!\\(\\*RowBox[{\\\"StandardAll\\\", \\\"[\\\", \
RowBox[{StyleBox[\\\"expr\\\", \\\"TI\\\"]}], \\\"]\\\"}]\\) replaces all \
dual numbers in \\!\\(\\*StyleBox[\\\"expr\\\", \\\"TI\\\"]\\) with their \
standard parts.\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"],
               ImageSizeCache->{12., {3., 9.}}], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpenerHot"],
               ImageSizeCache->{12., {3., 9.}}]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, True],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}, Dynamic[System`InformationDump`open$$],
      BaselinePosition->Baseline,
      FrameMargins->0,
      ImageSize->Automatic],
     DynamicModuleValues:>{}],
    BaseStyle->"InformationGridFrame",
    StripOnInput->False], "InformationGridPlain",
   StripOnInput->False],
  InformationData[
   Association[
   "ObjectType" -> "Symbol", "Usage" -> 
    "\!\(\*RowBox[{\"StandardAll\", \"[\", RowBox[{StyleBox[\"expr\", \
\"TI\"]}], \"]\"}]\) replaces all dual numbers in \!\(\*StyleBox[\"expr\", \
\"TI\"]\) with their standard parts.", "Documentation" -> None, "OwnValues" -> 
    None, "UpValues" -> None, "DownValues" -> 
    Information`InformationValueForm[
     DownValues, DualNumbers`StandardAll, {DualNumbers`StandardAll[
         Pattern[DualNumbers`Private`expr, 
          Blank[]]] :> 
       ReplaceRepeated[DualNumbers`Private`expr, DualNumbers`Dual[
           Pattern[DualNumbers`Private`a, 
            Blank[]], 
           Blank[]] :> DualNumbers`Private`a]}], "SubValues" -> None, 
    "DefaultValues" -> 
    Information`InformationValueForm[
     DefaultValues, DualNumbers`StandardAll, {
      SyntaxInformation[DualNumbers`StandardAll] -> {"ArgumentsPattern" -> {
           Blank[]}}}], "NValues" -> None, "FormatValues" -> None, "Options" -> 
    None, "Attributes" -> {}, "FullName" -> "DualNumbers`StandardAll"], 
   False]]], "Output",
 CellLabel->"Out[8]=",ExpressionUUID->"7da75bb3-6065-4c4d-933a-0fbd55cf83fc"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Dual arrays", \
"Subsubsection",ExpressionUUID->"45f2c2cf-8457-4f1e-aa43-f5e4fcfbe25a"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"?", "PackDualArray"}], "\[IndentingNewLine]", 
 RowBox[{"?", "UnpackDualArray"}], "\[IndentingNewLine]", 
 RowBox[{"?", "DualLinearSolveFunction"}]}], "Input",
 CellLabel->"In[34]:=",ExpressionUUID->"e0254399-fb4a-4ce7-aa39-18c29b5b34fa"],

Cell[BoxData[
 InterpretationBox[
  StyleBox[
   FrameBox[
    DynamicModuleBox[{System`InformationDump`open$$ = False, 
     System`InformationDump`mouseOver$$ = False}, 
     PaneSelectorBox[{True->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False,
             BaseStyle -> None],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"\\!\\(\\*RowBox[{\\\"PackDualArray\\\", \\\"[\\\", \
RowBox[{StyleBox[\\\"array\\\", \\\"TI\\\"]}], \\\"]\\\"}]\\) converts an \
array of numbers (possibly duals) to the form \
Dual[\\!\\(\\*StyleBox[\\\"std\\\", \\\"TI\\\"]\\), \
\\!\\(\\*StyleBox[\\\"nonstd\\\", \\\"TI\\\"]\\)].\"\>", 
             "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          PaneBox[GridBox[{
             {
              
              DynamicModuleBox[{System`InformationDump`open$$ = {
               False, False, False, False, False, False, False, False, False, 
                False, False, False}}, 
               StyleBox[GridBox[{
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Definitions\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Definitions\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Definitions", "Tooltip"]& ], GridBox[{
                    {
                    RowBox[{
                    RowBox[{"PackDualArray", "[", 
                    RowBox[{
                    "DualNumbers`Private`array_", "?", "UnpackedDualArrayQ"}],
                     "]"}], ":=", 
                    RowBox[{"With", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"DualNumbers`Private`depth", "=", 
                    RowBox[{
                    "ArrayDepth", "[", "DualNumbers`Private`array", "]"}]}], 
                    "}"}], ",", 
                    RowBox[{"Dual", "[", 
                    RowBox[{
                    RowBox[{"ToPackedArray", "[", 
                    RowBox[{
                    "DualNumbers`Private`array", "\[LeftDoubleBracket]", 
                    RowBox[{
                    RowBox[{"Sequence", "@@", 
                    RowBox[{"ConstantArray", "[", 
                    RowBox[{"All", ",", "DualNumbers`Private`depth"}], 
                    "]"}]}], ",", "1"}], "\[RightDoubleBracket]"}], "]"}], 
                    ",", 
                    RowBox[{"ToPackedArray", "[", 
                    RowBox[{
                    "DualNumbers`Private`array", "\[LeftDoubleBracket]", 
                    RowBox[{
                    RowBox[{"Sequence", "@@", 
                    RowBox[{"ConstantArray", "[", 
                    RowBox[{"All", ",", "DualNumbers`Private`depth"}], 
                    "]"}]}], ",", "2"}], "\[RightDoubleBracket]"}], "]"}]}], 
                    "]"}]}], "]"}]}]},
                    {
                    RowBox[{
                    RowBox[{"PackDualArray", "[", 
                    RowBox[{"DualNumbers`Private`array_", "?", "ArrayQ"}], 
                    "]"}], ":=", 
                    RowBox[{"Dual", "[", 
                    RowBox[{
                    RowBox[{"ToPackedArray", "[", 
                    RowBox[{
                    "Standard", "[", "DualNumbers`Private`array", "]"}], 
                    "]"}], ",", 
                    RowBox[{"ToPackedArray", "[", 
                    RowBox[{
                    "NonStandard", "[", "DualNumbers`Private`array", "]"}], 
                    "]"}]}], "]"}]}]},
                    {
                    RowBox[{
                    RowBox[{"PackDualArray", "[", 
                    RowBox[{"Dual", "[", 
                    RowBox[{
                    "DualNumbers`Private`a_", ",", "DualNumbers`Private`b_"}],
                     "]"}], "]"}], ":=", 
                    RowBox[{"Dual", "[", 
                    RowBox[{
                    RowBox[{
                    "ToPackedArray", "[", "DualNumbers`Private`a", "]"}], ",", 
                    RowBox[{
                    "ToPackedArray", "[", "DualNumbers`Private`b", "]"}]}], 
                    "]"}]}]},
                    {
                    RowBox[{
                    RowBox[{
                    "PackDualArray", "[", "DualNumbers`Private`other_", "]"}],
                     ":=", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Message", "[", 
                    RowBox[{
                    StyleBox[
                    RowBox[{"PackDualArray", "::", "arrayQ"}], "MessageName"],
                     ",", 
                    RowBox[{
                    "Short", "[", "DualNumbers`Private`other", "]"}]}], "]"}],
                     ";", "DualNumbers`Private`other"}], ")"}]}]}
                    },
                    DefaultBaseStyle->"Column",
                    GridBoxAlignment->{"Columns" -> {{Left}}},
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]},
                  {
                   TagBox[
                    TooltipBox[
                    
                    StyleBox["\<\" Default Definitions\"\>", 
                    "InformationRowLabel",
                    StripOnInput->False],
                    "\"DefaultValues\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "DefaultValues", "Tooltip"]& ], 
                   InterpretationBox[GridBox[{
                    {
                    RowBox[{
                    RowBox[{"SyntaxInformation", "[", "PackDualArray", "]"}], 
                    "=", 
                    RowBox[{"{", 
                    RowBox[{"\<\"ArgumentsPattern\"\>", "\[Rule]", 
                    RowBox[{"{", "_", "}"}]}], "}"}]}]}
                    },
                    BaselinePosition->{Baseline, {1, 1}},
                    
                    GridBoxAlignment->{
                    "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}],
                    
                    ColumnForm[{
                    SyntaxInformation[DualNumbers`PackDualArray] = {
                    "ArgumentsPattern" -> {
                    Blank[]}}}],
                    Editable->False]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Full Name\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"FullName\"",
                    TooltipStyle->"TextStyling"],
                    
                    Annotation[#, "FullName", 
                    "Tooltip"]& ], "\<\"DualNumbers`PackDualArray\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {Right, Left}},
                 GridBoxDividers->None,
                 GridBoxItemSize->{"Columns" -> {Automatic, Automatic}},
                 GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.5599999999999999]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}], "DialogStyle",
                StripOnInput->False],
               DynamicModuleValues:>{}]}
            },
            DefaultBaseStyle->"Column",
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.5599999999999999]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[3.6]}, 
                Offset[0.2]}}],
           FrameMargins->6], ""},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpener"]], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpenerHot"]]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, False],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"], False->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"\\!\\(\\*RowBox[{\\\"PackDualArray\\\", \\\"[\\\", \
RowBox[{StyleBox[\\\"array\\\", \\\"TI\\\"]}], \\\"]\\\"}]\\) converts an \
array of numbers (possibly duals) to the form \
Dual[\\!\\(\\*StyleBox[\\\"std\\\", \\\"TI\\\"]\\), \
\\!\\(\\*StyleBox[\\\"nonstd\\\", \\\"TI\\\"]\\)].\"\>", 
             "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"],
               ImageSizeCache->{12., {3., 9.}}], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpenerHot"],
               ImageSizeCache->{12., {3., 9.}}]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, True],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}, Dynamic[System`InformationDump`open$$],
      BaselinePosition->Baseline,
      FrameMargins->0,
      ImageSize->Automatic],
     DynamicModuleValues:>{}],
    BaseStyle->"InformationGridFrame",
    StripOnInput->False], "InformationGridPlain",
   StripOnInput->False],
  InformationData[
   Association[
   "ObjectType" -> "Symbol", "Usage" -> 
    "\!\(\*RowBox[{\"PackDualArray\", \"[\", RowBox[{StyleBox[\"array\", \"TI\
\"]}], \"]\"}]\) converts an array of numbers (possibly duals) to the form \
Dual[\!\(\*StyleBox[\"std\", \"TI\"]\), \!\(\*StyleBox[\"nonstd\", \
\"TI\"]\)].", "Documentation" -> None, "OwnValues" -> None, "UpValues" -> 
    None, "DownValues" -> 
    Information`InformationValueForm[
     DownValues, DualNumbers`PackDualArray, {DualNumbers`PackDualArray[
         PatternTest[
          Pattern[DualNumbers`Private`array, 
           Blank[]], DualNumbers`UnpackedDualArrayQ]] :> 
       With[{DualNumbers`Private`depth = 
          ArrayDepth[DualNumbers`Private`array]}, 
         DualNumbers`Dual[
          Developer`ToPackedArray[
           Part[DualNumbers`Private`array, 
            Apply[Sequence, 
             ConstantArray[All, DualNumbers`Private`depth]], 1]], 
          Developer`ToPackedArray[
           Part[DualNumbers`Private`array, 
            Apply[Sequence, 
             ConstantArray[All, DualNumbers`Private`depth]], 2]]]], 
       DualNumbers`PackDualArray[
         PatternTest[
          Pattern[DualNumbers`Private`array, 
           Blank[]], ArrayQ]] :> DualNumbers`Dual[
         Developer`ToPackedArray[
          DualNumbers`Standard[DualNumbers`Private`array]], 
         Developer`ToPackedArray[
          DualNumbers`NonStandard[DualNumbers`Private`array]]], 
       DualNumbers`PackDualArray[
         DualNumbers`Dual[
          Pattern[DualNumbers`Private`a, 
           Blank[]], 
          Pattern[DualNumbers`Private`b, 
           Blank[]]]] :> DualNumbers`Dual[
         Developer`ToPackedArray[DualNumbers`Private`a], 
         Developer`ToPackedArray[DualNumbers`Private`b]], 
       DualNumbers`PackDualArray[
         Pattern[DualNumbers`Private`other, 
          Blank[]]] :> (Message[
          MessageName[DualNumbers`PackDualArray, "arrayQ"], 
          Short[DualNumbers`Private`other]]; DualNumbers`Private`other)}], 
    "SubValues" -> None, "DefaultValues" -> 
    Information`InformationValueForm[
     DefaultValues, DualNumbers`PackDualArray, {
      SyntaxInformation[DualNumbers`PackDualArray] -> {"ArgumentsPattern" -> {
           Blank[]}}}], "NValues" -> None, "FormatValues" -> None, "Options" -> 
    None, "Attributes" -> {}, "FullName" -> "DualNumbers`PackDualArray"], 
   False]]], "Output",
 CellLabel->"Out[34]=",ExpressionUUID->"0ee02c42-be43-45b4-b40c-9748990045eb"],

Cell[BoxData[
 InterpretationBox[
  StyleBox[
   FrameBox[
    DynamicModuleBox[{System`InformationDump`open$$ = False, 
     System`InformationDump`mouseOver$$ = False}, 
     PaneSelectorBox[{True->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False,
             BaseStyle -> None],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"\\!\\(\\*RowBox[{\\\"UnpackDualArray\\\", \
\\\"[\\\", RowBox[{StyleBox[\\\"dualArray\\\", \\\"TI\\\"]}], \\\"]\\\"}]\\) \
reverses to operation of PackDualArray and creates an array of dual \
scalars.\\nProduces a message if packing messages have been turned on with \
On[\\\"Packing\\\"].\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          PaneBox[GridBox[{
             {
              
              DynamicModuleBox[{System`InformationDump`open$$ = {
               False, False, False, False, False, False, False, False, False, 
                False, False, False}}, 
               StyleBox[GridBox[{
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Definitions\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Definitions\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Definitions", "Tooltip"]& ], GridBox[{
                    {
                    RowBox[{
                    RowBox[{"UnpackDualArray", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"Dual", "[", 
                    RowBox[{
                    "DualNumbers`Private`a_", ",", "DualNumbers`Private`b_"}],
                     "]"}], ")"}], "?", "DualArrayQ"}], "]"}], ":=", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    "DualNumbers`Private`packingMessagesEnabledQ", "[", "]"}],
                     ",", 
                    RowBox[{"Quiet", "[", 
                    RowBox[{
                    RowBox[{"Message", "[", 
                    RowBox[{
                    StyleBox[
                    RowBox[{"UnpackDualArray", "::", "unpack"}], 
                    "MessageName"], ",", 
                    RowBox[{
                    "Dimensions", "[", "DualNumbers`Private`a", "]"}]}], 
                    "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    StyleBox[
                    RowBox[{"FromPackedArray", "::", "unpack"}], 
                    "MessageName"], ",", 
                    StyleBox[
                    RowBox[{"FromPackedArray", "::", "punpack1"}], 
                    "MessageName"]}], "}"}]}], "]"}]}], "]"}], ";", 
                    RowBox[{"MapThread", "[", 
                    RowBox[{"Dual", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    "DualNumbers`Private`a", ",", "DualNumbers`Private`b"}], 
                    "}"}], ",", 
                    RowBox[{
                    "ArrayDepth", "[", "DualNumbers`Private`a", "]"}]}], 
                    "]"}]}], ")"}]}]},
                    {
                    RowBox[{
                    RowBox[{"UnpackDualArray", "[", 
                    RowBox[{
                    "DualNumbers`Private`d_Dual", "?", "DualScalarQ"}], "]"}],
                     ":=", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Message", "[", 
                    RowBox[{
                    StyleBox[
                    RowBox[{"UnpackDualArray", "::", "notArray"}], 
                    "MessageName"], ",", 
                    RowBox[{"Short", "[", "DualNumbers`Private`d", "]"}]}], 
                    "]"}], ";", "DualNumbers`Private`d"}], ")"}]}]},
                    {
                    RowBox[{
                    RowBox[{
                    "UnpackDualArray", "[", "DualNumbers`Private`other_", 
                    "]"}], ":=", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Message", "[", 
                    RowBox[{
                    StyleBox[
                    RowBox[{"UnpackDualArray", "::", "badarray"}], 
                    "MessageName"], ",", 
                    RowBox[{
                    "Short", "[", "DualNumbers`Private`other", "]"}]}], "]"}],
                     ";", "DualNumbers`Private`other"}], ")"}]}]}
                    },
                    DefaultBaseStyle->"Column",
                    GridBoxAlignment->{"Columns" -> {{Left}}},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]},
                  {
                   TagBox[
                    TooltipBox[
                    
                    StyleBox["\<\" Default Definitions\"\>", 
                    "InformationRowLabel",
                    StripOnInput->False],
                    "\"DefaultValues\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "DefaultValues", "Tooltip"]& ], 
                   InterpretationBox[GridBox[{
                    {
                    RowBox[{
                    RowBox[{
                    "SyntaxInformation", "[", "UnpackDualArray", "]"}], "=", 
                    RowBox[{"{", 
                    RowBox[{"\<\"ArgumentsPattern\"\>", "\[Rule]", 
                    RowBox[{"{", "_", "}"}]}], "}"}]}]}
                    },
                    BaselinePosition->{Baseline, {1, 1}},
                    
                    GridBoxAlignment->{
                    "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}],
                    
                    ColumnForm[{
                    SyntaxInformation[DualNumbers`UnpackDualArray] = {
                    "ArgumentsPattern" -> {
                    Blank[]}}}],
                    Editable->False]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Full Name\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"FullName\"",
                    TooltipStyle->"TextStyling"],
                    
                    Annotation[#, "FullName", 
                    "Tooltip"]& ], "\<\"DualNumbers`UnpackDualArray\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {Right, Left}},
                 GridBoxDividers->None,
                 GridBoxItemSize->{"Columns" -> {Automatic, Automatic}},
                 GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.5599999999999999]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}], "DialogStyle",
                StripOnInput->False],
               DynamicModuleValues:>{}]}
            },
            DefaultBaseStyle->"Column",
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.5599999999999999]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[3.6]}, 
                Offset[0.2]}}],
           FrameMargins->6], ""},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpener"]], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpenerHot"]]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, False],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"], False->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"\\!\\(\\*RowBox[{\\\"UnpackDualArray\\\", \
\\\"[\\\", RowBox[{StyleBox[\\\"dualArray\\\", \\\"TI\\\"]}], \\\"]\\\"}]\\) \
reverses to operation of PackDualArray and creates an array of dual \
scalars.\\nProduces a message if packing messages have been turned on with \
On[\\\"Packing\\\"].\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"],
               ImageSizeCache->{12., {3., 9.}}], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpenerHot"],
               ImageSizeCache->{12., {3., 9.}}]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, True],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}, Dynamic[System`InformationDump`open$$],
      BaselinePosition->Baseline,
      FrameMargins->0,
      ImageSize->Automatic],
     DynamicModuleValues:>{}],
    BaseStyle->"InformationGridFrame",
    StripOnInput->False], "InformationGridPlain",
   StripOnInput->False],
  InformationData[
   Association[
   "ObjectType" -> "Symbol", "Usage" -> 
    "\!\(\*RowBox[{\"UnpackDualArray\", \"[\", \
RowBox[{StyleBox[\"dualArray\", \"TI\"]}], \"]\"}]\) reverses to operation of \
PackDualArray and creates an array of dual scalars.\nProduces a message if \
packing messages have been turned on with On[\"Packing\"].", "Documentation" -> 
    None, "OwnValues" -> None, "UpValues" -> None, "DownValues" -> 
    Information`InformationValueForm[
     DownValues, DualNumbers`UnpackDualArray, {DualNumbers`UnpackDualArray[
         PatternTest[
          DualNumbers`Dual[
           Pattern[DualNumbers`Private`a, 
            Blank[]], 
           Pattern[DualNumbers`Private`b, 
            Blank[]]], DualNumbers`DualArrayQ]] :> (If[
          DualNumbers`Private`packingMessagesEnabledQ[], 
          Quiet[
           Message[
            MessageName[DualNumbers`UnpackDualArray, "unpack"], 
            Dimensions[DualNumbers`Private`a]], {
            MessageName[Developer`FromPackedArray, "unpack"], 
            MessageName[Developer`FromPackedArray, "punpack1"]}]]; 
        MapThread[
         DualNumbers`Dual, {DualNumbers`Private`a, DualNumbers`Private`b}, 
          ArrayDepth[DualNumbers`Private`a]]), DualNumbers`UnpackDualArray[
         PatternTest[
          Pattern[DualNumbers`Private`d, 
           Blank[DualNumbers`Dual]], DualNumbers`DualScalarQ]] :> (Message[
          MessageName[DualNumbers`UnpackDualArray, "notArray"], 
          Short[DualNumbers`Private`d]]; DualNumbers`Private`d), 
       DualNumbers`UnpackDualArray[
         Pattern[DualNumbers`Private`other, 
          Blank[]]] :> (Message[
          MessageName[DualNumbers`UnpackDualArray, "badarray"], 
          Short[DualNumbers`Private`other]]; DualNumbers`Private`other)}], 
    "SubValues" -> None, "DefaultValues" -> 
    Information`InformationValueForm[
     DefaultValues, DualNumbers`UnpackDualArray, {
      SyntaxInformation[DualNumbers`UnpackDualArray] -> {"ArgumentsPattern" -> {
           Blank[]}}}], "NValues" -> None, "FormatValues" -> None, "Options" -> 
    None, "Attributes" -> {}, "FullName" -> "DualNumbers`UnpackDualArray"], 
   False]]], "Output",
 CellLabel->"Out[35]=",ExpressionUUID->"1e20e9fc-5f60-4d93-bddd-bd535dcef8df"],

Cell[BoxData[
 InterpretationBox[
  StyleBox[
   FrameBox[
    DynamicModuleBox[{System`InformationDump`open$$ = False, 
     System`InformationDump`mouseOver$$ = False}, 
     PaneSelectorBox[{True->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False,
             BaseStyle -> None],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"\\!\\(\\*RowBox[{\\\"DualLinearSolveFunction\\\", \
\\\"[\\\", RowBox[{StyleBox[\\\"ls\\\", \\\"TI\\\"], \\\",\\\",  \
StyleBox[\\\"b\\\", \\\"TI\\\"]}], \\\"]\\\"}]\\) is produced from \
LinearSolve[Dual[\\!\\(\\*StyleBox[\\\"a\\\", \\\"TI\\\"]\\), \
\\!\\(\\*StyleBox[\\\"b\\\", \\\"TI\\\"]\\)]]. A DualLinearSolveFunction can \
be applied to Dual arrays.\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          PaneBox[GridBox[{
             {
              
              DynamicModuleBox[{System`InformationDump`open$$ = {
               False, False, False, False, False, False, False, False, False, 
                False, False, False}}, 
               StyleBox[GridBox[{
                  {
                   TagBox[
                    TooltipBox[
                    
                    StyleBox["\<\" SubValue Definitions\"\>", 
                    "InformationRowLabel",
                    StripOnInput->False],
                    "\"SubValues\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "SubValues", "Tooltip"]& ], GridBox[{
                    {
                    RowBox[{
                    RowBox[{
                    RowBox[{"DualLinearSolveFunction", "[", 
                    RowBox[{"DualNumbers`Private`ls_LinearSolveFunction", ",", 
                    RowBox[{
                    "DualNumbers`Private`b_", "?", "SquareMatrixQ"}]}], "]"}],
                     "[", 
                    RowBox[{"DualNumbers`Private`m_", "?", "ArrayQ"}], "]"}], 
                    ":=", 
                    RowBox[{"With", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"DualNumbers`Private`inv", "=", 
                    RowBox[{
                    "DualNumbers`Private`ls", "[", "DualNumbers`Private`m", 
                    "]"}]}], "}"}], ",", 
                    RowBox[{
                    RowBox[{"Dual", "[", 
                    RowBox[{"DualNumbers`Private`inv", ",", 
                    RowBox[{"-", 
                    RowBox[{"DualNumbers`Private`ls", "[", 
                    RowBox[{
                    "DualNumbers`Private`b", ".", "DualNumbers`Private`inv"}],
                     "]"}]}]}], "]"}], "/;", 
                    RowBox[{
                    "ArrayQ", "[", "DualNumbers`Private`inv", "]"}]}]}], 
                    "]"}]}]},
                    {
                    RowBox[{
                    RowBox[{
                    RowBox[{"DualLinearSolveFunction", "[", 
                    RowBox[{"DualNumbers`Private`ls_LinearSolveFunction", ",", 
                    RowBox[{
                    "DualNumbers`Private`b_", "?", "SquareMatrixQ"}]}], "]"}],
                     "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"Dual", "[", 
                    RowBox[{
                    RowBox[{"DualNumbers`Private`a2_", "?", "ArrayQ"}], ",", 
                    RowBox[{"DualNumbers`Private`b2_", "?", "ArrayQ"}]}], 
                    "]"}], ")"}], "?", "DualArrayQ"}], "]"}], ":=", 
                    RowBox[{"With", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"DualNumbers`Private`inv", "=", 
                    RowBox[{
                    "DualNumbers`Private`ls", "[", "DualNumbers`Private`a2", 
                    "]"}]}], "}"}], ",", 
                    RowBox[{
                    RowBox[{"Dual", "[", 
                    RowBox[{"DualNumbers`Private`inv", ",", 
                    RowBox[{
                    RowBox[{"-", 
                    RowBox[{"DualNumbers`Private`ls", "[", 
                    RowBox[{
                    "DualNumbers`Private`b", ".", "DualNumbers`Private`inv"}],
                     "]"}]}], "+", 
                    RowBox[{
                    "DualNumbers`Private`ls", "[", "DualNumbers`Private`b2", 
                    "]"}]}]}], "]"}], "/;", 
                    RowBox[{
                    "ArrayQ", "[", "DualNumbers`Private`inv", "]"}]}]}], 
                    "]"}]}]}
                    },
                    DefaultBaseStyle->"Column",
                    GridBoxAlignment->{"Columns" -> {{Left}}},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]},
                  {
                   TagBox[
                    TooltipBox[
                    
                    StyleBox["\<\" Default Definitions\"\>", 
                    "InformationRowLabel",
                    StripOnInput->False],
                    "\"DefaultValues\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "DefaultValues", "Tooltip"]& ], 
                   InterpretationBox[GridBox[{
                    {
                    RowBox[{
                    RowBox[{
                    "SyntaxInformation", "[", "DualLinearSolveFunction", 
                    "]"}], "=", 
                    RowBox[{"{", 
                    RowBox[{"\<\"ArgumentsPattern\"\>", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"_", ",", "_"}], "}"}]}], "}"}]}]}
                    },
                    BaselinePosition->{Baseline, {1, 1}},
                    
                    GridBoxAlignment->{
                    "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}],
                    ColumnForm[{
                    SyntaxInformation[DualNumbers`DualLinearSolveFunction] = {
                    "ArgumentsPattern" -> {
                    Blank[], 
                    Blank[]}}}],
                    Editable->False]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Full Name\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"FullName\"",
                    TooltipStyle->"TextStyling"],
                    
                    Annotation[#, "FullName", 
                    "Tooltip"]& ], "\<\"DualNumbers`DualLinearSolveFunction\"\
\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {Right, Left}},
                 GridBoxDividers->None,
                 GridBoxItemSize->{"Columns" -> {Automatic, Automatic}},
                 GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.5599999999999999]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}], "DialogStyle",
                StripOnInput->False],
               DynamicModuleValues:>{}]}
            },
            DefaultBaseStyle->"Column",
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.5599999999999999]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[3.6]}, 
                Offset[0.2]}}],
           FrameMargins->6], ""},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpener"]], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpenerHot"]]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, False],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"], False->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"\\!\\(\\*RowBox[{\\\"DualLinearSolveFunction\\\", \
\\\"[\\\", RowBox[{StyleBox[\\\"ls\\\", \\\"TI\\\"], \\\",\\\",  \
StyleBox[\\\"b\\\", \\\"TI\\\"]}], \\\"]\\\"}]\\) is produced from \
LinearSolve[Dual[\\!\\(\\*StyleBox[\\\"a\\\", \\\"TI\\\"]\\), \
\\!\\(\\*StyleBox[\\\"b\\\", \\\"TI\\\"]\\)]]. A DualLinearSolveFunction can \
be applied to Dual arrays.\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"],
               ImageSizeCache->{12., {3., 9.}}], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpenerHot"],
               ImageSizeCache->{12., {3., 9.}}]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, True],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}, Dynamic[System`InformationDump`open$$],
      BaselinePosition->Baseline,
      FrameMargins->0,
      ImageSize->Automatic],
     DynamicModuleValues:>{}],
    BaseStyle->"InformationGridFrame",
    StripOnInput->False], "InformationGridPlain",
   StripOnInput->False],
  InformationData[
   Association[
   "ObjectType" -> "Symbol", "Usage" -> 
    "\!\(\*RowBox[{\"DualLinearSolveFunction\", \"[\", \
RowBox[{StyleBox[\"ls\", \"TI\"], \",\",  StyleBox[\"b\", \"TI\"]}], \
\"]\"}]\) is produced from LinearSolve[Dual[\!\(\*StyleBox[\"a\", \"TI\"]\), \
\!\(\*StyleBox[\"b\", \"TI\"]\)]]. A DualLinearSolveFunction can be applied \
to Dual arrays.", "Documentation" -> None, "OwnValues" -> None, "UpValues" -> 
    None, "DownValues" -> None, "SubValues" -> 
    Information`InformationValueForm[
     SubValues, DualNumbers`DualLinearSolveFunction, {
      DualNumbers`DualLinearSolveFunction[
         Pattern[DualNumbers`Private`ls, 
          Blank[LinearSolveFunction]], 
         PatternTest[
          Pattern[DualNumbers`Private`b, 
           Blank[]], SquareMatrixQ]][
         PatternTest[
          Pattern[DualNumbers`Private`m, 
           Blank[]], ArrayQ]] :> 
       With[{DualNumbers`Private`inv = 
          DualNumbers`Private`ls[DualNumbers`Private`m]}, 
         Condition[
          DualNumbers`Dual[DualNumbers`Private`inv, -DualNumbers`Private`ls[
             Dot[DualNumbers`Private`b, DualNumbers`Private`inv]]], 
          ArrayQ[DualNumbers`Private`inv]]], 
       DualNumbers`DualLinearSolveFunction[
         Pattern[DualNumbers`Private`ls, 
          Blank[LinearSolveFunction]], 
         PatternTest[
          Pattern[DualNumbers`Private`b, 
           Blank[]], SquareMatrixQ]][
         PatternTest[
          DualNumbers`Dual[
           PatternTest[
            Pattern[DualNumbers`Private`a2, 
             Blank[]], ArrayQ], 
           PatternTest[
            Pattern[DualNumbers`Private`b2, 
             Blank[]], ArrayQ]], DualNumbers`DualArrayQ]] :> 
       With[{DualNumbers`Private`inv = 
          DualNumbers`Private`ls[DualNumbers`Private`a2]}, 
         Condition[
          DualNumbers`Dual[DualNumbers`Private`inv, -DualNumbers`Private`ls[
              Dot[DualNumbers`Private`b, DualNumbers`Private`inv]] + 
           DualNumbers`Private`ls[DualNumbers`Private`b2]], 
          ArrayQ[DualNumbers`Private`inv]]]}], "DefaultValues" -> 
    Information`InformationValueForm[
     DefaultValues, DualNumbers`DualLinearSolveFunction, {
      SyntaxInformation[DualNumbers`DualLinearSolveFunction] -> {
        "ArgumentsPattern" -> {
           Blank[], 
           Blank[]}}}], "NValues" -> None, "FormatValues" -> None, "Options" -> 
    None, "Attributes" -> {}, "FullName" -> 
    "DualNumbers`DualLinearSolveFunction"], False]]], "Output",
 CellLabel->"Out[36]=",ExpressionUUID->"5b55c2cd-76eb-461e-ae26-b2f0d2e9bcef"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Testing for data type", \
"Subsubsection",ExpressionUUID->"7bb15119-6233-4e43-b9de-de64427c2cf1"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"?", "DualQ"}], "\[IndentingNewLine]", 
 RowBox[{"?", "StandardQ"}], "\[IndentingNewLine]", 
 RowBox[{"?", "DualScalarQ"}], "\[IndentingNewLine]", 
 RowBox[{"?", "DualArrayQ"}], "\[IndentingNewLine]", 
 RowBox[{"?", "UnpackDualArray"}], "\[IndentingNewLine]", 
 RowBox[{"?", "DualFreeArrayQ"}]}], "Input",
 CellLabel->"In[37]:=",ExpressionUUID->"7b7ceb43-1b98-499d-94b8-8cd08dc5d15a"],

Cell[BoxData[
 InterpretationBox[
  StyleBox[
   FrameBox[
    DynamicModuleBox[{System`InformationDump`open$$ = False, 
     System`InformationDump`mouseOver$$ = False}, 
     PaneSelectorBox[{True->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False,
             BaseStyle -> None],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"\\!\\(\\*RowBox[{\\\"DualQ\\\", \\\"[\\\", \
RowBox[{StyleBox[\\\"expr\\\", \\\"TI\\\"]}], \\\"]\\\"}]\\) tests if \
\\!\\(\\*StyleBox[\\\"expr\\\", \\\"TI\\\"]\\) is a dual number.\"\>", 
             "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          PaneBox[GridBox[{
             {
              
              DynamicModuleBox[{System`InformationDump`open$$ = {
               False, False, False, False, False, False, False, False, False, 
                False, False, False}}, 
               StyleBox[GridBox[{
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Definitions\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Definitions\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Definitions", "Tooltip"]& ], GridBox[{
                    {
                    RowBox[{
                    RowBox[{"DualQ", "[", 
                    RowBox[{"DualNumbers`Private`expr", ":", 
                    RowBox[{"Dual", "[", 
                    RowBox[{"_", ",", "_"}], "]"}]}], "]"}], ":=", 
                    RowBox[{
                    RowBox[{
                    "DualScalarQ", "[", "DualNumbers`Private`expr", "]"}], "||", 
                    RowBox[{
                    "DualArrayQ", "[", "DualNumbers`Private`expr", "]"}]}]}]},
                    {
                    RowBox[{
                    RowBox[{"DualQ", "[", "_", "]"}], ":=", "False"}]}
                    },
                    DefaultBaseStyle->"Column",
                    GridBoxAlignment->{"Columns" -> {{Left}}},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]},
                  {
                   TagBox[
                    TooltipBox[
                    
                    StyleBox["\<\" Default Definitions\"\>", 
                    "InformationRowLabel",
                    StripOnInput->False],
                    "\"DefaultValues\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "DefaultValues", "Tooltip"]& ], 
                   InterpretationBox[GridBox[{
                    {
                    RowBox[{
                    RowBox[{"SyntaxInformation", "[", "DualQ", "]"}], "=", 
                    RowBox[{"{", 
                    RowBox[{"\<\"ArgumentsPattern\"\>", "\[Rule]", 
                    RowBox[{"{", "_", "}"}]}], "}"}]}]}
                    },
                    BaselinePosition->{Baseline, {1, 1}},
                    
                    GridBoxAlignment->{
                    "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}],
                    
                    ColumnForm[{
                    SyntaxInformation[DualNumbers`DualQ] = {
                    "ArgumentsPattern" -> {
                    Blank[]}}}],
                    Editable->False]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Full Name\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"FullName\"",
                    TooltipStyle->"TextStyling"],
                    
                    Annotation[#, "FullName", 
                    "Tooltip"]& ], "\<\"DualNumbers`DualQ\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {Right, Left}},
                 GridBoxDividers->None,
                 GridBoxItemSize->{"Columns" -> {Automatic, Automatic}},
                 GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.5599999999999999]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}], "DialogStyle",
                StripOnInput->False],
               DynamicModuleValues:>{}]}
            },
            DefaultBaseStyle->"Column",
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.5599999999999999]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[3.6]}, 
                Offset[0.2]}}],
           FrameMargins->6], ""},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpener"]], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpenerHot"]]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, False],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"], False->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"\\!\\(\\*RowBox[{\\\"DualQ\\\", \\\"[\\\", \
RowBox[{StyleBox[\\\"expr\\\", \\\"TI\\\"]}], \\\"]\\\"}]\\) tests if \
\\!\\(\\*StyleBox[\\\"expr\\\", \\\"TI\\\"]\\) is a dual number.\"\>", 
             "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"],
               ImageSizeCache->{12., {3., 9.}}], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpenerHot"],
               ImageSizeCache->{12., {3., 9.}}]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, True],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}, Dynamic[System`InformationDump`open$$],
      BaselinePosition->Baseline,
      FrameMargins->0,
      ImageSize->Automatic],
     DynamicModuleValues:>{}],
    BaseStyle->"InformationGridFrame",
    StripOnInput->False], "InformationGridPlain",
   StripOnInput->False],
  InformationData[
   Association[
   "ObjectType" -> "Symbol", "Usage" -> 
    "\!\(\*RowBox[{\"DualQ\", \"[\", RowBox[{StyleBox[\"expr\", \"TI\"]}], \
\"]\"}]\) tests if \!\(\*StyleBox[\"expr\", \"TI\"]\) is a dual number.", 
    "Documentation" -> None, "OwnValues" -> None, "UpValues" -> None, 
    "DownValues" -> 
    Information`InformationValueForm[
     DownValues, DualNumbers`DualQ, {DualNumbers`DualQ[
         Pattern[DualNumbers`Private`expr, 
          DualNumbers`Dual[
           Blank[], 
           Blank[]]]] :> Or[
         DualNumbers`DualScalarQ[DualNumbers`Private`expr], 
         DualNumbers`DualArrayQ[DualNumbers`Private`expr]], DualNumbers`DualQ[
         Blank[]] :> False}], "SubValues" -> None, "DefaultValues" -> 
    Information`InformationValueForm[
     DefaultValues, DualNumbers`DualQ, {
      SyntaxInformation[DualNumbers`DualQ] -> {"ArgumentsPattern" -> {
           Blank[]}}}], "NValues" -> None, "FormatValues" -> None, "Options" -> 
    None, "Attributes" -> {}, "FullName" -> "DualNumbers`DualQ"], 
   False]]], "Output",
 CellLabel->"Out[37]=",ExpressionUUID->"3857449b-131c-46a1-8177-a8cc8dbf26d8"],

Cell[BoxData[
 InterpretationBox[
  StyleBox[
   FrameBox[
    DynamicModuleBox[{System`InformationDump`open$$ = False, 
     System`InformationDump`mouseOver$$ = False}, 
     PaneSelectorBox[{True->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False,
             BaseStyle -> None],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"\\!\\(\\*RowBox[{\\\"StandardQ\\\", \\\"[\\\", \
RowBox[{StyleBox[\\\"expr\\\", \\\"TI\\\"]}], \\\"]\\\"}]\\) tests if \
\\!\\(\\*StyleBox[\\\"expr\\\", \\\"TI\\\"]\\) has a head different from \
Dual.\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          PaneBox[GridBox[{
             {
              
              DynamicModuleBox[{System`InformationDump`open$$ = {
               False, False, False, False, False, False, False, False, False, 
                False, False, False}}, 
               StyleBox[GridBox[{
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Definitions\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Definitions\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Definitions", "Tooltip"]& ], GridBox[{
                    {
                    RowBox[{
                    RowBox[{"StandardQ", "[", "_Dual", "]"}], ":=", "False"}]},
                    {
                    RowBox[{
                    RowBox[{"StandardQ", "[", "_", "]"}], ":=", "True"}]}
                    },
                    DefaultBaseStyle->"Column",
                    GridBoxAlignment->{"Columns" -> {{Left}}},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]},
                  {
                   TagBox[
                    TooltipBox[
                    
                    StyleBox["\<\" Default Definitions\"\>", 
                    "InformationRowLabel",
                    StripOnInput->False],
                    "\"DefaultValues\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "DefaultValues", "Tooltip"]& ], 
                   InterpretationBox[GridBox[{
                    {
                    RowBox[{
                    RowBox[{"SyntaxInformation", "[", "StandardQ", "]"}], "=", 
                    RowBox[{"{", 
                    RowBox[{"\<\"ArgumentsPattern\"\>", "\[Rule]", 
                    RowBox[{"{", "_", "}"}]}], "}"}]}]}
                    },
                    BaselinePosition->{Baseline, {1, 1}},
                    
                    GridBoxAlignment->{
                    "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}],
                    
                    ColumnForm[{
                    SyntaxInformation[DualNumbers`StandardQ] = {
                    "ArgumentsPattern" -> {
                    Blank[]}}}],
                    Editable->False]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Full Name\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"FullName\"",
                    TooltipStyle->"TextStyling"],
                    
                    Annotation[#, "FullName", 
                    "Tooltip"]& ], "\<\"DualNumbers`StandardQ\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {Right, Left}},
                 GridBoxDividers->None,
                 GridBoxItemSize->{"Columns" -> {Automatic, Automatic}},
                 GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.5599999999999999]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}], "DialogStyle",
                StripOnInput->False],
               DynamicModuleValues:>{}]}
            },
            DefaultBaseStyle->"Column",
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.5599999999999999]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[3.6]}, 
                Offset[0.2]}}],
           FrameMargins->6], ""},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpener"]], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpenerHot"]]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, False],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"], False->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"\\!\\(\\*RowBox[{\\\"StandardQ\\\", \\\"[\\\", \
RowBox[{StyleBox[\\\"expr\\\", \\\"TI\\\"]}], \\\"]\\\"}]\\) tests if \
\\!\\(\\*StyleBox[\\\"expr\\\", \\\"TI\\\"]\\) has a head different from \
Dual.\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"],
               ImageSizeCache->{12., {3., 9.}}], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpenerHot"],
               ImageSizeCache->{12., {3., 9.}}]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, True],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}, Dynamic[System`InformationDump`open$$],
      BaselinePosition->Baseline,
      FrameMargins->0,
      ImageSize->Automatic],
     DynamicModuleValues:>{}],
    BaseStyle->"InformationGridFrame",
    StripOnInput->False], "InformationGridPlain",
   StripOnInput->False],
  InformationData[
   Association[
   "ObjectType" -> "Symbol", "Usage" -> 
    "\!\(\*RowBox[{\"StandardQ\", \"[\", RowBox[{StyleBox[\"expr\", \
\"TI\"]}], \"]\"}]\) tests if \!\(\*StyleBox[\"expr\", \"TI\"]\) has a head \
different from Dual.", "Documentation" -> None, "OwnValues" -> None, 
    "UpValues" -> None, "DownValues" -> 
    Information`InformationValueForm[
     DownValues, DualNumbers`StandardQ, {DualNumbers`StandardQ[
         Blank[DualNumbers`Dual]] :> False, DualNumbers`StandardQ[
         Blank[]] :> True}], "SubValues" -> None, "DefaultValues" -> 
    Information`InformationValueForm[
     DefaultValues, DualNumbers`StandardQ, {
      SyntaxInformation[DualNumbers`StandardQ] -> {"ArgumentsPattern" -> {
           Blank[]}}}], "NValues" -> None, "FormatValues" -> None, "Options" -> 
    None, "Attributes" -> {}, "FullName" -> "DualNumbers`StandardQ"], 
   False]]], "Output",
 CellLabel->"Out[38]=",ExpressionUUID->"d57872e9-a387-414c-9c29-b642309121c3"],

Cell[BoxData[
 InterpretationBox[
  StyleBox[
   FrameBox[
    DynamicModuleBox[{System`InformationDump`open$$ = False, 
     System`InformationDump`mouseOver$$ = False}, 
     PaneSelectorBox[{True->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False,
             BaseStyle -> None],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"\\!\\(\\*RowBox[{\\\"DualQ\\\", \\\"[\\\", \
RowBox[{StyleBox[\\\"expr\\\", \\\"TI\\\"]}], \\\"]\\\"}]\\) tests if \
\\!\\(\\*StyleBox[\\\"expr\\\", \\\"TI\\\"]\\) is a dual number but not a \
dual array.\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          PaneBox[GridBox[{
             {
              
              DynamicModuleBox[{System`InformationDump`open$$ = {
               False, False, False, False, False, False, False, False, False, 
                False, False, False}}, 
               StyleBox[GridBox[{
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Definitions\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Definitions\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Definitions", "Tooltip"]& ], GridBox[{
                    {
                    RowBox[{
                    RowBox[{"DualScalarQ", "[", 
                    RowBox[{"Dual", "[", 
                    RowBox[{
                    RowBox[{"Except", "[", 
                    RowBox[{"_", "?", "ArrayQ"}], "]"}], ",", 
                    RowBox[{"Except", "[", 
                    RowBox[{"_", "?", "ArrayQ"}], "]"}]}], "]"}], "]"}], ":=",
                     "True"}]},
                    {
                    RowBox[{
                    RowBox[{"DualScalarQ", "[", "_", "]"}], ":=", "False"}]}
                    },
                    DefaultBaseStyle->"Column",
                    GridBoxAlignment->{"Columns" -> {{Left}}},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Default Definitions\"\>", 
                    "InformationRowLabel",
                    StripOnInput->False],
                    "\"DefaultValues\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "DefaultValues", "Tooltip"]& ], 
                   InterpretationBox[GridBox[{
                    {
                    RowBox[{
                    RowBox[{"SyntaxInformation", "[", "DualScalarQ", "]"}], 
                    "=", 
                    RowBox[{"{", 
                    RowBox[{"\<\"ArgumentsPattern\"\>", "\[Rule]", 
                    RowBox[{"{", "_", "}"}]}], "}"}]}]}
                    },
                    BaselinePosition->{Baseline, {1, 1}},
                    
                    GridBoxAlignment->{
                    "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}],
                    
                    ColumnForm[{
                    SyntaxInformation[DualNumbers`DualScalarQ] = {
                    "ArgumentsPattern" -> {
                    Blank[]}}}],
                    Editable->False]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Full Name\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"FullName\"",
                    TooltipStyle->"TextStyling"],
                    
                    Annotation[#, "FullName", 
                    "Tooltip"]& ], "\<\"DualNumbers`DualScalarQ\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {Right, Left}},
                 GridBoxDividers->None,
                 GridBoxItemSize->{"Columns" -> {Automatic, Automatic}},
                 GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.5599999999999999]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}], "DialogStyle",
                StripOnInput->False],
               DynamicModuleValues:>{}]}
            },
            DefaultBaseStyle->"Column",
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.5599999999999999]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[3.6]}, 
                Offset[0.2]}}],
           FrameMargins->6], ""},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpener"]], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpenerHot"]]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, False],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"], False->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"\\!\\(\\*RowBox[{\\\"DualQ\\\", \\\"[\\\", \
RowBox[{StyleBox[\\\"expr\\\", \\\"TI\\\"]}], \\\"]\\\"}]\\) tests if \
\\!\\(\\*StyleBox[\\\"expr\\\", \\\"TI\\\"]\\) is a dual number but not a \
dual array.\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"],
               ImageSizeCache->{12., {3., 9.}}], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpenerHot"],
               ImageSizeCache->{12., {3., 9.}}]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, True],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}, Dynamic[System`InformationDump`open$$],
      BaselinePosition->Baseline,
      FrameMargins->0,
      ImageSize->Automatic],
     DynamicModuleValues:>{}],
    BaseStyle->"InformationGridFrame",
    StripOnInput->False], "InformationGridPlain",
   StripOnInput->False],
  InformationData[
   Association[
   "ObjectType" -> "Symbol", "Usage" -> 
    "\!\(\*RowBox[{\"DualQ\", \"[\", RowBox[{StyleBox[\"expr\", \"TI\"]}], \
\"]\"}]\) tests if \!\(\*StyleBox[\"expr\", \"TI\"]\) is a dual number but \
not a dual array.", "Documentation" -> None, "OwnValues" -> None, "UpValues" -> 
    None, "DownValues" -> 
    Information`InformationValueForm[
     DownValues, DualNumbers`DualScalarQ, {DualNumbers`DualScalarQ[
         DualNumbers`Dual[
          Except[
           PatternTest[
            Blank[], ArrayQ]], 
          Except[
           PatternTest[
            Blank[], ArrayQ]]]] :> True, DualNumbers`DualScalarQ[
         Blank[]] :> False}], "SubValues" -> None, "DefaultValues" -> 
    Information`InformationValueForm[
     DefaultValues, DualNumbers`DualScalarQ, {
      SyntaxInformation[DualNumbers`DualScalarQ] -> {"ArgumentsPattern" -> {
           Blank[]}}}], "NValues" -> None, "FormatValues" -> None, "Options" -> 
    None, "Attributes" -> {}, "FullName" -> "DualNumbers`DualScalarQ"], 
   False]]], "Output",
 CellLabel->"Out[39]=",ExpressionUUID->"ec014a27-5d53-4a35-bdd9-196885da07e1"],

Cell[BoxData[
 InterpretationBox[
  StyleBox[
   FrameBox[
    DynamicModuleBox[{System`InformationDump`open$$ = False, 
     System`InformationDump`mouseOver$$ = False}, 
     PaneSelectorBox[{True->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False,
             BaseStyle -> None],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"\\!\\(\\*RowBox[{\\\"DualArrayQ\\\", \\\"[\\\", \
RowBox[{StyleBox[\\\"expr\\\", \\\"TI\\\"]}], \\\"]\\\"}]\\) tests if \
\\!\\(\\*StyleBox[\\\"expr\\\", \\\"TI\\\"]\\) is a valid packed array of \
dual numbers.\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          PaneBox[GridBox[{
             {
              
              DynamicModuleBox[{System`InformationDump`open$$ = {
               False, False, False, False, False, False, False, False, False, 
                False, False, False}}, 
               StyleBox[GridBox[{
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Definitions\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Definitions\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Definitions", "Tooltip"]& ], GridBox[{
                    {
                    RowBox[{
                    RowBox[{
                    RowBox[{"DualArrayQ", "[", 
                    RowBox[{"Dual", "[", 
                    RowBox[{
                    RowBox[{"DualNumbers`Private`a_", "?", "DualFreeArrayQ"}],
                     ",", 
                    RowBox[{
                    "DualNumbers`Private`b_", "?", "DualFreeArrayQ"}]}], 
                    "]"}], "]"}], "/;", 
                    RowBox[{
                    RowBox[{"Dimensions", "[", "DualNumbers`Private`a", "]"}],
                     "===", 
                    RowBox[{
                    "Dimensions", "[", "DualNumbers`Private`b", "]"}]}]}], ":=",
                     "True"}]},
                    {
                    RowBox[{
                    RowBox[{"DualArrayQ", "[", "_", "]"}], ":=", "False"}]}
                    },
                    DefaultBaseStyle->"Column",
                    GridBoxAlignment->{"Columns" -> {{Left}}},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]},
                  {
                   TagBox[
                    TooltipBox[
                    
                    StyleBox["\<\" Default Definitions\"\>", 
                    "InformationRowLabel",
                    StripOnInput->False],
                    "\"DefaultValues\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "DefaultValues", "Tooltip"]& ], 
                   InterpretationBox[GridBox[{
                    {
                    RowBox[{
                    RowBox[{"SyntaxInformation", "[", "DualArrayQ", "]"}], 
                    "=", 
                    RowBox[{"{", 
                    RowBox[{"\<\"ArgumentsPattern\"\>", "\[Rule]", 
                    RowBox[{"{", "_", "}"}]}], "}"}]}]}
                    },
                    BaselinePosition->{Baseline, {1, 1}},
                    
                    GridBoxAlignment->{
                    "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}],
                    
                    ColumnForm[{
                    SyntaxInformation[DualNumbers`DualArrayQ] = {
                    "ArgumentsPattern" -> {
                    Blank[]}}}],
                    Editable->False]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Full Name\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"FullName\"",
                    TooltipStyle->"TextStyling"],
                    
                    Annotation[#, "FullName", 
                    "Tooltip"]& ], "\<\"DualNumbers`DualArrayQ\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {Right, Left}},
                 GridBoxDividers->None,
                 GridBoxItemSize->{"Columns" -> {Automatic, Automatic}},
                 GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.5599999999999999]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}], "DialogStyle",
                StripOnInput->False],
               DynamicModuleValues:>{}]}
            },
            DefaultBaseStyle->"Column",
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.5599999999999999]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[3.6]}, 
                Offset[0.2]}}],
           FrameMargins->6], ""},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpener"]], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpenerHot"]]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, False],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"], False->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"\\!\\(\\*RowBox[{\\\"DualArrayQ\\\", \\\"[\\\", \
RowBox[{StyleBox[\\\"expr\\\", \\\"TI\\\"]}], \\\"]\\\"}]\\) tests if \
\\!\\(\\*StyleBox[\\\"expr\\\", \\\"TI\\\"]\\) is a valid packed array of \
dual numbers.\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"],
               ImageSizeCache->{12., {3., 9.}}], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpenerHot"],
               ImageSizeCache->{12., {3., 9.}}]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, True],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}, Dynamic[System`InformationDump`open$$],
      BaselinePosition->Baseline,
      FrameMargins->0,
      ImageSize->Automatic],
     DynamicModuleValues:>{}],
    BaseStyle->"InformationGridFrame",
    StripOnInput->False], "InformationGridPlain",
   StripOnInput->False],
  InformationData[
   Association[
   "ObjectType" -> "Symbol", "Usage" -> 
    "\!\(\*RowBox[{\"DualArrayQ\", \"[\", RowBox[{StyleBox[\"expr\", \
\"TI\"]}], \"]\"}]\) tests if \!\(\*StyleBox[\"expr\", \"TI\"]\) is a valid \
packed array of dual numbers.", "Documentation" -> None, "OwnValues" -> None, 
    "UpValues" -> None, "DownValues" -> 
    Information`InformationValueForm[
     DownValues, DualNumbers`DualArrayQ, {Condition[
         DualNumbers`DualArrayQ[
          DualNumbers`Dual[
           PatternTest[
            Pattern[DualNumbers`Private`a, 
             Blank[]], DualNumbers`DualFreeArrayQ], 
           PatternTest[
            Pattern[DualNumbers`Private`b, 
             Blank[]], DualNumbers`DualFreeArrayQ]]], 
         Dimensions[DualNumbers`Private`a] === 
         Dimensions[DualNumbers`Private`b]] :> True, DualNumbers`DualArrayQ[
         Blank[]] :> False}], "SubValues" -> None, "DefaultValues" -> 
    Information`InformationValueForm[
     DefaultValues, DualNumbers`DualArrayQ, {
      SyntaxInformation[DualNumbers`DualArrayQ] -> {"ArgumentsPattern" -> {
           Blank[]}}}], "NValues" -> None, "FormatValues" -> None, "Options" -> 
    None, "Attributes" -> {}, "FullName" -> "DualNumbers`DualArrayQ"], 
   False]]], "Output",
 CellLabel->"Out[40]=",ExpressionUUID->"0b2ff386-357b-499b-902a-4f29ba6bd09f"],

Cell[BoxData[
 InterpretationBox[
  StyleBox[
   FrameBox[
    DynamicModuleBox[{System`InformationDump`open$$ = False, 
     System`InformationDump`mouseOver$$ = False}, 
     PaneSelectorBox[{True->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False,
             BaseStyle -> None],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"\\!\\(\\*RowBox[{\\\"UnpackDualArray\\\", \
\\\"[\\\", RowBox[{StyleBox[\\\"dualArray\\\", \\\"TI\\\"]}], \\\"]\\\"}]\\) \
reverses to operation of PackDualArray and creates an array of dual \
scalars.\\nProduces a message if packing messages have been turned on with \
On[\\\"Packing\\\"].\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          PaneBox[GridBox[{
             {
              
              DynamicModuleBox[{System`InformationDump`open$$ = {
               False, False, False, False, False, False, False, False, False, 
                False, False, False}}, 
               StyleBox[GridBox[{
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Definitions\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Definitions\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Definitions", "Tooltip"]& ], GridBox[{
                    {
                    RowBox[{
                    RowBox[{"UnpackDualArray", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"Dual", "[", 
                    RowBox[{
                    "DualNumbers`Private`a_", ",", "DualNumbers`Private`b_"}],
                     "]"}], ")"}], "?", "DualArrayQ"}], "]"}], ":=", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    "DualNumbers`Private`packingMessagesEnabledQ", "[", "]"}],
                     ",", 
                    RowBox[{"Quiet", "[", 
                    RowBox[{
                    RowBox[{"Message", "[", 
                    RowBox[{
                    StyleBox[
                    RowBox[{"UnpackDualArray", "::", "unpack"}], 
                    "MessageName"], ",", 
                    RowBox[{
                    "Dimensions", "[", "DualNumbers`Private`a", "]"}]}], 
                    "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    StyleBox[
                    RowBox[{"FromPackedArray", "::", "unpack"}], 
                    "MessageName"], ",", 
                    StyleBox[
                    RowBox[{"FromPackedArray", "::", "punpack1"}], 
                    "MessageName"]}], "}"}]}], "]"}]}], "]"}], ";", 
                    RowBox[{"MapThread", "[", 
                    RowBox[{"Dual", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    "DualNumbers`Private`a", ",", "DualNumbers`Private`b"}], 
                    "}"}], ",", 
                    RowBox[{
                    "ArrayDepth", "[", "DualNumbers`Private`a", "]"}]}], 
                    "]"}]}], ")"}]}]},
                    {
                    RowBox[{
                    RowBox[{"UnpackDualArray", "[", 
                    RowBox[{
                    "DualNumbers`Private`d_Dual", "?", "DualScalarQ"}], "]"}],
                     ":=", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Message", "[", 
                    RowBox[{
                    StyleBox[
                    RowBox[{"UnpackDualArray", "::", "notArray"}], 
                    "MessageName"], ",", 
                    RowBox[{"Short", "[", "DualNumbers`Private`d", "]"}]}], 
                    "]"}], ";", "DualNumbers`Private`d"}], ")"}]}]},
                    {
                    RowBox[{
                    RowBox[{
                    "UnpackDualArray", "[", "DualNumbers`Private`other_", 
                    "]"}], ":=", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Message", "[", 
                    RowBox[{
                    StyleBox[
                    RowBox[{"UnpackDualArray", "::", "badarray"}], 
                    "MessageName"], ",", 
                    RowBox[{
                    "Short", "[", "DualNumbers`Private`other", "]"}]}], "]"}],
                     ";", "DualNumbers`Private`other"}], ")"}]}]}
                    },
                    DefaultBaseStyle->"Column",
                    GridBoxAlignment->{"Columns" -> {{Left}}},
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]},
                  {
                   TagBox[
                    TooltipBox[
                    
                    StyleBox["\<\" Default Definitions\"\>", 
                    "InformationRowLabel",
                    StripOnInput->False],
                    "\"DefaultValues\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "DefaultValues", "Tooltip"]& ], 
                   InterpretationBox[GridBox[{
                    {
                    RowBox[{
                    RowBox[{
                    "SyntaxInformation", "[", "UnpackDualArray", "]"}], "=", 
                    RowBox[{"{", 
                    RowBox[{"\<\"ArgumentsPattern\"\>", "\[Rule]", 
                    RowBox[{"{", "_", "}"}]}], "}"}]}]}
                    },
                    BaselinePosition->{Baseline, {1, 1}},
                    
                    GridBoxAlignment->{
                    "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}],
                    
                    ColumnForm[{
                    SyntaxInformation[DualNumbers`UnpackDualArray] = {
                    "ArgumentsPattern" -> {
                    Blank[]}}}],
                    Editable->False]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Full Name\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"FullName\"",
                    TooltipStyle->"TextStyling"],
                    
                    Annotation[#, "FullName", 
                    "Tooltip"]& ], "\<\"DualNumbers`UnpackDualArray\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {Right, Left}},
                 GridBoxDividers->None,
                 GridBoxItemSize->{"Columns" -> {Automatic, Automatic}},
                 GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.5599999999999999]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}], "DialogStyle",
                StripOnInput->False],
               DynamicModuleValues:>{}]}
            },
            DefaultBaseStyle->"Column",
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.5599999999999999]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[3.6]}, 
                Offset[0.2]}}],
           FrameMargins->6], ""},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpener"]], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpenerHot"]]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, False],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"], False->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"\\!\\(\\*RowBox[{\\\"UnpackDualArray\\\", \
\\\"[\\\", RowBox[{StyleBox[\\\"dualArray\\\", \\\"TI\\\"]}], \\\"]\\\"}]\\) \
reverses to operation of PackDualArray and creates an array of dual \
scalars.\\nProduces a message if packing messages have been turned on with \
On[\\\"Packing\\\"].\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"],
               ImageSizeCache->{12., {3., 9.}}], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpenerHot"],
               ImageSizeCache->{12., {3., 9.}}]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, True],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}, Dynamic[System`InformationDump`open$$],
      BaselinePosition->Baseline,
      FrameMargins->0,
      ImageSize->Automatic],
     DynamicModuleValues:>{}],
    BaseStyle->"InformationGridFrame",
    StripOnInput->False], "InformationGridPlain",
   StripOnInput->False],
  InformationData[
   Association[
   "ObjectType" -> "Symbol", "Usage" -> 
    "\!\(\*RowBox[{\"UnpackDualArray\", \"[\", \
RowBox[{StyleBox[\"dualArray\", \"TI\"]}], \"]\"}]\) reverses to operation of \
PackDualArray and creates an array of dual scalars.\nProduces a message if \
packing messages have been turned on with On[\"Packing\"].", "Documentation" -> 
    None, "OwnValues" -> None, "UpValues" -> None, "DownValues" -> 
    Information`InformationValueForm[
     DownValues, DualNumbers`UnpackDualArray, {DualNumbers`UnpackDualArray[
         PatternTest[
          DualNumbers`Dual[
           Pattern[DualNumbers`Private`a, 
            Blank[]], 
           Pattern[DualNumbers`Private`b, 
            Blank[]]], DualNumbers`DualArrayQ]] :> (If[
          DualNumbers`Private`packingMessagesEnabledQ[], 
          Quiet[
           Message[
            MessageName[DualNumbers`UnpackDualArray, "unpack"], 
            Dimensions[DualNumbers`Private`a]], {
            MessageName[Developer`FromPackedArray, "unpack"], 
            MessageName[Developer`FromPackedArray, "punpack1"]}]]; 
        MapThread[
         DualNumbers`Dual, {DualNumbers`Private`a, DualNumbers`Private`b}, 
          ArrayDepth[DualNumbers`Private`a]]), DualNumbers`UnpackDualArray[
         PatternTest[
          Pattern[DualNumbers`Private`d, 
           Blank[DualNumbers`Dual]], DualNumbers`DualScalarQ]] :> (Message[
          MessageName[DualNumbers`UnpackDualArray, "notArray"], 
          Short[DualNumbers`Private`d]]; DualNumbers`Private`d), 
       DualNumbers`UnpackDualArray[
         Pattern[DualNumbers`Private`other, 
          Blank[]]] :> (Message[
          MessageName[DualNumbers`UnpackDualArray, "badarray"], 
          Short[DualNumbers`Private`other]]; DualNumbers`Private`other)}], 
    "SubValues" -> None, "DefaultValues" -> 
    Information`InformationValueForm[
     DefaultValues, DualNumbers`UnpackDualArray, {
      SyntaxInformation[DualNumbers`UnpackDualArray] -> {"ArgumentsPattern" -> {
           Blank[]}}}], "NValues" -> None, "FormatValues" -> None, "Options" -> 
    None, "Attributes" -> {}, "FullName" -> "DualNumbers`UnpackDualArray"], 
   False]]], "Output",
 CellLabel->"Out[41]=",ExpressionUUID->"a91d802e-e460-4bd3-9454-6a0045201f39"],

Cell[BoxData[
 InterpretationBox[
  StyleBox[
   FrameBox[
    DynamicModuleBox[{System`InformationDump`open$$ = False, 
     System`InformationDump`mouseOver$$ = False}, 
     PaneSelectorBox[{True->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False,
             BaseStyle -> None],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"\\!\\(\\*RowBox[{\\\"DualFreeArrayQ\\\", \\\"[\\\", \
RowBox[{StyleBox[\\\"expr\\\", \\\"TI\\\"]}], \\\"]\\\"}]\\) tests if \
\\!\\(\\*StyleBox[\\\"expr\\\", \\\"TI\\\"]\\) is an ordinary array that has \
no dual numbers at the deepest level.\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          PaneBox[GridBox[{
             {
              
              DynamicModuleBox[{System`InformationDump`open$$ = {
               False, False, False, False, False, False, False, False, False, 
                False, False, False}}, 
               StyleBox[GridBox[{
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Definitions\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Definitions\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Definitions", "Tooltip"]& ], GridBox[{
                    {
                    RowBox[{
                    RowBox[{"DualFreeArrayQ", "[", 
                    RowBox[{"DualNumbers`Private`a_", "?", "PackedArrayQ"}], 
                    "]"}], ":=", "True"}]},
                    {
                    RowBox[{
                    RowBox[{"DualFreeArrayQ", "[", 
                    RowBox[{"DualNumbers`Private`a_", "?", "ArrayQ"}], "]"}], 
                    ":=", 
                    RowBox[{"FreeQ", "[", 
                    RowBox[{"DualNumbers`Private`a", ",", "_Dual", ",", 
                    RowBox[{"{", 
                    RowBox[{"ArrayDepth", "[", "DualNumbers`Private`a", "]"}],
                     "}"}], ",", 
                    RowBox[{"Heads", "\[Rule]", "False"}]}], "]"}]}]},
                    {
                    RowBox[{
                    RowBox[{"DualFreeArrayQ", "[", "_", "]"}], ":=", "False"}]}
                    },
                    DefaultBaseStyle->"Column",
                    GridBoxAlignment->{"Columns" -> {{Left}}},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]},
                  {
                   TagBox[
                    TooltipBox[
                    
                    StyleBox["\<\" Default Definitions\"\>", 
                    "InformationRowLabel",
                    StripOnInput->False],
                    "\"DefaultValues\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "DefaultValues", "Tooltip"]& ], 
                   InterpretationBox[GridBox[{
                    {
                    RowBox[{
                    RowBox[{"SyntaxInformation", "[", "DualFreeArrayQ", "]"}],
                     "=", 
                    RowBox[{"{", 
                    RowBox[{"\<\"ArgumentsPattern\"\>", "\[Rule]", 
                    RowBox[{"{", "_", "}"}]}], "}"}]}]}
                    },
                    BaselinePosition->{Baseline, {1, 1}},
                    
                    GridBoxAlignment->{
                    "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}],
                    
                    ColumnForm[{
                    SyntaxInformation[DualNumbers`DualFreeArrayQ] = {
                    "ArgumentsPattern" -> {
                    Blank[]}}}],
                    Editable->False]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Full Name\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"FullName\"",
                    TooltipStyle->"TextStyling"],
                    
                    Annotation[#, "FullName", 
                    "Tooltip"]& ], "\<\"DualNumbers`DualFreeArrayQ\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {Right, Left}},
                 GridBoxDividers->None,
                 GridBoxItemSize->{"Columns" -> {Automatic, Automatic}},
                 GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.5599999999999999]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}], "DialogStyle",
                StripOnInput->False],
               DynamicModuleValues:>{}]}
            },
            DefaultBaseStyle->"Column",
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.5599999999999999]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[3.6]}, 
                Offset[0.2]}}],
           FrameMargins->6], ""},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpener"]], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpenerHot"]]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, False],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"], False->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"\\!\\(\\*RowBox[{\\\"DualFreeArrayQ\\\", \\\"[\\\", \
RowBox[{StyleBox[\\\"expr\\\", \\\"TI\\\"]}], \\\"]\\\"}]\\) tests if \
\\!\\(\\*StyleBox[\\\"expr\\\", \\\"TI\\\"]\\) is an ordinary array that has \
no dual numbers at the deepest level.\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"],
               ImageSizeCache->{12., {3., 9.}}], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpenerHot"],
               ImageSizeCache->{12., {3., 9.}}]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, True],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}, Dynamic[System`InformationDump`open$$],
      BaselinePosition->Baseline,
      FrameMargins->0,
      ImageSize->Automatic],
     DynamicModuleValues:>{}],
    BaseStyle->"InformationGridFrame",
    StripOnInput->False], "InformationGridPlain",
   StripOnInput->False],
  InformationData[
   Association[
   "ObjectType" -> "Symbol", "Usage" -> 
    "\!\(\*RowBox[{\"DualFreeArrayQ\", \"[\", RowBox[{StyleBox[\"expr\", \"TI\
\"]}], \"]\"}]\) tests if \!\(\*StyleBox[\"expr\", \"TI\"]\) is an ordinary \
array that has no dual numbers at the deepest level.", "Documentation" -> 
    None, "OwnValues" -> None, "UpValues" -> None, "DownValues" -> 
    Information`InformationValueForm[
     DownValues, DualNumbers`DualFreeArrayQ, {DualNumbers`DualFreeArrayQ[
         PatternTest[
          Pattern[DualNumbers`Private`a, 
           Blank[]], Developer`PackedArrayQ]] :> True, 
       DualNumbers`DualFreeArrayQ[
         PatternTest[
          Pattern[DualNumbers`Private`a, 
           Blank[]], ArrayQ]] :> FreeQ[DualNumbers`Private`a, 
         Blank[DualNumbers`Dual], {
          ArrayDepth[DualNumbers`Private`a]}, Heads -> False], 
       DualNumbers`DualFreeArrayQ[
         Blank[]] :> False}], "SubValues" -> None, "DefaultValues" -> 
    Information`InformationValueForm[
     DefaultValues, DualNumbers`DualFreeArrayQ, {
      SyntaxInformation[DualNumbers`DualFreeArrayQ] -> {"ArgumentsPattern" -> {
           Blank[]}}}], "NValues" -> None, "FormatValues" -> None, "Options" -> 
    None, "Attributes" -> {}, "FullName" -> "DualNumbers`DualFreeArrayQ"], 
   False]]], "Output",
 CellLabel->"Out[42]=",ExpressionUUID->"327e75a7-fffd-4b6e-8c4f-082a4f8e5302"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Utilities for working with dual numbers", \
"Subsubsection",ExpressionUUID->"f23b65fe-1114-4efe-bbe7-8816fce4afba"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"?", "DualApply"}], "\[IndentingNewLine]", 
 RowBox[{"?", "AddDualHandling"}]}], "Input",
 CellLabel->
  "In[127]:=",ExpressionUUID->"e9a353da-1190-45c1-941a-8ffab2ded58e"],

Cell[BoxData[
 InterpretationBox[
  StyleBox[
   FrameBox[
    DynamicModuleBox[{System`InformationDump`open$$ = False, 
     System`InformationDump`mouseOver$$ = False}, 
     PaneSelectorBox[{True->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False,
             BaseStyle -> None],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"\\!\\(\\*RowBox[{\\\"DualApply\\\", \\\"[\\\", \
RowBox[{RowBox[{\\\"{\\\", RowBox[{StyleBox[SubscriptBox[\\\"f\\\", StyleBox[\
\\\"a\\\", \\\"TI\\\"]], \\\"TI\\\"], \\\",\\\",  StyleBox[SubscriptBox[\\\"f\
\\\", StyleBox[\\\"b\\\", \\\"TI\\\"]], \\\"TI\\\"]}], \\\"}\\\"}], \
\\\",\\\",  RowBox[{\\\"Dual\\\", \\\"[\\\", RowBox[{StyleBox[\\\"a\\\", \
\\\"TI\\\"], \\\",\\\",  StyleBox[\\\"b\\\", \\\"TI\\\"]}], \\\"]\\\"}]}], \\\
\"]\\\"}]\\) returns Dual[\\!\\(\\*StyleBox[SubscriptBox[\\\"f\\\", StyleBox[\
\\\"a\\\", \\\"TI\\\"]], \\\"TI\\\"]\\)[\\!\\(\\*StyleBox[\\\"a\\\", \\\"TI\\\
\"]\\)], \\!\\(\\*StyleBox[SubscriptBox[\\\"f\\\", StyleBox[\\\"b\\\", \\\"TI\
\\\"]], \\\"TI\\\"]\\)[\\!\\(\\*StyleBox[\\\"b\\\", \
\\\"TI\\\"]\\)]].\\n\\!\\(\\*RowBox[{\\\"DualApply\\\", \\\"[\\\", \
RowBox[{RowBox[{\\\"{\\\", RowBox[{StyleBox[SubscriptBox[\\\"f\\\", StyleBox[\
\\\"All\\\", \\\"TI\\\"]], \\\"TI\\\"]}], \\\"}\\\"}], \\\",\\\",  RowBox[{\\\
\"Dual\\\", \\\"[\\\", RowBox[{StyleBox[\\\"a\\\", \\\"TI\\\"], \\\",\\\",  \
StyleBox[\\\"b\\\", \\\"TI\\\"]}], \\\"]\\\"}]}], \\\"]\\\"}]\\) returns \
Dual[\\!\\(\\*StyleBox[SubscriptBox[\\\"f\\\", StyleBox[\\\"All\\\", \\\"TI\\\
\"]], \\\"TI\\\"]\\)[\\!\\(\\*StyleBox[\\\"a\\\", \\\"TI\\\"]\\), \
\\!\\(\\*StyleBox[\\\"b\\\", \\\"TI\\\"]\\)][[1]], \
\\!\\(\\*StyleBox[SubscriptBox[\\\"f\\\", StyleBox[\\\"All\\\", \\\"TI\\\"]], \
\\\"TI\\\"]\\)[\\!\\(\\*StyleBox[\\\"a\\\", \\\"TI\\\"]\\), \
\\!\\(\\*StyleBox[\\\"b\\\", \\\"TI\\\"]\\)][[2]]]. \
\\!\\(\\*StyleBox[SubscriptBox[\\\"f\\\", StyleBox[\\\"All\\\", \\\"TI\\\"]], \
\\\"TI\\\"]\\) should return a List of length \
2.\\n\\!\\(\\*RowBox[{\\\"DualApply\\\", \\\"[\\\", \
RowBox[{StyleBox[\\\"f\\\", \\\"TI\\\"], \\\",\\\",  RowBox[{\\\"Dual\\\", \\\
\"[\\\", RowBox[{StyleBox[\\\"a\\\", \\\"TI\\\"], \\\",\\\",  \
StyleBox[\\\"b\\\", \\\"TI\\\"]}], \\\"]\\\"}]}], \\\"]\\\"}]\\) returns \
Dual[\\!\\(\\*StyleBox[\\\"f\\\", \\\"TI\\\"]\\)[\\!\\(\\*StyleBox[\\\"a\\\", \
\\\"TI\\\"]\\)], \\!\\(\\*StyleBox[\\\"f\\\", \
\\\"TI\\\"]\\)[\\!\\(\\*StyleBox[\\\"b\\\", \
\\\"TI\\\"]\\)]].\\n\\!\\(\\*RowBox[{\\\"DualApply\\\", \\\"[\\\", \
RowBox[{StyleBox[\\\"fspec\\\", \\\"TI\\\"], \\\",\\\",  \
RowBox[{\\\"Dual\\\", \\\"[\\\", RowBox[{StyleBox[\\\"a\\\", \\\"TI\\\"], \
\\\",\\\",  StyleBox[\\\"b\\\", \\\"TI\\\"]}], \\\"]\\\"}], \\\",\\\",  \
StyleBox[\\\"lvlSpec\\\", \\\"TI\\\"]}], \\\"]\\\"}]\\) maps the function(s) \
to deeper levels of \\!\\(\\*StyleBox[\\\"a\\\", \\\"TI\\\"]\\) and \
\\!\\(\\*StyleBox[\\\"b\\\", \\\"TI\\\"]\\).\\n\\!\\(\\*RowBox[{\\\"DualApply\
\\\", \\\"[\\\", RowBox[{StyleBox[\\\"f\\\", \\\"TI\\\"]}], \\\"]\\\"}]\\) is \
the operator form of DualApply.\\n\\!\\(\\*RowBox[{\\\"DualApply\\\", \\\"[\\\
\", RowBox[{StyleBox[\\\"f\\\", \\\"TI\\\"], \\\",\\\",  StyleBox[\\\"x\\\", \
\\\"TI\\\"]}], \\\"]\\\"}]\\) will use ToDual[\\!\\(\\*StyleBox[\\\"x\\\", \\\
\"TI\\\"]\\), 0] to cast standard quantities \\!\\(\\*StyleBox[\\\"x\\\", \
\\\"TI\\\"]\\) to duals.\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          PaneBox[GridBox[{
             {
              
              DynamicModuleBox[{System`InformationDump`open$$ = {
               False, False, False, False, False, False, False, False, False, 
                False, False, False}}, 
               StyleBox[GridBox[{
                  {
                   TagBox[
                    TooltipBox[
                    
                    StyleBox["\<\" DownValue Definitions\"\>", 
                    "InformationRowLabel",
                    StripOnInput->False],
                    "\"DownValues\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "DownValues", "Tooltip"]& ], GridBox[{
                    {
                    RowBox[{
                    RowBox[{"DualApply", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    "DualNumbers`Private`funa_", ",", 
                    "DualNumbers`Private`funb_"}], "}"}], ",", 
                    RowBox[{"Dual", "[", 
                    RowBox[{
                    "DualNumbers`Private`a_", ",", "DualNumbers`Private`b_"}],
                     "]"}]}], "]"}], ":=", 
                    RowBox[{"Dual", "[", 
                    RowBox[{
                    RowBox[{
                    "DualNumbers`Private`funa", "[", "DualNumbers`Private`a", 
                    "]"}], ",", 
                    RowBox[{
                    "DualNumbers`Private`funb", "[", "DualNumbers`Private`b", 
                    "]"}]}], "]"}]}]},
                    {
                    RowBox[{
                    RowBox[{"DualApply", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    "DualNumbers`Private`funa_", ",", 
                    "DualNumbers`Private`funb_"}], "}"}], ",", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"Dual", "[", 
                    RowBox[{
                    "DualNumbers`Private`a_", ",", "DualNumbers`Private`b_"}],
                     "]"}], ")"}], "?", "DualArrayQ"}], ",", 
                    "DualNumbers`Private`spec_"}], "]"}], ":=", 
                    RowBox[{"Dual", "[", 
                    RowBox[{
                    RowBox[{"Map", "[", 
                    RowBox[{
                    "DualNumbers`Private`funa", ",", "DualNumbers`Private`a", 
                    ",", "DualNumbers`Private`spec"}], "]"}], ",", 
                    RowBox[{"Map", "[", 
                    RowBox[{
                    "DualNumbers`Private`funb", ",", "DualNumbers`Private`b", 
                    ",", "DualNumbers`Private`spec"}], "]"}]}], "]"}]}]},
                    {
                    RowBox[{
                    RowBox[{"DualApply", "[", 
                    RowBox[{
                    RowBox[{"DualNumbers`Private`fun", ":", 
                    RowBox[{"Except", "[", "_List", "]"}]}], ",", 
                    RowBox[{"Dual", "[", 
                    RowBox[{
                    "DualNumbers`Private`a_", ",", "DualNumbers`Private`b_"}],
                     "]"}]}], "]"}], ":=", 
                    RowBox[{"Dual", "[", 
                    RowBox[{
                    RowBox[{
                    "DualNumbers`Private`fun", "[", "DualNumbers`Private`a", 
                    "]"}], ",", 
                    RowBox[{
                    "DualNumbers`Private`fun", "[", "DualNumbers`Private`b", 
                    "]"}]}], "]"}]}]},
                    {
                    RowBox[{
                    RowBox[{"DualApply", "[", 
                    RowBox[{
                    RowBox[{"DualNumbers`Private`fun", ":", 
                    RowBox[{"Except", "[", "_List", "]"}]}], ",", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"Dual", "[", 
                    RowBox[{
                    "DualNumbers`Private`a_", ",", "DualNumbers`Private`b_"}],
                     "]"}], ")"}], "?", "DualArrayQ"}], ",", 
                    "DualNumbers`Private`spec_"}], "]"}], ":=", 
                    RowBox[{"Dual", "[", 
                    RowBox[{
                    RowBox[{"Map", "[", 
                    RowBox[{
                    "DualNumbers`Private`fun", ",", "DualNumbers`Private`a", 
                    ",", "DualNumbers`Private`spec"}], "]"}], ",", 
                    RowBox[{"Map", "[", 
                    RowBox[{
                    "DualNumbers`Private`fun", ",", "DualNumbers`Private`b", 
                    ",", "DualNumbers`Private`spec"}], "]"}]}], "]"}]}]},
                    {
                    RowBox[{
                    RowBox[{"DualApply", "[", 
                    RowBox[{
                    RowBox[{"{", "DualNumbers`Private`funAll_", "}"}], ",", 
                    RowBox[{"Dual", "[", 
                    RowBox[{
                    "DualNumbers`Private`a_", ",", "DualNumbers`Private`b_"}],
                     "]"}]}], "]"}], ":=", 
                    RowBox[{"With", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"DualNumbers`Private`try", "=", 
                    RowBox[{"DualNumbers`Private`funAll", "[", 
                    RowBox[{"DualNumbers`Private`a", ",", 
                    "DualNumbers`Private`b"}], "]"}]}], "}"}], ",", 
                    RowBox[{
                    RowBox[{"Dual", "@@", "DualNumbers`Private`try"}], "/;", 
                    RowBox[{"Replace", "[", 
                    RowBox[{
                    RowBox[{"MatchQ", "[", 
                    RowBox[{"DualNumbers`Private`try", ",", 
                    RowBox[{"{", 
                    RowBox[{"_", ",", "_"}], "}"}]}], "]"}], ",", 
                    RowBox[{"False", "\[RuleDelayed]", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Message", "[", 
                    RowBox[{
                    StyleBox[
                    RowBox[{"DualApply", "::", "resultlength"}], 
                    "MessageName"], ",", 
                    RowBox[{
                    "Short", "[", "DualNumbers`Private`funAll", "]"}]}], 
                    "]"}], ";", "False"}], ")"}]}]}], "]"}]}]}], "]"}]}]},
                    {
                    RowBox[{
                    RowBox[{"DualApply", "[", 
                    RowBox[{
                    RowBox[{"{", "DualNumbers`Private`funAll_", "}"}], ",", 
                    RowBox[{"Dual", "[", 
                    RowBox[{
                    "DualNumbers`Private`a_", ",", "DualNumbers`Private`b_"}],
                     "]"}], ",", "0"}], "]"}], ":=", 
                    RowBox[{"DualApply", "[", 
                    RowBox[{
                    RowBox[{"{", "DualNumbers`Private`funAll", "}"}], ",", 
                    RowBox[{"Dual", "[", 
                    RowBox[{
                    "DualNumbers`Private`a", ",", "DualNumbers`Private`b"}], 
                    "]"}]}], "]"}]}]},
                    {
                    RowBox[{
                    RowBox[{"DualApply", "[", 
                    RowBox[{
                    RowBox[{"{", "DualNumbers`Private`funAll_", "}"}], ",", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"Dual", "[", 
                    RowBox[{
                    "DualNumbers`Private`a_", ",", "DualNumbers`Private`b_"}],
                     "]"}], ")"}], "?", "DualArrayQ"}], ",", 
                    RowBox[{
                    "DualNumbers`Private`n_Integer", "?", "Positive"}]}], 
                    "]"}], ":=", 
                    RowBox[{"With", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"DualNumbers`Private`try", "=", 
                    RowBox[{"MapThread", "[", 
                    RowBox[{"DualNumbers`Private`funAll", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    "DualNumbers`Private`a", ",", "DualNumbers`Private`b"}], 
                    "}"}], ",", "DualNumbers`Private`n"}], "]"}]}], "}"}], 
                    ",", 
                    RowBox[{
                    RowBox[{"Dual", "@@", 
                    RowBox[{"Transpose", "[", 
                    RowBox[{"DualNumbers`Private`try", ",", 
                    RowBox[{"1", "\[TwoWayRule]", 
                    RowBox[{"DualNumbers`Private`n", "+", "1"}]}]}], "]"}]}], 
                    "/;", 
                    RowBox[{"Replace", "[", 
                    RowBox[{
                    RowBox[{"MatchQ", "[", 
                    RowBox[{
                    RowBox[{
                    "Dimensions", "[", "DualNumbers`Private`try", "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Repeated", "[", 
                    RowBox[{"_", ",", 
                    RowBox[{"{", "DualNumbers`Private`n", "}"}]}], "]"}], ",",
                     "2", ",", "___"}], "}"}]}], "]"}], ",", 
                    RowBox[{"False", "\[RuleDelayed]", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Message", "[", 
                    RowBox[{
                    StyleBox[
                    RowBox[{"DualApply", "::", "resultlength"}], 
                    "MessageName"], ",", 
                    RowBox[{
                    "Short", "[", "DualNumbers`Private`funAll", "]"}]}], 
                    "]"}], ";", "False"}], ")"}]}]}], "]"}]}]}], "]"}]}]},
                    {
                    RowBox[{
                    RowBox[{"DualApply", "[", 
                    RowBox[{"DualNumbers`Private`f_", ",", 
                    RowBox[{"DualNumbers`Private`other", ":", 
                    RowBox[{"Except", "[", "_Dual", "]"}]}], ",", 
                    "DualNumbers`Private`rest___"}], "]"}], ":=", 
                    RowBox[{"DualApply", "[", 
                    RowBox[{"DualNumbers`Private`f", ",", 
                    RowBox[{"ToDual", "[", 
                    RowBox[{"DualNumbers`Private`other", ",", "0"}], "]"}], 
                    ",", "DualNumbers`Private`rest"}], "]"}]}]},
                    {
                    RowBox[{
                    RowBox[{
                    RowBox[{"DualApply", "[", 
                    RowBox[{
                    "DualNumbers`Private`f_", ",", 
                    "DualNumbers`Private`d_Dual", ",", 
                    "DualNumbers`Private`spec_"}], "]"}], "/;", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Message", "[", 
                    RowBox[{
                    StyleBox[
                    RowBox[{"DualApply", "::", "arraySpec"}], "MessageName"], 
                    ",", 
                    RowBox[{"Short", "[", "DualNumbers`Private`spec", "]"}]}],
                     "]"}], ";", "False"}], ")"}]}], ":=", "Undefined"}]}
                    },
                    DefaultBaseStyle->"Column",
                    GridBoxAlignment->{"Columns" -> {{Left}}},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]},
                  {
                   TagBox[
                    TooltipBox[
                    
                    StyleBox["\<\" SubValue Definitions\"\>", 
                    "InformationRowLabel",
                    StripOnInput->False],
                    "\"SubValues\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "SubValues", "Tooltip"]& ], GridBox[{
                    {
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    "DualApply", "[", "DualNumbers`Private`fun_", "]"}], "[", 
                    "DualNumbers`Private`d_Dual", "]"}], ":=", 
                    RowBox[{"DualApply", "[", 
                    RowBox[{
                    "DualNumbers`Private`fun", ",", "DualNumbers`Private`d"}],
                     "]"}]}]}
                    },
                    DefaultBaseStyle->"Column",
                    GridBoxAlignment->{"Columns" -> {{Left}}},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]},
                  {
                   TagBox[
                    TooltipBox[
                    
                    StyleBox["\<\" Default Definitions\"\>", 
                    "InformationRowLabel",
                    StripOnInput->False],
                    "\"DefaultValues\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "DefaultValues", "Tooltip"]& ], 
                   InterpretationBox[GridBox[{
                    {
                    RowBox[{
                    RowBox[{"SyntaxInformation", "[", "DualApply", "]"}], "=", 
                    RowBox[{"{", 
                    RowBox[{"\<\"ArgumentsPattern\"\>", "\[Rule]", 
                    RowBox[{"{", "__", "}"}]}], "}"}]}]}
                    },
                    BaselinePosition->{Baseline, {1, 1}},
                    
                    GridBoxAlignment->{
                    "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}],
                    
                    ColumnForm[{
                    SyntaxInformation[DualNumbers`DualApply] = {
                    "ArgumentsPattern" -> {
                    BlankSequence[]}}}],
                    Editable->False]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Full Name\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"FullName\"",
                    TooltipStyle->"TextStyling"],
                    
                    Annotation[#, "FullName", 
                    "Tooltip"]& ], "\<\"DualNumbers`DualApply\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {Right, Left}},
                 GridBoxDividers->None,
                 GridBoxItemSize->{"Columns" -> {Automatic, Automatic}},
                 GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.5599999999999999]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}], "DialogStyle",
                StripOnInput->False],
               DynamicModuleValues:>{}]}
            },
            DefaultBaseStyle->"Column",
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.5599999999999999]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[3.6]}, 
                Offset[0.2]}}],
           FrameMargins->6], ""},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpener"]], True->
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpenerHot"]]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, False],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"], False->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"\\!\\(\\*RowBox[{\\\"DualApply\\\", \\\"[\\\", \
RowBox[{RowBox[{\\\"{\\\", RowBox[{StyleBox[SubscriptBox[\\\"f\\\", StyleBox[\
\\\"a\\\", \\\"TI\\\"]], \\\"TI\\\"], \\\",\\\",  StyleBox[SubscriptBox[\\\"f\
\\\", StyleBox[\\\"b\\\", \\\"TI\\\"]], \\\"TI\\\"]}], \\\"}\\\"}], \
\\\",\\\",  RowBox[{\\\"Dual\\\", \\\"[\\\", RowBox[{StyleBox[\\\"a\\\", \
\\\"TI\\\"], \\\",\\\",  StyleBox[\\\"b\\\", \\\"TI\\\"]}], \\\"]\\\"}]}], \\\
\"]\\\"}]\\) returns Dual[\\!\\(\\*StyleBox[SubscriptBox[\\\"f\\\", StyleBox[\
\\\"a\\\", \\\"TI\\\"]], \\\"TI\\\"]\\)[\\!\\(\\*StyleBox[\\\"a\\\", \\\"TI\\\
\"]\\)], \\!\\(\\*StyleBox[SubscriptBox[\\\"f\\\", StyleBox[\\\"b\\\", \\\"TI\
\\\"]], \\\"TI\\\"]\\)[\\!\\(\\*StyleBox[\\\"b\\\", \
\\\"TI\\\"]\\)]].\\n\\!\\(\\*RowBox[{\\\"DualApply\\\", \\\"[\\\", \
RowBox[{RowBox[{\\\"{\\\", RowBox[{StyleBox[SubscriptBox[\\\"f\\\", StyleBox[\
\\\"All\\\", \\\"TI\\\"]], \\\"TI\\\"]}], \\\"}\\\"}], \\\",\\\",  RowBox[{\\\
\"Dual\\\", \\\"[\\\", RowBox[{StyleBox[\\\"a\\\", \\\"TI\\\"], \\\",\\\",  \
StyleBox[\\\"b\\\", \\\"TI\\\"]}], \\\"]\\\"}]}], \\\"]\\\"}]\\) returns \
Dual[\\!\\(\\*StyleBox[SubscriptBox[\\\"f\\\", StyleBox[\\\"All\\\", \\\"TI\\\
\"]], \\\"TI\\\"]\\)[\\!\\(\\*StyleBox[\\\"a\\\", \\\"TI\\\"]\\), \
\\!\\(\\*StyleBox[\\\"b\\\", \\\"TI\\\"]\\)][[1]], \
\\!\\(\\*StyleBox[SubscriptBox[\\\"f\\\", StyleBox[\\\"All\\\", \\\"TI\\\"]], \
\\\"TI\\\"]\\)[\\!\\(\\*StyleBox[\\\"a\\\", \\\"TI\\\"]\\), \
\\!\\(\\*StyleBox[\\\"b\\\", \\\"TI\\\"]\\)][[2]]]. \
\\!\\(\\*StyleBox[SubscriptBox[\\\"f\\\", StyleBox[\\\"All\\\", \\\"TI\\\"]], \
\\\"TI\\\"]\\) should return a List of length \
2.\\n\\!\\(\\*RowBox[{\\\"DualApply\\\", \\\"[\\\", \
RowBox[{StyleBox[\\\"f\\\", \\\"TI\\\"], \\\",\\\",  RowBox[{\\\"Dual\\\", \\\
\"[\\\", RowBox[{StyleBox[\\\"a\\\", \\\"TI\\\"], \\\",\\\",  \
StyleBox[\\\"b\\\", \\\"TI\\\"]}], \\\"]\\\"}]}], \\\"]\\\"}]\\) returns \
Dual[\\!\\(\\*StyleBox[\\\"f\\\", \\\"TI\\\"]\\)[\\!\\(\\*StyleBox[\\\"a\\\", \
\\\"TI\\\"]\\)], \\!\\(\\*StyleBox[\\\"f\\\", \
\\\"TI\\\"]\\)[\\!\\(\\*StyleBox[\\\"b\\\", \
\\\"TI\\\"]\\)]].\\n\\!\\(\\*RowBox[{\\\"DualApply\\\", \\\"[\\\", \
RowBox[{StyleBox[\\\"fspec\\\", \\\"TI\\\"], \\\",\\\",  \
RowBox[{\\\"Dual\\\", \\\"[\\\", RowBox[{StyleBox[\\\"a\\\", \\\"TI\\\"], \
\\\",\\\",  StyleBox[\\\"b\\\", \\\"TI\\\"]}], \\\"]\\\"}], \\\",\\\",  \
StyleBox[\\\"lvlSpec\\\", \\\"TI\\\"]}], \\\"]\\\"}]\\) maps the function(s) \
to deeper levels of \\!\\(\\*StyleBox[\\\"a\\\", \\\"TI\\\"]\\) and \
\\!\\(\\*StyleBox[\\\"b\\\", \\\"TI\\\"]\\).\\n\\!\\(\\*RowBox[{\\\"DualApply\
\\\", \\\"[\\\", RowBox[{StyleBox[\\\"f\\\", \\\"TI\\\"]}], \\\"]\\\"}]\\) is \
the operator form of DualApply.\\n\\!\\(\\*RowBox[{\\\"DualApply\\\", \\\"[\\\
\", RowBox[{StyleBox[\\\"f\\\", \\\"TI\\\"], \\\",\\\",  StyleBox[\\\"x\\\", \
\\\"TI\\\"]}], \\\"]\\\"}]\\) will use ToDual[\\!\\(\\*StyleBox[\\\"x\\\", \\\
\"TI\\\"]\\), 0] to cast standard quantities \\!\\(\\*StyleBox[\\\"x\\\", \
\\\"TI\\\"]\\) to duals.\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"],
               ImageSizeCache->{12., {3., 9.}}], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpenerHot"],
               ImageSizeCache->{12., {3., 9.}}]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, True],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}, Dynamic[System`InformationDump`open$$],
      BaselinePosition->Baseline,
      FrameMargins->0,
      ImageSize->Automatic],
     DynamicModuleValues:>{}],
    BaseStyle->"InformationGridFrame",
    StripOnInput->False], "InformationGridPlain",
   StripOnInput->False],
  InformationData[
   Association[
   "ObjectType" -> "Symbol", "Usage" -> 
    "\!\(\*RowBox[{\"DualApply\", \"[\", RowBox[{RowBox[{\"{\", \
RowBox[{StyleBox[SubscriptBox[\"f\", StyleBox[\"a\", \"TI\"]], \"TI\"], \
\",\",  StyleBox[SubscriptBox[\"f\", StyleBox[\"b\", \"TI\"]], \"TI\"]}], \"}\
\"}], \",\",  RowBox[{\"Dual\", \"[\", RowBox[{StyleBox[\"a\", \"TI\"], \
\",\",  StyleBox[\"b\", \"TI\"]}], \"]\"}]}], \"]\"}]\) returns \
Dual[\!\(\*StyleBox[SubscriptBox[\"f\", StyleBox[\"a\", \"TI\"]], \
\"TI\"]\)[\!\(\*StyleBox[\"a\", \"TI\"]\)], \
\!\(\*StyleBox[SubscriptBox[\"f\", StyleBox[\"b\", \"TI\"]], \
\"TI\"]\)[\!\(\*StyleBox[\"b\", \"TI\"]\)]].\n\!\(\*RowBox[{\"DualApply\", \
\"[\", RowBox[{RowBox[{\"{\", RowBox[{StyleBox[SubscriptBox[\"f\", \
StyleBox[\"All\", \"TI\"]], \"TI\"]}], \"}\"}], \",\",  RowBox[{\"Dual\", \"[\
\", RowBox[{StyleBox[\"a\", \"TI\"], \",\",  StyleBox[\"b\", \"TI\"]}], \
\"]\"}]}], \"]\"}]\) returns Dual[\!\(\*StyleBox[SubscriptBox[\"f\", \
StyleBox[\"All\", \"TI\"]], \"TI\"]\)[\!\(\*StyleBox[\"a\", \"TI\"]\), \
\!\(\*StyleBox[\"b\", \"TI\"]\)][[1]], \!\(\*StyleBox[SubscriptBox[\"f\", \
StyleBox[\"All\", \"TI\"]], \"TI\"]\)[\!\(\*StyleBox[\"a\", \"TI\"]\), \
\!\(\*StyleBox[\"b\", \"TI\"]\)][[2]]]. \!\(\*StyleBox[SubscriptBox[\"f\", \
StyleBox[\"All\", \"TI\"]], \"TI\"]\) should return a List of length 2.\n\!\(\
\*RowBox[{\"DualApply\", \"[\", RowBox[{StyleBox[\"f\", \"TI\"], \",\",  \
RowBox[{\"Dual\", \"[\", RowBox[{StyleBox[\"a\", \"TI\"], \",\",  \
StyleBox[\"b\", \"TI\"]}], \"]\"}]}], \"]\"}]\) returns \
Dual[\!\(\*StyleBox[\"f\", \"TI\"]\)[\!\(\*StyleBox[\"a\", \"TI\"]\)], \
\!\(\*StyleBox[\"f\", \"TI\"]\)[\!\(\*StyleBox[\"b\", \"TI\"]\)]].\n\
\!\(\*RowBox[{\"DualApply\", \"[\", RowBox[{StyleBox[\"fspec\", \"TI\"], \
\",\",  RowBox[{\"Dual\", \"[\", RowBox[{StyleBox[\"a\", \"TI\"], \",\",  \
StyleBox[\"b\", \"TI\"]}], \"]\"}], \",\",  StyleBox[\"lvlSpec\", \"TI\"]}], \
\"]\"}]\) maps the function(s) to deeper levels of \!\(\*StyleBox[\"a\", \"TI\
\"]\) and \!\(\*StyleBox[\"b\", \"TI\"]\).\n\!\(\*RowBox[{\"DualApply\", \
\"[\", RowBox[{StyleBox[\"f\", \"TI\"]}], \"]\"}]\) is the operator form of \
DualApply.\n\!\(\*RowBox[{\"DualApply\", \"[\", RowBox[{StyleBox[\"f\", \
\"TI\"], \",\",  StyleBox[\"x\", \"TI\"]}], \"]\"}]\) will use \
ToDual[\!\(\*StyleBox[\"x\", \"TI\"]\), 0] to cast standard quantities \
\!\(\*StyleBox[\"x\", \"TI\"]\) to duals.", "Documentation" -> None, 
    "OwnValues" -> None, "UpValues" -> None, "DownValues" -> 
    Information`InformationValueForm[
     DownValues, DualNumbers`DualApply, {DualNumbers`DualApply[{
          Pattern[DualNumbers`Private`funa, 
           Blank[]], 
          Pattern[DualNumbers`Private`funb, 
           Blank[]]}, 
         DualNumbers`Dual[
          Pattern[DualNumbers`Private`a, 
           Blank[]], 
          Pattern[DualNumbers`Private`b, 
           Blank[]]]] :> DualNumbers`Dual[
         DualNumbers`Private`funa[DualNumbers`Private`a], 
         DualNumbers`Private`funb[DualNumbers`Private`b]], 
       DualNumbers`DualApply[{
          Pattern[DualNumbers`Private`funa, 
           Blank[]], 
          Pattern[DualNumbers`Private`funb, 
           Blank[]]}, 
         PatternTest[
          DualNumbers`Dual[
           Pattern[DualNumbers`Private`a, 
            Blank[]], 
           Pattern[DualNumbers`Private`b, 
            Blank[]]], DualNumbers`DualArrayQ], 
         Pattern[DualNumbers`Private`spec, 
          Blank[]]] :> DualNumbers`Dual[
         Map[
         DualNumbers`Private`funa, DualNumbers`Private`a, 
          DualNumbers`Private`spec], 
         Map[
         DualNumbers`Private`funb, DualNumbers`Private`b, 
          DualNumbers`Private`spec]], DualNumbers`DualApply[
         Pattern[DualNumbers`Private`fun, 
          Except[
           Blank[List]]], 
         DualNumbers`Dual[
          Pattern[DualNumbers`Private`a, 
           Blank[]], 
          Pattern[DualNumbers`Private`b, 
           Blank[]]]] :> DualNumbers`Dual[
         DualNumbers`Private`fun[DualNumbers`Private`a], 
         DualNumbers`Private`fun[DualNumbers`Private`b]], 
       DualNumbers`DualApply[
         Pattern[DualNumbers`Private`fun, 
          Except[
           Blank[List]]], 
         PatternTest[
          DualNumbers`Dual[
           Pattern[DualNumbers`Private`a, 
            Blank[]], 
           Pattern[DualNumbers`Private`b, 
            Blank[]]], DualNumbers`DualArrayQ], 
         Pattern[DualNumbers`Private`spec, 
          Blank[]]] :> DualNumbers`Dual[
         Map[
         DualNumbers`Private`fun, DualNumbers`Private`a, 
          DualNumbers`Private`spec], 
         Map[
         DualNumbers`Private`fun, DualNumbers`Private`b, 
          DualNumbers`Private`spec]], DualNumbers`DualApply[{
          Pattern[DualNumbers`Private`funAll, 
           Blank[]]}, 
         DualNumbers`Dual[
          Pattern[DualNumbers`Private`a, 
           Blank[]], 
          Pattern[DualNumbers`Private`b, 
           Blank[]]]] :> 
       With[{DualNumbers`Private`try = 
          DualNumbers`Private`funAll[
           DualNumbers`Private`a, DualNumbers`Private`b]}, 
         Condition[
          Apply[DualNumbers`Dual, DualNumbers`Private`try], 
          Replace[
           MatchQ[DualNumbers`Private`try, {
             Blank[], 
             Blank[]}], False :> (Message[
              MessageName[DualNumbers`DualApply, "resultlength"], 
              Short[DualNumbers`Private`funAll]]; False)]]], 
       DualNumbers`DualApply[{
          Pattern[DualNumbers`Private`funAll, 
           Blank[]]}, 
         DualNumbers`Dual[
          Pattern[DualNumbers`Private`a, 
           Blank[]], 
          Pattern[DualNumbers`Private`b, 
           Blank[]]], 0] :> 
       DualNumbers`DualApply[{DualNumbers`Private`funAll}, 
         DualNumbers`Dual[DualNumbers`Private`a, DualNumbers`Private`b]], 
       DualNumbers`DualApply[{
          Pattern[DualNumbers`Private`funAll, 
           Blank[]]}, 
         PatternTest[
          DualNumbers`Dual[
           Pattern[DualNumbers`Private`a, 
            Blank[]], 
           Pattern[DualNumbers`Private`b, 
            Blank[]]], DualNumbers`DualArrayQ], 
         PatternTest[
          Pattern[DualNumbers`Private`n, 
           Blank[Integer]], Positive]] :> 
       With[{DualNumbers`Private`try = 
          MapThread[
           DualNumbers`Private`funAll, {
            DualNumbers`Private`a, DualNumbers`Private`b}, 
            DualNumbers`Private`n]}, 
         Condition[
          Apply[DualNumbers`Dual, 
           Transpose[DualNumbers`Private`try, 
            TwoWayRule[1, DualNumbers`Private`n + 1]]], 
          Replace[
           MatchQ[
            Dimensions[DualNumbers`Private`try], {
             Repeated[
              Blank[], {DualNumbers`Private`n}], 2, 
             BlankNullSequence[]}], False :> (Message[
              MessageName[DualNumbers`DualApply, "resultlength"], 
              Short[DualNumbers`Private`funAll]]; False)]]], 
       DualNumbers`DualApply[
         Pattern[DualNumbers`Private`f, 
          Blank[]], 
         Pattern[DualNumbers`Private`other, 
          Except[
           Blank[DualNumbers`Dual]]], 
         Pattern[DualNumbers`Private`rest, 
          BlankNullSequence[]]] :> 
       DualNumbers`DualApply[DualNumbers`Private`f, 
         DualNumbers`ToDual[DualNumbers`Private`other, 0], 
         DualNumbers`Private`rest], Condition[
         DualNumbers`DualApply[
          Pattern[DualNumbers`Private`f, 
           Blank[]], 
          Pattern[DualNumbers`Private`d, 
           Blank[DualNumbers`Dual]], 
          Pattern[DualNumbers`Private`spec, 
           Blank[]]], Message[
           MessageName[DualNumbers`DualApply, "arraySpec"], 
           Short[DualNumbers`Private`spec]]; False] :> Undefined}], 
    "SubValues" -> 
    Information`InformationValueForm[
     SubValues, DualNumbers`DualApply, {DualNumbers`DualApply[
         Pattern[DualNumbers`Private`fun, 
          Blank[]]][
         Pattern[DualNumbers`Private`d, 
          Blank[DualNumbers`Dual]]] :> 
       DualNumbers`DualApply[
        DualNumbers`Private`fun, DualNumbers`Private`d]}], "DefaultValues" -> 
    Information`InformationValueForm[
     DefaultValues, DualNumbers`DualApply, {
      SyntaxInformation[DualNumbers`DualApply] -> {"ArgumentsPattern" -> {
           BlankSequence[]}}}], "NValues" -> None, "FormatValues" -> None, 
    "Options" -> None, "Attributes" -> {}, "FullName" -> 
    "DualNumbers`DualApply"], False]]], "Output",
 CellLabel->
  "Out[127]=",ExpressionUUID->"b5676b1c-7554-4894-8fcf-3bf68bb1e7d3"],

Cell[BoxData[
 InterpretationBox[
  StyleBox[
   FrameBox[
    DynamicModuleBox[{System`InformationDump`open$$ = False, 
     System`InformationDump`mouseOver$$ = False}, 
     PaneSelectorBox[{True->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False,
             BaseStyle -> None],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"\\!\\(\\*RowBox[{\\\"AddDualHandling\\\", \
\\\"[\\\", RowBox[{StyleBox[\\\"f\\\", \\\"TI\\\"], \\\",\\\",  RowBox[{\\\"{\
\\\", RowBox[{StyleBox[SubscriptBox[\\\"f\\\", StyleBox[\\\"1\\\", \
\\\"TR\\\"]], \\\"TI\\\"], \\\",\\\",  StyleBox[\\\"\[Ellipsis]\\\", \\\"TR\\\
\"], \\\",\\\",  StyleBox[SubscriptBox[\\\"f\\\", StyleBox[\\\"n\\\", \
\\\"TI\\\"]], \\\"TI\\\"]}], \\\"}\\\"}]}], \\\"]\\\"}]\\) specifies \
derivatives for \\!\\(\\*StyleBox[\\\"f\\\", \\\"TI\\\"]\\) to use with Dual \
numbers when called with \\!\\(\\*StyleBox[\\\"n\\\", \\\"TI\\\"]\\) \
arguments.\\n\\!\\(\\*RowBox[{\\\"AddDualHandling\\\", \\\"[\\\", \
RowBox[{StyleBox[\\\"f\\\", \\\"TI\\\"], \\\",\\\",  StyleBox[\\\"n\\\", \
\\\"TI\\\"]}], \\\"]\\\"}]\\) uses Derivative to infer derivatives of \
\\!\\(\\*StyleBox[\\\"f\\\", \\\"TI\\\"]\\) for when \
\\!\\(\\*StyleBox[\\\"f\\\", \\\"TI\\\"]\\) is called with $n \
arguments.\\n\\!\\(\\*RowBox[{\\\"AddDualHandling\\\", \\\"[\\\", \
RowBox[{StyleBox[\\\"f\\\", \\\"TI\\\"], \\\",\\\",  RowBox[{\\\"{\\\", \
RowBox[{StyleBox[SubscriptBox[\\\"n\\\", StyleBox[\\\"1\\\", \\\"TR\\\"]], \\\
\"TI\\\"], \\\",\\\",  StyleBox[SubscriptBox[\\\"n\\\", StyleBox[\\\"2\\\", \
\\\"TR\\\"]], \\\"TI\\\"], \\\",\\\",  StyleBox[\\\"\[Ellipsis]\\\", \\\"TR\\\
\"]}], \\\"}\\\"}]}], \\\"]\\\"}]\\) uses Derivative to infer derivatives of \
\\!\\(\\*StyleBox[\\\"f\\\", \\\"TI\\\"]\\) for when \
\\!\\(\\*StyleBox[\\\"f\\\", \\\"TI\\\"]\\) is called with \
\\!\\(\\*StyleBox[SubscriptBox[\\\"n\\\", StyleBox[\\\"1\\\", \\\"TR\\\"]], \
\\\"TI\\\"]\\), \\!\\(\\*StyleBox[SubscriptBox[\\\"n\\\", StyleBox[\\\"2\\\", \
\\\"TR\\\"]], \\\"TI\\\"]\\), \[Ellipsis] arguments.\"\>", 
             "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          PaneBox[GridBox[{
             {
              
              DynamicModuleBox[{System`InformationDump`open$$ = {
               False, False, False, False, False, False, False, False, False, 
                False, False, False}}, 
               StyleBox[GridBox[{
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Definitions\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Definitions\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Definitions", "Tooltip"]& ], GridBox[{
                    {
                    RowBox[{
                    RowBox[{"AddDualHandling", "[", 
                    RowBox[{"DualNumbers`Private`f_", ",", 
                    RowBox[{
                    "DualNumbers`Private`n_Integer", "?", "Positive"}]}], 
                    "]"}], ":=", 
                    RowBox[{"AddDualHandling", "[", 
                    RowBox[{"DualNumbers`Private`f", ",", 
                    RowBox[{"Apply", "[", 
                    RowBox[{
                    RowBox[{
                    SuperscriptBox["DualNumbers`Private`f", 
                    TagBox[
                    RowBox[{"(", "##1", ")"}],
                    Derivative],
                    MultilineFunction->None], "&"}], ",", 
                    RowBox[{
                    "IdentityMatrix", "[", "DualNumbers`Private`n", "]"}], 
                    ",", 
                    RowBox[{"{", "1", "}"}]}], "]"}]}], "]"}]}]},
                    {
                    RowBox[{
                    RowBox[{"AddDualHandling", "[", 
                    RowBox[{"DualNumbers`Private`f_", ",", 
                    RowBox[{"DualNumbers`Private`nList", ":", 
                    RowBox[{"{", 
                    RowBox[{"__Integer", "?", "Positive"}], "}"}]}]}], "]"}], 
                    ":=", 
                    RowBox[{"Scan", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"AddDualHandling", "[", 
                    RowBox[{"DualNumbers`Private`f", ",", "#1"}], "]"}], 
                    "&"}], ",", "DualNumbers`Private`nList"}], "]"}]}]},
                    {
                    RowBox[{
                    RowBox[{"AddDualHandling", "[", 
                    RowBox[{
                    "DualNumbers`Private`f_", ",", 
                    "DualNumbers`Private`derivatives_List"}], "]"}], ":=", 
                    RowBox[{"With", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"DualNumbers`Private`n", "=", 
                    RowBox[{
                    "Length", "[", "DualNumbers`Private`derivatives", "]"}]}],
                     "}"}], ",", 
                    RowBox[{"Dual", "/:", 
                    RowBox[{"DualNumbers`Private`f", "[", 
                    RowBox[{
                    "DualNumbers`Private`first___", ",", 
                    "DualNumbers`Private`d_Dual", ",", 
                    "DualNumbers`Private`rest___"}], "]"}], ":=", 
                    RowBox[{"With", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"DualNumbers`Private`args", "=", 
                    RowBox[{"{", 
                    RowBox[{
                    "DualNumbers`Private`first", ",", "DualNumbers`Private`d",
                     ",", "DualNumbers`Private`rest"}], "}"}]}], "}"}], ",", 
                    RowBox[{
                    RowBox[{"With", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"DualNumbers`Private`dualPos", "=", 
                    RowBox[{"Flatten", "[", 
                    RowBox[{"DualNumbers`Private`listPosition", "[", 
                    RowBox[{
                    "DualNumbers`Private`args", ",", 
                    "DualNumbers`Private`dualPatt"}], "]"}], "]"}]}], ",", 
                    RowBox[{"DualNumbers`Private`inputs", "=", 
                    RowBox[{
                    "DualNumbers`Private`std", "[", 
                    "DualNumbers`Private`args", "]"}]}]}], "}"}], ",", 
                    RowBox[{"With", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"DualNumbers`Private`dlist", "=", 
                    RowBox[{
                    "DualNumbers`Private`derivatives", "\[LeftDoubleBracket]",
                     "DualNumbers`Private`dualPos", 
                    "\[RightDoubleBracket]"}]}], "}"}], ",", 
                    RowBox[{
                    RowBox[{"Dual", "[", 
                    RowBox[{
                    RowBox[{
                    "DualNumbers`Private`f", "@@", 
                    "DualNumbers`Private`inputs"}], ",", 
                    RowBox[{
                    RowBox[{"Through", "[", 
                    RowBox[{"DualNumbers`Private`dlist", "[", 
                    RowBox[{"Sequence", "@@", "DualNumbers`Private`inputs"}], 
                    "]"}], "]"}], ".", 
                    RowBox[{
                    "DualNumbers`Private`args", "\[LeftDoubleBracket]", 
                    RowBox[{"DualNumbers`Private`dualPos", ",", "2"}], 
                    "\[RightDoubleBracket]"}]}]}], "]"}], "/;", 
                    RowBox[{
                    "ListQ", "[", "DualNumbers`Private`dlist", "]"}]}]}], 
                    "]"}]}], "]"}], "/;", 
                    RowBox[{
                    RowBox[{"Length", "[", "DualNumbers`Private`args", "]"}], 
                    "===", "DualNumbers`Private`n"}]}]}], "]"}]}]}], "]"}]}]},
                    {
                    RowBox[{
                    RowBox[{"AddDualHandling", "[", 
                    RowBox[{
                    "DualNumbers`Private`f_", ",", "DualNumbers`Private`g_"}],
                     "]"}], ":=", 
                    RowBox[{"AddDualHandling", "[", 
                    RowBox[{"DualNumbers`Private`f", ",", 
                    RowBox[{"{", "DualNumbers`Private`g", "}"}]}], "]"}]}]}
                    },
                    DefaultBaseStyle->"Column",
                    GridBoxAlignment->{"Columns" -> {{Left}}},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]},
                  {
                   TagBox[
                    TooltipBox[
                    
                    StyleBox["\<\" Default Definitions\"\>", 
                    "InformationRowLabel",
                    StripOnInput->False],
                    "\"DefaultValues\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "DefaultValues", "Tooltip"]& ], 
                   InterpretationBox[GridBox[{
                    {
                    RowBox[{
                    RowBox[{
                    "SyntaxInformation", "[", "AddDualHandling", "]"}], "=", 
                    RowBox[{"{", 
                    RowBox[{"\<\"ArgumentsPattern\"\>", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"_", ",", "_"}], "}"}]}], "}"}]}]}
                    },
                    BaselinePosition->{Baseline, {1, 1}},
                    
                    GridBoxAlignment->{
                    "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}],
                    
                    ColumnForm[{
                    SyntaxInformation[DualNumbers`AddDualHandling] = {
                    "ArgumentsPattern" -> {
                    Blank[], 
                    Blank[]}}}],
                    Editable->False]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Full Name\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"FullName\"",
                    TooltipStyle->"TextStyling"],
                    
                    Annotation[#, "FullName", 
                    "Tooltip"]& ], "\<\"DualNumbers`AddDualHandling\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {Right, Left}},
                 GridBoxDividers->None,
                 GridBoxItemSize->{"Columns" -> {Automatic, Automatic}},
                 GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.5599999999999999]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}], "DialogStyle",
                StripOnInput->False],
               DynamicModuleValues:>{}]}
            },
            DefaultBaseStyle->"Column",
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.5599999999999999]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[3.6]}, 
                Offset[0.2]}}],
           FrameMargins->6], ""},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpener"]], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpenerHot"]]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, False],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"], False->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"\\!\\(\\*RowBox[{\\\"AddDualHandling\\\", \
\\\"[\\\", RowBox[{StyleBox[\\\"f\\\", \\\"TI\\\"], \\\",\\\",  RowBox[{\\\"{\
\\\", RowBox[{StyleBox[SubscriptBox[\\\"f\\\", StyleBox[\\\"1\\\", \
\\\"TR\\\"]], \\\"TI\\\"], \\\",\\\",  StyleBox[\\\"\[Ellipsis]\\\", \\\"TR\\\
\"], \\\",\\\",  StyleBox[SubscriptBox[\\\"f\\\", StyleBox[\\\"n\\\", \
\\\"TI\\\"]], \\\"TI\\\"]}], \\\"}\\\"}]}], \\\"]\\\"}]\\) specifies \
derivatives for \\!\\(\\*StyleBox[\\\"f\\\", \\\"TI\\\"]\\) to use with Dual \
numbers when called with \\!\\(\\*StyleBox[\\\"n\\\", \\\"TI\\\"]\\) \
arguments.\\n\\!\\(\\*RowBox[{\\\"AddDualHandling\\\", \\\"[\\\", \
RowBox[{StyleBox[\\\"f\\\", \\\"TI\\\"], \\\",\\\",  StyleBox[\\\"n\\\", \
\\\"TI\\\"]}], \\\"]\\\"}]\\) uses Derivative to infer derivatives of \
\\!\\(\\*StyleBox[\\\"f\\\", \\\"TI\\\"]\\) for when \
\\!\\(\\*StyleBox[\\\"f\\\", \\\"TI\\\"]\\) is called with $n \
arguments.\\n\\!\\(\\*RowBox[{\\\"AddDualHandling\\\", \\\"[\\\", \
RowBox[{StyleBox[\\\"f\\\", \\\"TI\\\"], \\\",\\\",  RowBox[{\\\"{\\\", \
RowBox[{StyleBox[SubscriptBox[\\\"n\\\", StyleBox[\\\"1\\\", \\\"TR\\\"]], \\\
\"TI\\\"], \\\",\\\",  StyleBox[SubscriptBox[\\\"n\\\", StyleBox[\\\"2\\\", \
\\\"TR\\\"]], \\\"TI\\\"], \\\",\\\",  StyleBox[\\\"\[Ellipsis]\\\", \\\"TR\\\
\"]}], \\\"}\\\"}]}], \\\"]\\\"}]\\) uses Derivative to infer derivatives of \
\\!\\(\\*StyleBox[\\\"f\\\", \\\"TI\\\"]\\) for when \
\\!\\(\\*StyleBox[\\\"f\\\", \\\"TI\\\"]\\) is called with \
\\!\\(\\*StyleBox[SubscriptBox[\\\"n\\\", StyleBox[\\\"1\\\", \\\"TR\\\"]], \
\\\"TI\\\"]\\), \\!\\(\\*StyleBox[SubscriptBox[\\\"n\\\", StyleBox[\\\"2\\\", \
\\\"TR\\\"]], \\\"TI\\\"]\\), \[Ellipsis] arguments.\"\>", 
             "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"],
               ImageSizeCache->{12., {3., 9.}}], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpenerHot"],
               ImageSizeCache->{12., {3., 9.}}]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, True],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}, Dynamic[System`InformationDump`open$$],
      BaselinePosition->Baseline,
      FrameMargins->0,
      ImageSize->Automatic],
     DynamicModuleValues:>{}],
    BaseStyle->"InformationGridFrame",
    StripOnInput->False], "InformationGridPlain",
   StripOnInput->False],
  InformationData[
   Association[
   "ObjectType" -> "Symbol", "Usage" -> 
    "\!\(\*RowBox[{\"AddDualHandling\", \"[\", RowBox[{StyleBox[\"f\", \
\"TI\"], \",\",  RowBox[{\"{\", RowBox[{StyleBox[SubscriptBox[\"f\", \
StyleBox[\"1\", \"TR\"]], \"TI\"], \",\",  StyleBox[\"\[Ellipsis]\", \"TR\"], \
\",\",  StyleBox[SubscriptBox[\"f\", StyleBox[\"n\", \"TI\"]], \"TI\"]}], \"}\
\"}]}], \"]\"}]\) specifies derivatives for \!\(\*StyleBox[\"f\", \"TI\"]\) \
to use with Dual numbers when called with \!\(\*StyleBox[\"n\", \"TI\"]\) \
arguments.\n\!\(\*RowBox[{\"AddDualHandling\", \"[\", RowBox[{StyleBox[\"f\", \
\"TI\"], \",\",  StyleBox[\"n\", \"TI\"]}], \"]\"}]\) uses Derivative to \
infer derivatives of \!\(\*StyleBox[\"f\", \"TI\"]\) for when \!\(\*StyleBox[\
\"f\", \"TI\"]\) is called with $n arguments.\n\
\!\(\*RowBox[{\"AddDualHandling\", \"[\", RowBox[{StyleBox[\"f\", \"TI\"], \
\",\",  RowBox[{\"{\", RowBox[{StyleBox[SubscriptBox[\"n\", StyleBox[\"1\", \
\"TR\"]], \"TI\"], \",\",  StyleBox[SubscriptBox[\"n\", StyleBox[\"2\", \
\"TR\"]], \"TI\"], \",\",  StyleBox[\"\[Ellipsis]\", \"TR\"]}], \"}\"}]}], \
\"]\"}]\) uses Derivative to infer derivatives of \!\(\*StyleBox[\"f\", \
\"TI\"]\) for when \!\(\*StyleBox[\"f\", \"TI\"]\) is called with \
\!\(\*StyleBox[SubscriptBox[\"n\", StyleBox[\"1\", \"TR\"]], \"TI\"]\), \
\!\(\*StyleBox[SubscriptBox[\"n\", StyleBox[\"2\", \"TR\"]], \"TI\"]\), \
\[Ellipsis] arguments.", "Documentation" -> None, "OwnValues" -> None, 
    "UpValues" -> None, "DownValues" -> 
    Information`InformationValueForm[
     DownValues, DualNumbers`AddDualHandling, {DualNumbers`AddDualHandling[
         Pattern[DualNumbers`Private`f, 
          Blank[]], 
         PatternTest[
          Pattern[DualNumbers`Private`n, 
           Blank[Integer]], Positive]] :> 
       DualNumbers`AddDualHandling[DualNumbers`Private`f, 
         Apply[Derivative[
           SlotSequence[1]][DualNumbers`Private`f]& , 
          IdentityMatrix[DualNumbers`Private`n], {1}]], 
       DualNumbers`AddDualHandling[
         Pattern[DualNumbers`Private`f, 
          Blank[]], 
         Pattern[DualNumbers`Private`nList, {
           PatternTest[
            BlankSequence[Integer], Positive]}]] :> 
       Scan[DualNumbers`AddDualHandling[DualNumbers`Private`f, #]& , 
         DualNumbers`Private`nList], DualNumbers`AddDualHandling[
         Pattern[DualNumbers`Private`f, 
          Blank[]], 
         Pattern[DualNumbers`Private`derivatives, 
          Blank[List]]] :> 
       With[{DualNumbers`Private`n = Length[DualNumbers`Private`derivatives]}, 
         TagSetDelayed[DualNumbers`Dual, 
          DualNumbers`Private`f[
           Pattern[DualNumbers`Private`first, 
            BlankNullSequence[]], 
           Pattern[DualNumbers`Private`d, 
            Blank[DualNumbers`Dual]], 
           Pattern[DualNumbers`Private`rest, 
            BlankNullSequence[]]], 
          
          With[{DualNumbers`Private`args = {
             DualNumbers`Private`first, DualNumbers`Private`d, 
              DualNumbers`Private`rest}}, 
           Condition[
            With[{DualNumbers`Private`dualPos = Flatten[
                DualNumbers`Private`listPosition[
                DualNumbers`Private`args, DualNumbers`Private`dualPatt]], 
              DualNumbers`Private`inputs = 
              DualNumbers`Private`std[DualNumbers`Private`args]}, 
             
             With[{DualNumbers`Private`dlist = 
               Part[DualNumbers`Private`derivatives, 
                 DualNumbers`Private`dualPos]}, 
              Condition[
               DualNumbers`Dual[
                Apply[DualNumbers`Private`f, DualNumbers`Private`inputs], 
                Dot[
                 Through[
                  DualNumbers`Private`dlist[
                   Apply[Sequence, DualNumbers`Private`inputs]]], 
                 Part[
                 DualNumbers`Private`args, DualNumbers`Private`dualPos, 2]]], 
               ListQ[DualNumbers`Private`dlist]]]], 
            Length[DualNumbers`Private`args] === DualNumbers`Private`n]]]], 
       DualNumbers`AddDualHandling[
         Pattern[DualNumbers`Private`f, 
          Blank[]], 
         Pattern[DualNumbers`Private`g, 
          Blank[]]] :> 
       DualNumbers`AddDualHandling[
        DualNumbers`Private`f, {DualNumbers`Private`g}]}], "SubValues" -> 
    None, "DefaultValues" -> 
    Information`InformationValueForm[
     DefaultValues, DualNumbers`AddDualHandling, {
      SyntaxInformation[DualNumbers`AddDualHandling] -> {"ArgumentsPattern" -> {
           Blank[], 
           Blank[]}}}], "NValues" -> None, "FormatValues" -> None, "Options" -> 
    None, "Attributes" -> {}, "FullName" -> "DualNumbers`AddDualHandling"], 
   False]]], "Output",
 CellLabel->"Out[128]=",ExpressionUUID->"22da4791-3fde-48b1-b5c4-908d10e06c71"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Symbolic manipulation of dual numbers", \
"Subsubsection",ExpressionUUID->"643a1f25-ba12-47c8-bcbd-35666c34f86b"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"?", "\[CurlyEpsilon]"}], "\[IndentingNewLine]", 
 RowBox[{"?", "DualExpand"}], "\[IndentingNewLine]", 
 RowBox[{"?", "DualFactor"}], "\[IndentingNewLine]", 
 RowBox[{"?", "DualSimplify"}], "\[IndentingNewLine]"}], "Input",
 CellLabel->"In[45]:=",ExpressionUUID->"7ea40ed3-fe9a-4c7c-8a93-08056a9f06a5"],

Cell[BoxData[
 InterpretationBox[
  StyleBox[
   FrameBox[
    DynamicModuleBox[{System`InformationDump`open$$ = False, 
     System`InformationDump`mouseOver$$ = False}, 
     PaneSelectorBox[{True->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False,
             BaseStyle -> None],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"\[CurlyEpsilon] is an inactive form of Dual[0, 1] that \
can be used for algebraic manipulation.\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          PaneBox[GridBox[{
             {
              
              DynamicModuleBox[{System`InformationDump`open$$ = {
               False, False, False, False, False, False, False, False, False, 
                False, False, False}}, 
               StyleBox[GridBox[{
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Attributes\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Attributes\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Attributes", "Tooltip"]& ], 
                   RowBox[{"{", "Protected", "}"}]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Full Name\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"FullName\"",
                    TooltipStyle->"TextStyling"],
                    
                    Annotation[#, "FullName", 
                    "Tooltip"]& ], "\<\"DualNumbers`\[CurlyEpsilon]\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {Right, Left}},
                 GridBoxDividers->None,
                 GridBoxItemSize->{"Columns" -> {Automatic, Automatic}},
                 GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.5599999999999999]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}], "DialogStyle",
                StripOnInput->False],
               DynamicModuleValues:>{}]}
            },
            DefaultBaseStyle->"Column",
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.5599999999999999]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[3.6]}, 
                Offset[0.2]}}],
           FrameMargins->6], ""},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpener"]], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpenerHot"]]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, False],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"], False->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"\[CurlyEpsilon] is an inactive form of Dual[0, 1] that \
can be used for algebraic manipulation.\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"],
               ImageSizeCache->{12., {3., 9.}}], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpenerHot"],
               ImageSizeCache->{12., {3., 9.}}]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, True],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}, Dynamic[System`InformationDump`open$$],
      BaselinePosition->Baseline,
      FrameMargins->0,
      ImageSize->Automatic],
     DynamicModuleValues:>{}],
    BaseStyle->"InformationGridFrame",
    StripOnInput->False], "InformationGridPlain",
   StripOnInput->False],
  InformationData[
   Association[
   "ObjectType" -> "Symbol", "Usage" -> 
    "\[CurlyEpsilon] is an inactive form of Dual[0, 1] that can be used for \
algebraic manipulation.", "Documentation" -> None, "OwnValues" -> None, 
    "UpValues" -> None, "DownValues" -> None, "SubValues" -> None, 
    "DefaultValues" -> None, "NValues" -> None, "FormatValues" -> None, 
    "Options" -> None, "Attributes" -> {Protected}, "FullName" -> 
    "DualNumbers`\[CurlyEpsilon]"], False]]], "Output",
 CellLabel->"Out[45]=",ExpressionUUID->"2bb62ef2-fb75-417b-ba06-ca42cc3a6678"],

Cell[BoxData[
 InterpretationBox[
  StyleBox[
   FrameBox[
    DynamicModuleBox[{System`InformationDump`open$$ = False, 
     System`InformationDump`mouseOver$$ = False}, 
     PaneSelectorBox[{True->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False,
             BaseStyle -> None],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"\\!\\(\\*RowBox[{\\\"DualExpand\\\", \\\"[\\\", \
RowBox[{StyleBox[\\\"expr\\\", \\\"TI\\\"]}], \\\"]\\\"}]\\) replaces each \
dual number Dual[\\!\\(\\*StyleBox[\\\"a\\\", \\\"TI\\\"]\\), \
\\!\\(\\*StyleBox[\\\"b\\\", \\\"TI\\\"]\\)] with \
\\!\\(\\*StyleBox[\\\"a\\\", \\\"TI\\\"]\\) + \\!\\(\\*StyleBox[\\\"b\\\", \\\
\"TI\\\"]\\) \[CurlyEpsilon].\\n\\!\\(\\*RowBox[{\\\"DualExpand\\\", \\\"[\\\", \
RowBox[{StyleBox[\\\"expr\\\", \\\"TI\\\"], \\\",\\\",  StyleBox[\\\"eps\\\", \
\\\"TI\\\"]}], \\\"]\\\"}]\\) uses \\!\\(\\*StyleBox[\\\"eps\\\", \\\"TI\\\"]\
\\) instead.\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          PaneBox[GridBox[{
             {
              
              DynamicModuleBox[{System`InformationDump`open$$ = {
               False, False, False, False, False, False, False, False, False, 
                False, False, False}}, 
               StyleBox[GridBox[{
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Definitions\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Definitions\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Definitions", "Tooltip"]& ], GridBox[{
                    {
                    RowBox[{
                    RowBox[{"DualExpand", "[", 
                    RowBox[{"DualNumbers`Private`expr_", ",", 
                    RowBox[{"DualNumbers`Private`eps_", ":", "\[CurlyEpsilon]"}]}],
                     "]"}], ":=", 
                    RowBox[{
                    "DualNumbers`Private`expr", "//.", "\[VeryThinSpace]", 
                    RowBox[{
                    RowBox[{"Dual", "[", 
                    RowBox[{
                    "DualNumbers`Private`a_", ",", "DualNumbers`Private`b_"}],
                     "]"}], "\[RuleDelayed]", 
                    RowBox[{"DualNumbers`Private`a", "+", 
                    RowBox[{
                    "DualNumbers`Private`b", " ", 
                    "DualNumbers`Private`eps"}]}]}]}]}]}
                    },
                    DefaultBaseStyle->"Column",
                    GridBoxAlignment->{"Columns" -> {{Left}}},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]},
                  {
                   TagBox[
                    TooltipBox[
                    
                    StyleBox["\<\" Default Definitions\"\>", 
                    "InformationRowLabel",
                    StripOnInput->False],
                    "\"DefaultValues\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "DefaultValues", "Tooltip"]& ], 
                   InterpretationBox[GridBox[{
                    {
                    RowBox[{
                    RowBox[{"SyntaxInformation", "[", "DualExpand", "]"}], 
                    "=", 
                    RowBox[{"{", 
                    RowBox[{"\<\"ArgumentsPattern\"\>", "\[Rule]", 
                    RowBox[{"{", "__", "}"}]}], "}"}]}]}
                    },
                    BaselinePosition->{Baseline, {1, 1}},
                    
                    GridBoxAlignment->{
                    "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}],
                    
                    ColumnForm[{
                    SyntaxInformation[DualNumbers`DualExpand] = {
                    "ArgumentsPattern" -> {
                    BlankSequence[]}}}],
                    Editable->False]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Full Name\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"FullName\"",
                    TooltipStyle->"TextStyling"],
                    
                    Annotation[#, "FullName", 
                    "Tooltip"]& ], "\<\"DualNumbers`DualExpand\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {Right, Left}},
                 GridBoxDividers->None,
                 GridBoxItemSize->{"Columns" -> {Automatic, Automatic}},
                 GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.5599999999999999]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}], "DialogStyle",
                StripOnInput->False],
               DynamicModuleValues:>{}]}
            },
            DefaultBaseStyle->"Column",
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.5599999999999999]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[3.6]}, 
                Offset[0.2]}}],
           FrameMargins->6], ""},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpener"]], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpenerHot"]]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, False],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"], False->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"\\!\\(\\*RowBox[{\\\"DualExpand\\\", \\\"[\\\", \
RowBox[{StyleBox[\\\"expr\\\", \\\"TI\\\"]}], \\\"]\\\"}]\\) replaces each \
dual number Dual[\\!\\(\\*StyleBox[\\\"a\\\", \\\"TI\\\"]\\), \
\\!\\(\\*StyleBox[\\\"b\\\", \\\"TI\\\"]\\)] with \
\\!\\(\\*StyleBox[\\\"a\\\", \\\"TI\\\"]\\) + \\!\\(\\*StyleBox[\\\"b\\\", \\\
\"TI\\\"]\\) \[CurlyEpsilon].\\n\\!\\(\\*RowBox[{\\\"DualExpand\\\", \\\"[\\\", \
RowBox[{StyleBox[\\\"expr\\\", \\\"TI\\\"], \\\",\\\",  StyleBox[\\\"eps\\\", \
\\\"TI\\\"]}], \\\"]\\\"}]\\) uses \\!\\(\\*StyleBox[\\\"eps\\\", \\\"TI\\\"]\
\\) instead.\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"],
               ImageSizeCache->{12., {3., 9.}}], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpenerHot"],
               ImageSizeCache->{12., {3., 9.}}]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, True],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}, Dynamic[System`InformationDump`open$$],
      BaselinePosition->Baseline,
      FrameMargins->0,
      ImageSize->Automatic],
     DynamicModuleValues:>{}],
    BaseStyle->"InformationGridFrame",
    StripOnInput->False], "InformationGridPlain",
   StripOnInput->False],
  InformationData[
   Association[
   "ObjectType" -> "Symbol", "Usage" -> 
    "\!\(\*RowBox[{\"DualExpand\", \"[\", RowBox[{StyleBox[\"expr\", \
\"TI\"]}], \"]\"}]\) replaces each dual number Dual[\!\(\*StyleBox[\"a\", \
\"TI\"]\), \!\(\*StyleBox[\"b\", \"TI\"]\)] with \!\(\*StyleBox[\"a\", \
\"TI\"]\) + \!\(\*StyleBox[\"b\", \"TI\"]\) \[CurlyEpsilon].\n\
\!\(\*RowBox[{\"DualExpand\", \"[\", RowBox[{StyleBox[\"expr\", \"TI\"], \
\",\",  StyleBox[\"eps\", \"TI\"]}], \"]\"}]\) uses \!\(\*StyleBox[\"eps\", \
\"TI\"]\) instead.", "Documentation" -> None, "OwnValues" -> None, "UpValues" -> 
    None, "DownValues" -> 
    Information`InformationValueForm[
     DownValues, DualNumbers`DualExpand, {DualNumbers`DualExpand[
         Pattern[DualNumbers`Private`expr, 
          Blank[]], 
         Optional[
          Pattern[DualNumbers`Private`eps, 
           Blank[]], DualNumbers`\[CurlyEpsilon]]] :> 
       ReplaceRepeated[DualNumbers`Private`expr, DualNumbers`Dual[
           Pattern[DualNumbers`Private`a, 
            Blank[]], 
           Pattern[DualNumbers`Private`b, 
            Blank[]]] :> 
         DualNumbers`Private`a + 
          DualNumbers`Private`b DualNumbers`Private`eps]}], "SubValues" -> 
    None, "DefaultValues" -> 
    Information`InformationValueForm[
     DefaultValues, DualNumbers`DualExpand, {
      SyntaxInformation[DualNumbers`DualExpand] -> {"ArgumentsPattern" -> {
           BlankSequence[]}}}], "NValues" -> None, "FormatValues" -> None, 
    "Options" -> None, "Attributes" -> {}, "FullName" -> 
    "DualNumbers`DualExpand"], False]]], "Output",
 CellLabel->"Out[46]=",ExpressionUUID->"f0ac10e0-d13d-4a49-a8e2-a5568241e79b"],

Cell[BoxData[
 InterpretationBox[
  StyleBox[
   FrameBox[
    DynamicModuleBox[{System`InformationDump`open$$ = False, 
     System`InformationDump`mouseOver$$ = False}, 
     PaneSelectorBox[{True->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False,
             BaseStyle -> None],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"\\!\\(\\*RowBox[{\\\"DualFactor\\\", \\\"[\\\", \
RowBox[{StyleBox[\\\"expr\\\", \\\"TI\\\"]}], \\\"]\\\"}]\\) replaces \
\[CurlyEpsilon] with Dual[0, 1] in \\!\\(\\*StyleBox[\\\"expr\\\", \\\"TI\\\"]\\).\
\\n\\!\\(\\*RowBox[{\\\"DualFactor\\\", \\\"[\\\", \
RowBox[{StyleBox[\\\"expr\\\", \\\"TI\\\"], \\\",\\\",  StyleBox[\\\"eps\\\", \
\\\"TI\\\"]}], \\\"]\\\"}]\\) uses \\!\\(\\*StyleBox[\\\"eps\\\", \\\"TI\\\"]\
\\) instead.\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          PaneBox[GridBox[{
             {
              
              DynamicModuleBox[{System`InformationDump`open$$ = {
               False, False, False, False, False, False, False, False, False, 
                False, False, False}}, 
               StyleBox[GridBox[{
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Definitions\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Definitions\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Definitions", "Tooltip"]& ], GridBox[{
                    {
                    RowBox[{
                    RowBox[{"DualFactor", "[", 
                    RowBox[{"DualNumbers`Private`expr_", ",", 
                    RowBox[{"DualNumbers`Private`eps_", ":", "\[CurlyEpsilon]"}]}],
                     "]"}], ":=", 
                    RowBox[{
                    "DualNumbers`Private`expr", "//.", "\[VeryThinSpace]", 
                    RowBox[{"DualNumbers`Private`eps", "\[RuleDelayed]", 
                    RowBox[{"Dual", "[", 
                    RowBox[{"0", ",", "1"}], "]"}]}]}]}]}
                    },
                    DefaultBaseStyle->"Column",
                    GridBoxAlignment->{"Columns" -> {{Left}}},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]},
                  {
                   TagBox[
                    TooltipBox[
                    
                    StyleBox["\<\" Default Definitions\"\>", 
                    "InformationRowLabel",
                    StripOnInput->False],
                    "\"DefaultValues\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "DefaultValues", "Tooltip"]& ], 
                   InterpretationBox[GridBox[{
                    {
                    RowBox[{
                    RowBox[{"SyntaxInformation", "[", "DualFactor", "]"}], 
                    "=", 
                    RowBox[{"{", 
                    RowBox[{"\<\"ArgumentsPattern\"\>", "\[Rule]", 
                    RowBox[{"{", "__", "}"}]}], "}"}]}]}
                    },
                    BaselinePosition->{Baseline, {1, 1}},
                    
                    GridBoxAlignment->{
                    "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}],
                    
                    ColumnForm[{
                    SyntaxInformation[DualNumbers`DualFactor] = {
                    "ArgumentsPattern" -> {
                    BlankSequence[]}}}],
                    Editable->False]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Full Name\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"FullName\"",
                    TooltipStyle->"TextStyling"],
                    
                    Annotation[#, "FullName", 
                    "Tooltip"]& ], "\<\"DualNumbers`DualFactor\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {Right, Left}},
                 GridBoxDividers->None,
                 GridBoxItemSize->{"Columns" -> {Automatic, Automatic}},
                 GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.5599999999999999]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}], "DialogStyle",
                StripOnInput->False],
               DynamicModuleValues:>{}]}
            },
            DefaultBaseStyle->"Column",
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.5599999999999999]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[3.6]}, 
                Offset[0.2]}}],
           FrameMargins->6], ""},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpener"]], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpenerHot"]]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, False],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"], False->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"\\!\\(\\*RowBox[{\\\"DualFactor\\\", \\\"[\\\", \
RowBox[{StyleBox[\\\"expr\\\", \\\"TI\\\"]}], \\\"]\\\"}]\\) replaces \
\[CurlyEpsilon] with Dual[0, 1] in \\!\\(\\*StyleBox[\\\"expr\\\", \\\"TI\\\"]\\).\
\\n\\!\\(\\*RowBox[{\\\"DualFactor\\\", \\\"[\\\", \
RowBox[{StyleBox[\\\"expr\\\", \\\"TI\\\"], \\\",\\\",  StyleBox[\\\"eps\\\", \
\\\"TI\\\"]}], \\\"]\\\"}]\\) uses \\!\\(\\*StyleBox[\\\"eps\\\", \\\"TI\\\"]\
\\) instead.\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"],
               ImageSizeCache->{12., {3., 9.}}], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpenerHot"],
               ImageSizeCache->{12., {3., 9.}}]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, True],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}, Dynamic[System`InformationDump`open$$],
      BaselinePosition->Baseline,
      FrameMargins->0,
      ImageSize->Automatic],
     DynamicModuleValues:>{}],
    BaseStyle->"InformationGridFrame",
    StripOnInput->False], "InformationGridPlain",
   StripOnInput->False],
  InformationData[
   Association[
   "ObjectType" -> "Symbol", "Usage" -> 
    "\!\(\*RowBox[{\"DualFactor\", \"[\", RowBox[{StyleBox[\"expr\", \
\"TI\"]}], \"]\"}]\) replaces \[CurlyEpsilon] with Dual[0, 1] in \
\!\(\*StyleBox[\"expr\", \"TI\"]\).\n\!\(\*RowBox[{\"DualFactor\", \"[\", \
RowBox[{StyleBox[\"expr\", \"TI\"], \",\",  StyleBox[\"eps\", \"TI\"]}], \
\"]\"}]\) uses \!\(\*StyleBox[\"eps\", \"TI\"]\) instead.", "Documentation" -> 
    None, "OwnValues" -> None, "UpValues" -> None, "DownValues" -> 
    Information`InformationValueForm[
     DownValues, DualNumbers`DualFactor, {DualNumbers`DualFactor[
         Pattern[DualNumbers`Private`expr, 
          Blank[]], 
         Optional[
          Pattern[DualNumbers`Private`eps, 
           Blank[]], DualNumbers`\[CurlyEpsilon]]] :> 
       ReplaceRepeated[
        DualNumbers`Private`expr, DualNumbers`Private`eps :> 
         DualNumbers`Dual[0, 1]]}], "SubValues" -> None, "DefaultValues" -> 
    Information`InformationValueForm[
     DefaultValues, DualNumbers`DualFactor, {
      SyntaxInformation[DualNumbers`DualFactor] -> {"ArgumentsPattern" -> {
           BlankSequence[]}}}], "NValues" -> None, "FormatValues" -> None, 
    "Options" -> None, "Attributes" -> {}, "FullName" -> 
    "DualNumbers`DualFactor"], False]]], "Output",
 CellLabel->"Out[47]=",ExpressionUUID->"f6038bb2-5c6e-4812-bd47-92254cb91efb"],

Cell[BoxData[
 InterpretationBox[
  StyleBox[
   FrameBox[
    DynamicModuleBox[{System`InformationDump`open$$ = False, 
     System`InformationDump`mouseOver$$ = False}, 
     PaneSelectorBox[{True->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False,
             BaseStyle -> None],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"\\!\\(\\*RowBox[{\\\"DualSimplify\\\", \\\"[\\\", \
RowBox[{StyleBox[\\\"expr\\\", \\\"TI\\\"]}], \\\"]\\\"}]\\) expands \
\\!\\(\\*StyleBox[\\\"expr\\\", \\\"TI\\\"]\\) around \[CurlyEpsilon] = 0, keeping \
only the 0th and 1st order terms.\\n\\!\\(\\*RowBox[{\\\"DualSimplify\\\", \\\
\"[\\\", RowBox[{StyleBox[\\\"expr\\\", \\\"TI\\\"], \\\",\\\",  \
StyleBox[\\\"eps\\\", \\\"TI\\\"]}], \\\"]\\\"}]\\) uses \\!\\(\\*StyleBox[\\\
\"eps\\\", \\\"TI\\\"]\\) as symbol for the dual unit.\"\>", 
             "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          PaneBox[GridBox[{
             {
              
              DynamicModuleBox[{System`InformationDump`open$$ = {
               False, False, False, False, False, False, False, False, False, 
                False, False, False}}, 
               StyleBox[GridBox[{
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Definitions\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Definitions\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Definitions", "Tooltip"]& ], GridBox[{
                    {
                    RowBox[{
                    RowBox[{"DualSimplify", "[", 
                    RowBox[{"DualNumbers`Private`expr_", ",", 
                    RowBox[{"DualNumbers`Private`eps_", ":", "\[CurlyEpsilon]"}]}],
                     "]"}], ":=", 
                    RowBox[{"Normal", "[", 
                    RowBox[{"Series", "[", 
                    RowBox[{"DualNumbers`Private`expr", ",", 
                    RowBox[{"{", 
                    RowBox[{"DualNumbers`Private`eps", ",", "0", ",", "1"}], 
                    "}"}]}], "]"}], "]"}]}]}
                    },
                    DefaultBaseStyle->"Column",
                    GridBoxAlignment->{"Columns" -> {{Left}}},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]},
                  {
                   TagBox[
                    TooltipBox[
                    
                    StyleBox["\<\" Default Definitions\"\>", 
                    "InformationRowLabel",
                    StripOnInput->False],
                    "\"DefaultValues\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "DefaultValues", "Tooltip"]& ], 
                   InterpretationBox[GridBox[{
                    {
                    RowBox[{
                    RowBox[{"SyntaxInformation", "[", "DualSimplify", "]"}], 
                    "=", 
                    RowBox[{"{", 
                    RowBox[{"\<\"ArgumentsPattern\"\>", "\[Rule]", 
                    RowBox[{"{", "_", "}"}]}], "}"}]}]}
                    },
                    BaselinePosition->{Baseline, {1, 1}},
                    
                    GridBoxAlignment->{
                    "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}],
                    
                    ColumnForm[{
                    SyntaxInformation[DualNumbers`DualSimplify] = {
                    "ArgumentsPattern" -> {
                    Blank[]}}}],
                    Editable->False]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Full Name\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"FullName\"",
                    TooltipStyle->"TextStyling"],
                    
                    Annotation[#, "FullName", 
                    "Tooltip"]& ], "\<\"DualNumbers`DualSimplify\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {Right, Left}},
                 GridBoxDividers->None,
                 GridBoxItemSize->{"Columns" -> {Automatic, Automatic}},
                 GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.5599999999999999]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}], "DialogStyle",
                StripOnInput->False],
               DynamicModuleValues:>{}]}
            },
            DefaultBaseStyle->"Column",
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.5599999999999999]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[3.6]}, 
                Offset[0.2]}}],
           FrameMargins->6], ""},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpener"]], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpenerHot"]]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, False],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"], False->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"\\!\\(\\*RowBox[{\\\"DualSimplify\\\", \\\"[\\\", \
RowBox[{StyleBox[\\\"expr\\\", \\\"TI\\\"]}], \\\"]\\\"}]\\) expands \
\\!\\(\\*StyleBox[\\\"expr\\\", \\\"TI\\\"]\\) around \[CurlyEpsilon] = 0, keeping \
only the 0th and 1st order terms.\\n\\!\\(\\*RowBox[{\\\"DualSimplify\\\", \\\
\"[\\\", RowBox[{StyleBox[\\\"expr\\\", \\\"TI\\\"], \\\",\\\",  \
StyleBox[\\\"eps\\\", \\\"TI\\\"]}], \\\"]\\\"}]\\) uses \\!\\(\\*StyleBox[\\\
\"eps\\\", \\\"TI\\\"]\\) as symbol for the dual unit.\"\>", 
             "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"],
               ImageSizeCache->{12., {3., 9.}}], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpenerHot"],
               ImageSizeCache->{12., {3., 9.}}]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, True],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}, Dynamic[System`InformationDump`open$$],
      BaselinePosition->Baseline,
      FrameMargins->0,
      ImageSize->Automatic],
     DynamicModuleValues:>{}],
    BaseStyle->"InformationGridFrame",
    StripOnInput->False], "InformationGridPlain",
   StripOnInput->False],
  InformationData[
   Association[
   "ObjectType" -> "Symbol", "Usage" -> 
    "\!\(\*RowBox[{\"DualSimplify\", \"[\", RowBox[{StyleBox[\"expr\", \
\"TI\"]}], \"]\"}]\) expands \!\(\*StyleBox[\"expr\", \"TI\"]\) around \
\[CurlyEpsilon] = 0, keeping only the 0th and 1st order terms.\n\
\!\(\*RowBox[{\"DualSimplify\", \"[\", RowBox[{StyleBox[\"expr\", \"TI\"], \
\",\",  StyleBox[\"eps\", \"TI\"]}], \"]\"}]\) uses \!\(\*StyleBox[\"eps\", \
\"TI\"]\) as symbol for the dual unit.", "Documentation" -> None, "OwnValues" -> 
    None, "UpValues" -> None, "DownValues" -> 
    Information`InformationValueForm[
     DownValues, DualNumbers`DualSimplify, {DualNumbers`DualSimplify[
         Pattern[DualNumbers`Private`expr, 
          Blank[]], 
         Optional[
          Pattern[DualNumbers`Private`eps, 
           Blank[]], DualNumbers`\[CurlyEpsilon]]] :> Normal[
         Series[DualNumbers`Private`expr, {DualNumbers`Private`eps, 0, 1}]]}],
     "SubValues" -> None, "DefaultValues" -> 
    Information`InformationValueForm[
     DefaultValues, DualNumbers`DualSimplify, {
      SyntaxInformation[DualNumbers`DualSimplify] -> {"ArgumentsPattern" -> {
           Blank[]}}}], "NValues" -> None, "FormatValues" -> None, "Options" -> 
    None, "Attributes" -> {}, "FullName" -> "DualNumbers`DualSimplify"], 
   False]]], "Output",
 CellLabel->"Out[48]=",ExpressionUUID->"bae4113a-87fd-4745-9d3c-ba7c3d9a6a84"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Equation solving and optimization", \
"Subsubsection",ExpressionUUID->"12cf237a-1fd9-4299-b831-4449eda98c2d"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"?", "DualFindRoot"}], "\[IndentingNewLine]", 
 RowBox[{"?", "DualFindMinimum"}], "\[IndentingNewLine]", 
 RowBox[{"?", "DualFindMaximum"}], "\[IndentingNewLine]", 
 RowBox[{"?", "FindDualSolution"}]}], "Input",
 CellLabel->"In[49]:=",ExpressionUUID->"682653f7-3b28-4eeb-976f-b4dedabf2c59"],

Cell[BoxData[
 InterpretationBox[
  StyleBox[
   FrameBox[
    DynamicModuleBox[{System`InformationDump`open$$ = False, 
     System`InformationDump`mouseOver$$ = False}, 
     PaneSelectorBox[{True->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False,
             BaseStyle -> None],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"DualFindRoot works like FindRoot, but allows for \
Dual numbers in the equations.\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          PaneBox[GridBox[{
             {
              
              DynamicModuleBox[{System`InformationDump`open$$ = {
               False, False, False, False, False, False, False, False, False, 
                False, False, False}}, 
               StyleBox[GridBox[{
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Definitions\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Definitions\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Definitions", "Tooltip"]& ], GridBox[{
                    {
                    RowBox[{
                    RowBox[{"DualFindRoot", "[", 
                    RowBox[{"DualNumbers`Private`eq_", ",", 
                    RowBox[{"DualNumbers`Private`spec", ":", 
                    RowBox[{"{", 
                    RowBox[{"_", ",", 
                    RowBox[{"__", "?", "NumericQ"}]}], "}"}]}], ",", 
                    "DualNumbers`Private`rest___"}], "]"}], ":=", 
                    RowBox[{"DualFindRoot", "[", 
                    RowBox[{"DualNumbers`Private`eq", ",", 
                    RowBox[{"{", "DualNumbers`Private`spec", "}"}], ",", 
                    "DualNumbers`Private`rest"}], "]"}]}]},
                    {
                    RowBox[{
                    RowBox[{"DualFindRoot", "[", 
                    RowBox[{"DualNumbers`Private`eqs_", ",", 
                    RowBox[{"DualNumbers`Private`spec", ":", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"_", ",", 
                    RowBox[{"__", "?", "NumericQ"}]}], "}"}], ".."}], "}"}]}],
                     ",", "DualNumbers`Private`rest___"}], "]"}], ":=", 
                    RowBox[{"Module", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"DualNumbers`Private`equations", "=", 
                    RowBox[{
                    "DualNumbers`Private`equationNormalForm", "[", 
                    "DualNumbers`Private`eqs", "]"}]}], ",", 
                    "DualNumbers`Private`stdEqs", ",", 
                    "DualNumbers`Private`stdSol"}], "}"}], ",", 
                    RowBox[{
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    "FailureQ", "[", "DualNumbers`Private`equations", "]"}], 
                    ",", 
                    RowBox[{"Return", "[", "$Failed", "]"}]}], "]"}], ";", 
                    RowBox[{"DualNumbers`Private`stdEqs", "=", 
                    RowBox[{"Apply", "[", 
                    RowBox[{
                    "Subtract", ",", "DualNumbers`Private`equations", ",", 
                    RowBox[{"{", "1", "}"}]}], "]"}]}], ";", 
                    RowBox[{"DualNumbers`Private`stdEqs", "=", 
                    RowBox[{"StandardAll", "[", 
                    RowBox[{
                    "DualFactor", "[", "DualNumbers`Private`stdEqs", "]"}], 
                    "]"}]}], ";", 
                    RowBox[{"DualNumbers`Private`stdSol", "=", 
                    RowBox[{"FindRoot", "[", 
                    RowBox[{
                    "DualNumbers`Private`stdEqs", ",", 
                    "DualNumbers`Private`spec", ",", 
                    "DualNumbers`Private`rest"}], "]"}]}], ";", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"!", 
                    RowBox[{"MatchQ", "[", 
                    RowBox[{"DualNumbers`Private`stdSol", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"_", "\[Rule]", 
                    RowBox[{"_", "?", "NumericQ"}]}], ")"}], ".."}], "}"}]}], 
                    "]"}]}], ",", 
                    RowBox[{"Return", "[", "$Failed", "]"}]}], "]"}], ";", 
                    RowBox[{"Quiet", "[", 
                    RowBox[{
                    RowBox[{"DualNumbers`Private`firstSol", "[", 
                    RowBox[{"FindDualSolution", "[", 
                    RowBox[{
                    "DualNumbers`Private`equations", ",", 
                    "DualNumbers`Private`stdSol"}], "]"}], "]"}], ",", 
                    RowBox[{"{", 
                    StyleBox[
                    RowBox[{"FindDualSolution", "::", "nonsol"}], 
                    "MessageName"], "}"}]}], "]"}]}]}], "]"}]}]}
                    },
                    DefaultBaseStyle->"Column",
                    GridBoxAlignment->{"Columns" -> {{Left}}},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Full Name\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"FullName\"",
                    TooltipStyle->"TextStyling"],
                    
                    Annotation[#, "FullName", 
                    "Tooltip"]& ], "\<\"DualNumbers`DualFindRoot\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {Right, Left}},
                 GridBoxDividers->None,
                 GridBoxItemSize->{"Columns" -> {Automatic, Automatic}},
                 GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.5599999999999999]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}], "DialogStyle",
                StripOnInput->False],
               DynamicModuleValues:>{}]}
            },
            DefaultBaseStyle->"Column",
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.5599999999999999]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[3.6]}, 
                Offset[0.2]}}],
           FrameMargins->6], ""},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpener"]], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpenerHot"]]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, False],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"], False->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"DualFindRoot works like FindRoot, but allows for \
Dual numbers in the equations.\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"],
               ImageSizeCache->{12., {3., 9.}}], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpenerHot"],
               ImageSizeCache->{12., {3., 9.}}]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, True],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}, Dynamic[System`InformationDump`open$$],
      BaselinePosition->Baseline,
      FrameMargins->0,
      ImageSize->Automatic],
     DynamicModuleValues:>{}],
    BaseStyle->"InformationGridFrame",
    StripOnInput->False], "InformationGridPlain",
   StripOnInput->False],
  InformationData[
   Association[
   "ObjectType" -> "Symbol", "Usage" -> 
    "DualFindRoot works like FindRoot, but allows for Dual numbers in the \
equations.", "Documentation" -> None, "OwnValues" -> None, "UpValues" -> None,
     "DownValues" -> 
    Information`InformationValueForm[
     DownValues, DualNumbers`DualFindRoot, {DualNumbers`DualFindRoot[
         Pattern[DualNumbers`Private`eq, 
          Blank[]], 
         Pattern[DualNumbers`Private`spec, {
           Blank[], 
           PatternTest[
            BlankSequence[], NumericQ]}], 
         Pattern[DualNumbers`Private`rest, 
          BlankNullSequence[]]] :> 
       DualNumbers`DualFindRoot[
        DualNumbers`Private`eq, {DualNumbers`Private`spec}, 
         DualNumbers`Private`rest], DualNumbers`DualFindRoot[
         Pattern[DualNumbers`Private`eqs, 
          Blank[]], 
         Pattern[DualNumbers`Private`spec, {
           Repeated[{
             Blank[], 
             PatternTest[
              BlankSequence[], NumericQ]}]}], 
         Pattern[DualNumbers`Private`rest, 
          BlankNullSequence[]]] :> 
       Module[{DualNumbers`Private`equations = 
          DualNumbers`Private`equationNormalForm[DualNumbers`Private`eqs], 
          DualNumbers`Private`stdEqs, DualNumbers`Private`stdSol}, If[
           FailureQ[DualNumbers`Private`equations], 
           Return[$Failed]]; 
         DualNumbers`Private`stdEqs = 
          Apply[Subtract, DualNumbers`Private`equations, {1}]; 
         DualNumbers`Private`stdEqs = DualNumbers`StandardAll[
            DualNumbers`DualFactor[DualNumbers`Private`stdEqs]]; 
         DualNumbers`Private`stdSol = 
          FindRoot[
           DualNumbers`Private`stdEqs, DualNumbers`Private`spec, 
            DualNumbers`Private`rest]; If[
           Not[
            MatchQ[DualNumbers`Private`stdSol, {
              Repeated[Blank[] -> PatternTest[
                 Blank[], NumericQ]]}]], 
           Return[$Failed]]; Quiet[
           DualNumbers`Private`firstSol[
            DualNumbers`FindDualSolution[
            DualNumbers`Private`equations, DualNumbers`Private`stdSol]], {
            MessageName[DualNumbers`FindDualSolution, "nonsol"]}]]}], 
    "SubValues" -> None, "DefaultValues" -> None, "NValues" -> None, 
    "FormatValues" -> None, "Options" -> None, "Attributes" -> {}, "FullName" -> 
    "DualNumbers`DualFindRoot"], False]]], "Output",
 CellLabel->"Out[49]=",ExpressionUUID->"40042583-541f-4b6d-905b-593ee0190a8e"],

Cell[BoxData[
 InterpretationBox[
  StyleBox[
   FrameBox[
    DynamicModuleBox[{System`InformationDump`open$$ = False, 
     System`InformationDump`mouseOver$$ = False}, 
     PaneSelectorBox[{True->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False,
             BaseStyle -> None],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"DualFindMinimum works like FindMinimum, but allows \
for Dual numbers in the objective function.\\nDualFindMinimum does not \
support constraints on the independent variables.\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          PaneBox[GridBox[{
             {
              
              DynamicModuleBox[{System`InformationDump`open$$ = {
               False, False, False, False, False, False, False, False, False, 
                False, False, False}}, 
               StyleBox[GridBox[{
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Definitions\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Definitions\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Definitions", "Tooltip"]& ], GridBox[{
                    {
                    RowBox[{
                    RowBox[{"DualFindMinimum", "[", 
                    RowBox[{"DualNumbers`Private`eq$_", ",", 
                    RowBox[{"DualNumbers`Private`spec$", ":", 
                    RowBox[{"{", 
                    RowBox[{"_", ",", 
                    RowBox[{"__", "?", "NumericQ"}]}], "}"}]}], ",", 
                    "DualNumbers`Private`rest$___"}], "]"}], ":=", 
                    RowBox[{"DualFindMinimum", "[", 
                    RowBox[{"DualNumbers`Private`eq$", ",", 
                    RowBox[{"{", "DualNumbers`Private`spec$", "}"}], ",", 
                    "DualNumbers`Private`rest$"}], "]"}]}]},
                    {
                    RowBox[{
                    RowBox[{"DualFindMinimum", "[", 
                    RowBox[{
                    RowBox[{"DualNumbers`Private`fun$", ":", 
                    RowBox[{"Except", "[", "_List", "]"}]}], ",", 
                    RowBox[{"DualNumbers`Private`spec$", ":", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"_", ",", 
                    RowBox[{"__", "?", "NumericQ"}]}], "}"}], ".."}], "}"}]}],
                     ",", "DualNumbers`Private`rest$___"}], "]"}], ":=", 
                    RowBox[{"Module", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    "DualNumbers`Private`stdfun$", ",", 
                    "DualNumbers`Private`stdSol$", ",", 
                    RowBox[{"DualNumbers`Private`vars$", "=", 
                    RowBox[{
                    "DualNumbers`Private`spec$", "\[LeftDoubleBracket]", 
                    RowBox[{"All", ",", "1"}], "\[RightDoubleBracket]"}]}], 
                    ",", "DualNumbers`Private`dualSol$"}], "}"}], ",", 
                    RowBox[{
                    RowBox[{"DualNumbers`Private`stdfun$", "=", 
                    RowBox[{"StandardAll", "[", 
                    RowBox[{
                    "DualFactor", "[", "DualNumbers`Private`fun$", "]"}], 
                    "]"}]}], ";", 
                    RowBox[{"DualNumbers`Private`stdSol$", "=", 
                    RowBox[{"FindMinimum", "[", 
                    RowBox[{
                    "DualNumbers`Private`stdfun$", ",", 
                    "DualNumbers`Private`spec$", ",", 
                    "DualNumbers`Private`rest$"}], "]"}]}], ";", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"!", 
                    RowBox[{"MatchQ", "[", 
                    RowBox[{"DualNumbers`Private`stdSol$", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"_", "?", "NumericQ"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"_", "\[Rule]", 
                    RowBox[{"_", "?", "NumericQ"}]}], ")"}], ".."}], "}"}]}], 
                    "}"}]}], "]"}]}], ",", 
                    RowBox[{"Return", "[", "$Failed", "]"}]}], "]"}], ";", 
                    RowBox[{"DualNumbers`Private`dualSol$", "=", 
                    RowBox[{"Quiet", "[", 
                    RowBox[{
                    RowBox[{"DualNumbers`Private`firstSol", "[", 
                    RowBox[{"FindDualSolution", "[", 
                    RowBox[{
                    RowBox[{
                    SubscriptBox["\[PartialD]", 
                    RowBox[{"{", "DualNumbers`Private`vars$", "}"}]], 
                    "DualNumbers`Private`fun$"}], ",", 
                    RowBox[{
                    "Last", "[", "DualNumbers`Private`stdSol$", "]"}]}], 
                    "]"}], "]"}], ",", 
                    RowBox[{"{", 
                    StyleBox[
                    RowBox[{"FindDualSolution", "::", "nonsol"}], 
                    "MessageName"], "}"}]}], "]"}]}], ";", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"MatchQ", "[", 
                    RowBox[{"DualNumbers`Private`dualSol$", ",", 
                    RowBox[{"{", "__Rule", "}"}]}], "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    "DualNumbers`Private`fun$", "/.", "\[VeryThinSpace]", 
                    "DualNumbers`Private`dualSol$"}], ",", 
                    "DualNumbers`Private`dualSol$"}], "}"}], ",", 
                    "DualNumbers`Private`dualSol$"}], "]"}]}]}], "]"}]}]}
                    },
                    DefaultBaseStyle->"Column",
                    GridBoxAlignment->{"Columns" -> {{Left}}},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]},
                  {
                   TagBox[
                    TooltipBox[
                    
                    StyleBox["\<\" Default Definitions\"\>", 
                    "InformationRowLabel",
                    StripOnInput->False],
                    "\"DefaultValues\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "DefaultValues", "Tooltip"]& ], 
                   InterpretationBox[GridBox[{
                    {
                    RowBox[{
                    RowBox[{
                    "SyntaxInformation", "[", "DualFindMinimum", "]"}], "=", 
                    RowBox[{"{", 
                    RowBox[{"\<\"ArgumentsPattern\"\>", "\[Rule]", 
                    RowBox[{"{", "__", "}"}]}], "}"}]}]}
                    },
                    BaselinePosition->{Baseline, {1, 1}},
                    
                    GridBoxAlignment->{
                    "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}],
                    
                    ColumnForm[{
                    SyntaxInformation[DualNumbers`DualFindMinimum] = {
                    "ArgumentsPattern" -> {
                    BlankSequence[]}}}],
                    Editable->False]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Full Name\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"FullName\"",
                    TooltipStyle->"TextStyling"],
                    
                    Annotation[#, "FullName", 
                    "Tooltip"]& ], "\<\"DualNumbers`DualFindMinimum\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {Right, Left}},
                 GridBoxDividers->None,
                 GridBoxItemSize->{"Columns" -> {Automatic, Automatic}},
                 GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.5599999999999999]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}], "DialogStyle",
                StripOnInput->False],
               DynamicModuleValues:>{}]}
            },
            DefaultBaseStyle->"Column",
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.5599999999999999]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[3.6]}, 
                Offset[0.2]}}],
           FrameMargins->6], ""},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpener"]], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpenerHot"]]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, False],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"], False->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"DualFindMinimum works like FindMinimum, but allows \
for Dual numbers in the objective function.\\nDualFindMinimum does not \
support constraints on the independent variables.\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"],
               ImageSizeCache->{12., {3., 9.}}], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpenerHot"],
               ImageSizeCache->{12., {3., 9.}}]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, True],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}, Dynamic[System`InformationDump`open$$],
      BaselinePosition->Baseline,
      FrameMargins->0,
      ImageSize->Automatic],
     DynamicModuleValues:>{}],
    BaseStyle->"InformationGridFrame",
    StripOnInput->False], "InformationGridPlain",
   StripOnInput->False],
  InformationData[
   Association[
   "ObjectType" -> "Symbol", "Usage" -> 
    "DualFindMinimum works like FindMinimum, but allows for Dual numbers in \
the objective function.\nDualFindMinimum does not support constraints on the \
independent variables.", "Documentation" -> None, "OwnValues" -> None, 
    "UpValues" -> None, "DownValues" -> 
    Information`InformationValueForm[
     DownValues, DualNumbers`DualFindMinimum, {DualNumbers`DualFindMinimum[
         Pattern[DualNumbers`Private`eq$, 
          Blank[]], 
         Pattern[DualNumbers`Private`spec$, {
           Blank[], 
           PatternTest[
            BlankSequence[], NumericQ]}], 
         Pattern[DualNumbers`Private`rest$, 
          BlankNullSequence[]]] :> 
       DualNumbers`DualFindMinimum[
        DualNumbers`Private`eq$, {DualNumbers`Private`spec$}, 
         DualNumbers`Private`rest$], DualNumbers`DualFindMinimum[
         Pattern[DualNumbers`Private`fun$, 
          Except[
           Blank[List]]], 
         Pattern[DualNumbers`Private`spec$, {
           Repeated[{
             Blank[], 
             PatternTest[
              BlankSequence[], NumericQ]}]}], 
         Pattern[DualNumbers`Private`rest$, 
          BlankNullSequence[]]] :> 
       Module[{DualNumbers`Private`stdfun$, DualNumbers`Private`stdSol$, 
          DualNumbers`Private`vars$ = Part[DualNumbers`Private`spec$, All, 1],
           DualNumbers`Private`dualSol$}, 
         DualNumbers`Private`stdfun$ = DualNumbers`StandardAll[
            DualNumbers`DualFactor[DualNumbers`Private`fun$]]; 
         DualNumbers`Private`stdSol$ = 
          FindMinimum[
           DualNumbers`Private`stdfun$, DualNumbers`Private`spec$, 
            DualNumbers`Private`rest$]; If[
           Not[
            MatchQ[DualNumbers`Private`stdSol$, {
              PatternTest[
               Blank[], NumericQ], {
               Repeated[Blank[] -> PatternTest[
                  Blank[], NumericQ]]}}]], 
           Return[$Failed]]; DualNumbers`Private`dualSol$ = Quiet[
            DualNumbers`Private`firstSol[
             DualNumbers`FindDualSolution[
              D[DualNumbers`Private`fun$, {DualNumbers`Private`vars$}], 
              Last[DualNumbers`Private`stdSol$]]], {
             MessageName[DualNumbers`FindDualSolution, "nonsol"]}]; If[
           MatchQ[DualNumbers`Private`dualSol$, {
             BlankSequence[Rule]}], {
            ReplaceAll[
            DualNumbers`Private`fun$, DualNumbers`Private`dualSol$], 
            DualNumbers`Private`dualSol$}, DualNumbers`Private`dualSol$]]}], 
    "SubValues" -> None, "DefaultValues" -> 
    Information`InformationValueForm[
     DefaultValues, DualNumbers`DualFindMinimum, {
      SyntaxInformation[DualNumbers`DualFindMinimum] -> {"ArgumentsPattern" -> {
           BlankSequence[]}}}], "NValues" -> None, "FormatValues" -> None, 
    "Options" -> None, "Attributes" -> {}, "FullName" -> 
    "DualNumbers`DualFindMinimum"], False]]], "Output",
 CellLabel->"Out[50]=",ExpressionUUID->"4f383423-4dac-4dc4-a006-047bbc166e70"],

Cell[BoxData[
 InterpretationBox[
  StyleBox[
   FrameBox[
    DynamicModuleBox[{System`InformationDump`open$$ = False, 
     System`InformationDump`mouseOver$$ = False}, 
     PaneSelectorBox[{True->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False,
             BaseStyle -> None],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"DualFindMaximum works like FindMaximum, but allows \
for Dual numbers in the objective function.\\nDualFindMaximum does not \
support constraints on the independent variables.\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          PaneBox[GridBox[{
             {
              
              DynamicModuleBox[{System`InformationDump`open$$ = {
               False, False, False, False, False, False, False, False, False, 
                False, False, False}}, 
               StyleBox[GridBox[{
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Definitions\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Definitions\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Definitions", "Tooltip"]& ], GridBox[{
                    {
                    RowBox[{
                    RowBox[{"DualFindMaximum", "[", 
                    RowBox[{"DualNumbers`Private`eq$_", ",", 
                    RowBox[{"DualNumbers`Private`spec$", ":", 
                    RowBox[{"{", 
                    RowBox[{"_", ",", 
                    RowBox[{"__", "?", "NumericQ"}]}], "}"}]}], ",", 
                    "DualNumbers`Private`rest$___"}], "]"}], ":=", 
                    RowBox[{"DualFindMaximum", "[", 
                    RowBox[{"DualNumbers`Private`eq$", ",", 
                    RowBox[{"{", "DualNumbers`Private`spec$", "}"}], ",", 
                    "DualNumbers`Private`rest$"}], "]"}]}]},
                    {
                    RowBox[{
                    RowBox[{"DualFindMaximum", "[", 
                    RowBox[{
                    RowBox[{"DualNumbers`Private`fun$", ":", 
                    RowBox[{"Except", "[", "_List", "]"}]}], ",", 
                    RowBox[{"DualNumbers`Private`spec$", ":", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"_", ",", 
                    RowBox[{"__", "?", "NumericQ"}]}], "}"}], ".."}], "}"}]}],
                     ",", "DualNumbers`Private`rest$___"}], "]"}], ":=", 
                    RowBox[{"Module", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    "DualNumbers`Private`stdfun$", ",", 
                    "DualNumbers`Private`stdSol$", ",", 
                    RowBox[{"DualNumbers`Private`vars$", "=", 
                    RowBox[{
                    "DualNumbers`Private`spec$", "\[LeftDoubleBracket]", 
                    RowBox[{"All", ",", "1"}], "\[RightDoubleBracket]"}]}], 
                    ",", "DualNumbers`Private`dualSol$"}], "}"}], ",", 
                    RowBox[{
                    RowBox[{"DualNumbers`Private`stdfun$", "=", 
                    RowBox[{"StandardAll", "[", 
                    RowBox[{
                    "DualFactor", "[", "DualNumbers`Private`fun$", "]"}], 
                    "]"}]}], ";", 
                    RowBox[{"DualNumbers`Private`stdSol$", "=", 
                    RowBox[{"FindMaximum", "[", 
                    RowBox[{
                    "DualNumbers`Private`stdfun$", ",", 
                    "DualNumbers`Private`spec$", ",", 
                    "DualNumbers`Private`rest$"}], "]"}]}], ";", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"!", 
                    RowBox[{"MatchQ", "[", 
                    RowBox[{"DualNumbers`Private`stdSol$", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"_", "?", "NumericQ"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"_", "\[Rule]", 
                    RowBox[{"_", "?", "NumericQ"}]}], ")"}], ".."}], "}"}]}], 
                    "}"}]}], "]"}]}], ",", 
                    RowBox[{"Return", "[", "$Failed", "]"}]}], "]"}], ";", 
                    RowBox[{"DualNumbers`Private`dualSol$", "=", 
                    RowBox[{"Quiet", "[", 
                    RowBox[{
                    RowBox[{"DualNumbers`Private`firstSol", "[", 
                    RowBox[{"FindDualSolution", "[", 
                    RowBox[{
                    RowBox[{
                    SubscriptBox["\[PartialD]", 
                    RowBox[{"{", "DualNumbers`Private`vars$", "}"}]], 
                    "DualNumbers`Private`fun$"}], ",", 
                    RowBox[{
                    "Last", "[", "DualNumbers`Private`stdSol$", "]"}]}], 
                    "]"}], "]"}], ",", 
                    RowBox[{"{", 
                    StyleBox[
                    RowBox[{"FindDualSolution", "::", "nonsol"}], 
                    "MessageName"], "}"}]}], "]"}]}], ";", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"MatchQ", "[", 
                    RowBox[{"DualNumbers`Private`dualSol$", ",", 
                    RowBox[{"{", "__Rule", "}"}]}], "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    "DualNumbers`Private`fun$", "/.", "\[VeryThinSpace]", 
                    "DualNumbers`Private`dualSol$"}], ",", 
                    "DualNumbers`Private`dualSol$"}], "}"}], ",", 
                    "DualNumbers`Private`dualSol$"}], "]"}]}]}], "]"}]}]}
                    },
                    DefaultBaseStyle->"Column",
                    GridBoxAlignment->{"Columns" -> {{Left}}},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]},
                  {
                   TagBox[
                    TooltipBox[
                    
                    StyleBox["\<\" Default Definitions\"\>", 
                    "InformationRowLabel",
                    StripOnInput->False],
                    "\"DefaultValues\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "DefaultValues", "Tooltip"]& ], 
                   InterpretationBox[GridBox[{
                    {
                    RowBox[{
                    RowBox[{
                    "SyntaxInformation", "[", "DualFindMaximum", "]"}], "=", 
                    RowBox[{"{", 
                    RowBox[{"\<\"ArgumentsPattern\"\>", "\[Rule]", 
                    RowBox[{"{", "__", "}"}]}], "}"}]}]}
                    },
                    BaselinePosition->{Baseline, {1, 1}},
                    
                    GridBoxAlignment->{
                    "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}],
                    
                    ColumnForm[{
                    SyntaxInformation[DualNumbers`DualFindMaximum] = {
                    "ArgumentsPattern" -> {
                    BlankSequence[]}}}],
                    Editable->False]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Full Name\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"FullName\"",
                    TooltipStyle->"TextStyling"],
                    
                    Annotation[#, "FullName", 
                    "Tooltip"]& ], "\<\"DualNumbers`DualFindMaximum\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {Right, Left}},
                 GridBoxDividers->None,
                 GridBoxItemSize->{"Columns" -> {Automatic, Automatic}},
                 GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.5599999999999999]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}], "DialogStyle",
                StripOnInput->False],
               DynamicModuleValues:>{}]}
            },
            DefaultBaseStyle->"Column",
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.5599999999999999]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[3.6]}, 
                Offset[0.2]}}],
           FrameMargins->6], ""},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpener"]], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpenerHot"]]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, False],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"], False->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"DualFindMaximum works like FindMaximum, but allows \
for Dual numbers in the objective function.\\nDualFindMaximum does not \
support constraints on the independent variables.\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"],
               ImageSizeCache->{12., {3., 9.}}], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpenerHot"],
               ImageSizeCache->{12., {3., 9.}}]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, True],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}, Dynamic[System`InformationDump`open$$],
      BaselinePosition->Baseline,
      FrameMargins->0,
      ImageSize->Automatic],
     DynamicModuleValues:>{}],
    BaseStyle->"InformationGridFrame",
    StripOnInput->False], "InformationGridPlain",
   StripOnInput->False],
  InformationData[
   Association[
   "ObjectType" -> "Symbol", "Usage" -> 
    "DualFindMaximum works like FindMaximum, but allows for Dual numbers in \
the objective function.\nDualFindMaximum does not support constraints on the \
independent variables.", "Documentation" -> None, "OwnValues" -> None, 
    "UpValues" -> None, "DownValues" -> 
    Information`InformationValueForm[
     DownValues, DualNumbers`DualFindMaximum, {DualNumbers`DualFindMaximum[
         Pattern[DualNumbers`Private`eq$, 
          Blank[]], 
         Pattern[DualNumbers`Private`spec$, {
           Blank[], 
           PatternTest[
            BlankSequence[], NumericQ]}], 
         Pattern[DualNumbers`Private`rest$, 
          BlankNullSequence[]]] :> 
       DualNumbers`DualFindMaximum[
        DualNumbers`Private`eq$, {DualNumbers`Private`spec$}, 
         DualNumbers`Private`rest$], DualNumbers`DualFindMaximum[
         Pattern[DualNumbers`Private`fun$, 
          Except[
           Blank[List]]], 
         Pattern[DualNumbers`Private`spec$, {
           Repeated[{
             Blank[], 
             PatternTest[
              BlankSequence[], NumericQ]}]}], 
         Pattern[DualNumbers`Private`rest$, 
          BlankNullSequence[]]] :> 
       Module[{DualNumbers`Private`stdfun$, DualNumbers`Private`stdSol$, 
          DualNumbers`Private`vars$ = Part[DualNumbers`Private`spec$, All, 1],
           DualNumbers`Private`dualSol$}, 
         DualNumbers`Private`stdfun$ = DualNumbers`StandardAll[
            DualNumbers`DualFactor[DualNumbers`Private`fun$]]; 
         DualNumbers`Private`stdSol$ = 
          FindMaximum[
           DualNumbers`Private`stdfun$, DualNumbers`Private`spec$, 
            DualNumbers`Private`rest$]; If[
           Not[
            MatchQ[DualNumbers`Private`stdSol$, {
              PatternTest[
               Blank[], NumericQ], {
               Repeated[Blank[] -> PatternTest[
                  Blank[], NumericQ]]}}]], 
           Return[$Failed]]; DualNumbers`Private`dualSol$ = Quiet[
            DualNumbers`Private`firstSol[
             DualNumbers`FindDualSolution[
              D[DualNumbers`Private`fun$, {DualNumbers`Private`vars$}], 
              Last[DualNumbers`Private`stdSol$]]], {
             MessageName[DualNumbers`FindDualSolution, "nonsol"]}]; If[
           MatchQ[DualNumbers`Private`dualSol$, {
             BlankSequence[Rule]}], {
            ReplaceAll[
            DualNumbers`Private`fun$, DualNumbers`Private`dualSol$], 
            DualNumbers`Private`dualSol$}, DualNumbers`Private`dualSol$]]}], 
    "SubValues" -> None, "DefaultValues" -> 
    Information`InformationValueForm[
     DefaultValues, DualNumbers`DualFindMaximum, {
      SyntaxInformation[DualNumbers`DualFindMaximum] -> {"ArgumentsPattern" -> {
           BlankSequence[]}}}], "NValues" -> None, "FormatValues" -> None, 
    "Options" -> None, "Attributes" -> {}, "FullName" -> 
    "DualNumbers`DualFindMaximum"], False]]], "Output",
 CellLabel->"Out[51]=",ExpressionUUID->"ea8801f3-907b-4faa-a532-8b2e9119dc19"],

Cell[BoxData[
 InterpretationBox[
  StyleBox[
   FrameBox[
    DynamicModuleBox[{System`InformationDump`open$$ = False, 
     System`InformationDump`mouseOver$$ = False}, 
     PaneSelectorBox[{True->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False,
             BaseStyle -> None],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"\\!\\(\\*RowBox[{\\\"FindDualSolution\\\", \
\\\"[\\\", RowBox[{StyleBox[\\\"eqs\\\", \\\"TI\\\"], \\\",\\\",  StyleBox[\\\
\"sol\\\", \\\"TI\\\"]}], \\\"]\\\"}]\\) finds a Dual-valued solution to \
\\!\\(\\*StyleBox[\\\"eqs\\\", \\\"TI\\\"]\\) where \\!\\(\\*StyleBox[\\\"sol\
\\\", \\\"TI\\\"]\\) is the standard-valued solution.\"\>", 
             "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          PaneBox[GridBox[{
             {
              
              DynamicModuleBox[{System`InformationDump`open$$ = {
               False, False, False, False, False, False, False, False, False, 
                False, False, False}}, 
               StyleBox[GridBox[{
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Definitions\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Definitions\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Definitions", "Tooltip"]& ], GridBox[{
                    {
                    RowBox[{
                    RowBox[{"FindDualSolution", "[", 
                    RowBox[{"DualNumbers`Private`eqs_", ",", 
                    RowBox[{"DualNumbers`Private`sol", ":", 
                    RowBox[{"{", "__Rule", "}"}]}]}], "]"}], ":=", 
                    RowBox[{"Module", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"DualNumbers`Private`equations", "=", 
                    RowBox[{
                    "DualNumbers`Private`equationNormalForm", "[", 
                    "DualNumbers`Private`eqs", "]"}]}], ",", 
                    RowBox[{"DualNumbers`Private`vars", "=", 
                    RowBox[{"Keys", "[", "DualNumbers`Private`sol", "]"}]}], 
                    ",", "DualNumbers`Private`dualRules", ",", 
                    "DualNumbers`Private`nonstdSol"}], "}"}], ",", 
                    RowBox[{
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    "FailureQ", "[", "DualNumbers`Private`equations", "]"}], 
                    ",", 
                    RowBox[{"Return", "[", "$Failed", "]"}]}], "]"}], ";", 
                    RowBox[{"DualNumbers`Private`dualRules", "=", 
                    RowBox[{"Thread", "[", 
                    RowBox[{"DualNumbers`Private`vars", "\[Rule]", 
                    RowBox[{
                    RowBox[{"Values", "[", "DualNumbers`Private`sol", "]"}], 
                    "+", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Dual", "[", 
                    RowBox[{"0", ",", "#1"}], "]"}], "&"}], ")"}], "/@", 
                    "DualNumbers`Private`vars"}]}]}], "]"}]}], ";", 
                    RowBox[{"DualNumbers`Private`equations", "=", 
                    RowBox[{
                    RowBox[{"DualFactor", "[", 
                    RowBox[{"Apply", "[", 
                    RowBox[{
                    "Subtract", ",", "DualNumbers`Private`equations", ",", 
                    RowBox[{"{", "1", "}"}]}], "]"}], "]"}], "/.", 
                    "\[VeryThinSpace]", "DualNumbers`Private`dualRules"}]}], 
                    ";", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"!", 
                    RowBox[{"MatchQ", "[", 
                    RowBox[{"DualNumbers`Private`equations", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Dual", "[", 
                    RowBox[{
                    RowBox[{"_", "?", 
                    RowBox[{"(", 
                    RowBox[{"EqualTo", "[", "0", "]"}], ")"}]}], ",", "_"}], 
                    "]"}], ".."}], "}"}]}], "]"}]}], ",", 
                    RowBox[{"Message", "[", 
                    RowBox[{
                    StyleBox[
                    RowBox[{"FindDualSolution", "::", "nonsol"}], 
                    "MessageName"], ",", 
                    RowBox[{"Short", "[", "DualNumbers`Private`sol", "]"}]}], 
                    "]"}]}], "]"}], ";", 
                    RowBox[{"DualNumbers`Private`equations", "=", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"NonStandard", "[", "#1", "]"}], "\[Equal]", 
                    "0"}], "&"}], ")"}], "/@", 
                    "DualNumbers`Private`equations"}]}], ";", 
                    RowBox[{"DualNumbers`Private`nonstdSol", "=", 
                    RowBox[{"Solve", "[", 
                    RowBox[{
                    "DualNumbers`Private`equations", ",", 
                    "DualNumbers`Private`vars"}], "]"}]}], ";", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"MatchQ", "[", 
                    RowBox[{"DualNumbers`Private`nonstdSol", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", "__Rule", "}"}], ".."}], "}"}]}], "]"}], ",", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Thread", "[", 
                    RowBox[{"DualNumbers`Private`vars", "\[Rule]", 
                    RowBox[{"MapThread", "[", 
                    RowBox[{"Dual", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Lookup", "[", 
                    RowBox[{
                    "DualNumbers`Private`sol", ",", 
                    "DualNumbers`Private`vars"}], "]"}], ",", 
                    RowBox[{"Lookup", "[", 
                    RowBox[{"#1", ",", "DualNumbers`Private`vars", ",", "0"}],
                     "]"}]}], "}"}]}], "]"}]}], "]"}], "&"}], ")"}], "/@", 
                    "DualNumbers`Private`nonstdSol"}], ",", "$Failed"}], 
                    "]"}]}]}], "]"}]}]}
                    },
                    DefaultBaseStyle->"Column",
                    GridBoxAlignment->{"Columns" -> {{Left}}},
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]},
                  {
                   TagBox[
                    TooltipBox[
                    
                    StyleBox["\<\" Default Definitions\"\>", 
                    "InformationRowLabel",
                    StripOnInput->False],
                    "\"DefaultValues\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "DefaultValues", "Tooltip"]& ], 
                   InterpretationBox[GridBox[{
                    {
                    RowBox[{
                    RowBox[{
                    "SyntaxInformation", "[", "FindDualSolution", "]"}], "=", 
                    RowBox[{"{", 
                    RowBox[{"\<\"ArgumentsPattern\"\>", "\[Rule]", 
                    RowBox[{"{", "__", "}"}]}], "}"}]}]}
                    },
                    BaselinePosition->{Baseline, {1, 1}},
                    
                    GridBoxAlignment->{
                    "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}],
                    
                    ColumnForm[{
                    SyntaxInformation[DualNumbers`FindDualSolution] = {
                    "ArgumentsPattern" -> {
                    BlankSequence[]}}}],
                    Editable->False]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Full Name\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"FullName\"",
                    TooltipStyle->"TextStyling"],
                    
                    Annotation[#, "FullName", 
                    "Tooltip"]& ], "\<\"DualNumbers`FindDualSolution\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {Right, Left}},
                 GridBoxDividers->None,
                 GridBoxItemSize->{"Columns" -> {Automatic, Automatic}},
                 GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.5599999999999999]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}], "DialogStyle",
                StripOnInput->False],
               DynamicModuleValues:>{}]}
            },
            DefaultBaseStyle->"Column",
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.5599999999999999]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[3.6]}, 
                Offset[0.2]}}],
           FrameMargins->6], ""},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpener"]], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpenerHot"]]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, False],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"], False->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"\\!\\(\\*RowBox[{\\\"FindDualSolution\\\", \
\\\"[\\\", RowBox[{StyleBox[\\\"eqs\\\", \\\"TI\\\"], \\\",\\\",  StyleBox[\\\
\"sol\\\", \\\"TI\\\"]}], \\\"]\\\"}]\\) finds a Dual-valued solution to \
\\!\\(\\*StyleBox[\\\"eqs\\\", \\\"TI\\\"]\\) where \\!\\(\\*StyleBox[\\\"sol\
\\\", \\\"TI\\\"]\\) is the standard-valued solution.\"\>", 
             "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"],
               ImageSizeCache->{12., {3., 9.}}], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpenerHot"],
               ImageSizeCache->{12., {3., 9.}}]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, True],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}, Dynamic[System`InformationDump`open$$],
      BaselinePosition->Baseline,
      FrameMargins->0,
      ImageSize->Automatic],
     DynamicModuleValues:>{}],
    BaseStyle->"InformationGridFrame",
    StripOnInput->False], "InformationGridPlain",
   StripOnInput->False],
  InformationData[
   Association[
   "ObjectType" -> "Symbol", "Usage" -> 
    "\!\(\*RowBox[{\"FindDualSolution\", \"[\", RowBox[{StyleBox[\"eqs\", \
\"TI\"], \",\",  StyleBox[\"sol\", \"TI\"]}], \"]\"}]\) finds a Dual-valued \
solution to \!\(\*StyleBox[\"eqs\", \"TI\"]\) where \!\(\*StyleBox[\"sol\", \
\"TI\"]\) is the standard-valued solution.", "Documentation" -> None, 
    "OwnValues" -> None, "UpValues" -> None, "DownValues" -> 
    Information`InformationValueForm[
     DownValues, DualNumbers`FindDualSolution, {DualNumbers`FindDualSolution[
         Pattern[DualNumbers`Private`eqs, 
          Blank[]], 
         Pattern[DualNumbers`Private`sol, {
           BlankSequence[Rule]}]] :> 
       Module[{DualNumbers`Private`equations = 
          DualNumbers`Private`equationNormalForm[DualNumbers`Private`eqs], 
          DualNumbers`Private`vars = Keys[DualNumbers`Private`sol], 
          DualNumbers`Private`dualRules, DualNumbers`Private`nonstdSol}, If[
           FailureQ[DualNumbers`Private`equations], 
           Return[$Failed]]; 
         DualNumbers`Private`dualRules = 
          Thread[DualNumbers`Private`vars -> 
            Values[DualNumbers`Private`sol] + 
             Map[DualNumbers`Dual[0, #]& , DualNumbers`Private`vars]]; 
         DualNumbers`Private`equations = ReplaceAll[
            DualNumbers`DualFactor[
             Apply[Subtract, DualNumbers`Private`equations, {1}]], 
            DualNumbers`Private`dualRules]; If[
           Not[
            MatchQ[DualNumbers`Private`equations, {
              Repeated[
               DualNumbers`Dual[
                PatternTest[
                 Blank[], 
                 EqualTo[0]], 
                Blank[]]]}]], 
           Message[
            MessageName[DualNumbers`FindDualSolution, "nonsol"], 
            Short[DualNumbers`Private`sol]]]; 
         DualNumbers`Private`equations = 
          Map[DualNumbers`NonStandard[#] == 0& , 
            DualNumbers`Private`equations]; 
         DualNumbers`Private`nonstdSol = 
          Solve[DualNumbers`Private`equations, DualNumbers`Private`vars]; If[
           MatchQ[DualNumbers`Private`nonstdSol, {
             Repeated[{
               BlankSequence[Rule]}]}], 
           Map[Thread[DualNumbers`Private`vars -> MapThread[DualNumbers`Dual, {
                Lookup[DualNumbers`Private`sol, DualNumbers`Private`vars], 
                Lookup[#, DualNumbers`Private`vars, 0]}]]& , 
            DualNumbers`Private`nonstdSol], $Failed]]}], "SubValues" -> None, 
    "DefaultValues" -> 
    Information`InformationValueForm[
     DefaultValues, DualNumbers`FindDualSolution, {
      SyntaxInformation[DualNumbers`FindDualSolution] -> {"ArgumentsPattern" -> {
           BlankSequence[]}}}], "NValues" -> None, "FormatValues" -> None, 
    "Options" -> None, "Attributes" -> {}, "FullName" -> 
    "DualNumbers`FindDualSolution"], False]]], "Output",
 CellLabel->"Out[52]=",ExpressionUUID->"7c9eba13-d517-4427-9ee3-d4be908a5f79"]
}, Open  ]]
}, Open  ]]
}, Closed]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Running tests", \
"Section",ExpressionUUID->"e401cf21-84a6-462d-aad9-92e779a9dd14"],

Cell["Check the version currently loaded:", \
"Text",ExpressionUUID->"50be5f08-ccff-43d3-9d84-a54889af7a6e"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"Needs", "[", "\"\<DualNumbers`\>\"", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"PacletObject", "[", "\"\<DualNumbers\>\"", "]"}], "[", 
  "\"\<Version\>\"", "]"}]}], "Input",
 CellLabel->"In[12]:=",ExpressionUUID->"fcd1bea9-7ea9-4a34-80f4-b34bc4b8a10b"],

Cell[BoxData["\<\"1.2.0.1\"\>"], "Output",
 CellLabel->"Out[13]=",ExpressionUUID->"a867c3a5-01cb-44ba-93db-32508d88b8cf"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"Needs", "[", "\"\<DualNumbers`\>\"", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"testReport", "=", 
   RowBox[{
    RowBox[{"KeyMap", "[", "FileNameTake", "]"}], "@", 
    RowBox[{"AssociationMap", "[", 
     RowBox[{"TestReport", ",", "\[IndentingNewLine]", 
      RowBox[{"FileNames", "[", 
       RowBox[{"\"\<*.wlt\>\"", ",", 
        RowBox[{"FileNameJoin", "[", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"NotebookDirectory", "[", "]"}], ",", 
           "\"\<VerificationTests\>\""}], "}"}], "]"}]}], "]"}]}], 
     "\[IndentingNewLine]", "]"}]}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Map", "[", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"Length", "/@", 
      RowBox[{"#", "[", "\"\<TestResultRules\>\"", "]"}]}], "&"}], ",", 
    "\[IndentingNewLine]", "testReport"}], "\[IndentingNewLine]", "]"}], "//",
   "Dataset"}]}], "Input",
 CellLabel->"In[16]:=",ExpressionUUID->"50098eac-b322-4b1b-ad56-1a92232311fe"],

Cell[BoxData[
 TagBox[
  TagBox[
   DynamicModuleBox[{TypeSystem`NestedGrid`PackagePrivate`$state$$ = 
    Association[
    "InitialData" -> 
     Association[
      "DualNumbers.wlt" -> 
       Association[
        "TestsSucceeded" -> 29, "TestsFailedWrongResults" -> 0, 
         "TestsFailedWithMessages" -> 0, "TestsFailedWithErrors" -> 0], 
       "HelperFunctions.wlt" -> 
       Association[
        "TestsSucceeded" -> 36, "TestsFailedWrongResults" -> 0, 
         "TestsFailedWithMessages" -> 0, "TestsFailedWithErrors" -> 0], 
       "UpValues.wlt" -> 
       Association[
        "TestsSucceeded" -> 59, "TestsFailedWrongResults" -> 0, 
         "TestsFailedWithMessages" -> 0, "TestsFailedWithErrors" -> 0]], 
     "AllowEmbedding" -> True, "InitialShape" -> 
     TypeSystem`PackageScope`HeaderShape[
       Association[{All, 
          TypeSystem`PackageScope`KeyDummy[1]} -> 1, {All, "TestsSucceeded"} -> 
        1, {All, "TestsFailedWrongResults"} -> 
        1, {All, "TestsFailedWithMessages"} -> 
        1, {All, "TestsFailedWithErrors"} -> 1], 
       TypeSystem`PackageScope`Limited[
        TypeSystem`PackageScope`ColumnShape[
         TypeSystem`PackageScope`KeyValueShape[
          TypeSystem`PackageScope`AtomShape[182.40000000000003`], 
          TypeSystem`PackageScope`Limited[
           TypeSystem`PackageScope`RowShape[
            Association[
            "TestsSucceeded" -> TypeSystem`PackageScope`AtomShape[34], 
             "TestsFailedWrongResults" -> 
             TypeSystem`PackageScope`AtomShape[34], "TestsFailedWithMessages" -> 
             TypeSystem`PackageScope`AtomShape[34], "TestsFailedWithErrors" -> 
             TypeSystem`PackageScope`AtomShape[34]]], 
           DirectedInfinity[1], 4, {All}]]], 3, 
        DirectedInfinity[1], {}]], "InitialType" -> TypeSystem`Assoc[
       TypeSystem`Atom[String], 
       TypeSystem`Struct[{
        "TestsSucceeded", "TestsFailedWrongResults", 
         "TestsFailedWithMessages", "TestsFailedWithErrors"}, {
         TypeSystem`Atom[Integer], 
         TypeSystem`Atom[Integer], 
         TypeSystem`Atom[Integer], 
         TypeSystem`Atom[Integer]}], 3], "Meta" -> Association[], "RowTarget" -> 
     20, "ColumnTarget" -> 10, "Shape" -> TypeSystem`PackageScope`HeaderShape[
       Association[{All, 
          TypeSystem`PackageScope`KeyDummy[1]} -> 1, {All, "TestsSucceeded"} -> 
        1, {All, "TestsFailedWrongResults"} -> 
        1, {All, "TestsFailedWithMessages"} -> 
        1, {All, "TestsFailedWithErrors"} -> 1], 
       TypeSystem`PackageScope`Limited[
        TypeSystem`PackageScope`ColumnShape[
         TypeSystem`PackageScope`KeyValueShape[
          TypeSystem`PackageScope`AtomShape[182.40000000000003`], 
          TypeSystem`PackageScope`Limited[
           TypeSystem`PackageScope`RowShape[
            Association[
            "TestsSucceeded" -> TypeSystem`PackageScope`AtomShape[34], 
             "TestsFailedWrongResults" -> 
             TypeSystem`PackageScope`AtomShape[34], "TestsFailedWithMessages" -> 
             TypeSystem`PackageScope`AtomShape[34], "TestsFailedWithErrors" -> 
             TypeSystem`PackageScope`AtomShape[34]]], 
           DirectedInfinity[1], 4, {All}]]], 3, 
        DirectedInfinity[1], {}]], "Type" -> TypeSystem`Assoc[
       TypeSystem`Atom[String], 
       TypeSystem`Struct[{
        "TestsSucceeded", "TestsFailedWrongResults", 
         "TestsFailedWithMessages", "TestsFailedWithErrors"}, {
         TypeSystem`Atom[Integer], 
         TypeSystem`Atom[Integer], 
         TypeSystem`Atom[Integer], 
         TypeSystem`Atom[Integer]}], 3], "Path" -> {}, "BaseIndices" -> {}, 
     "DisplayedRowCount" -> 3, "DisplayedColumnCount" -> 4, "DataRowCount" -> 
     3, "DataColumnCount" -> 4, "SortPaths" -> {}, "SortDirections" -> {}, 
     "HiddenItemsMap" -> Null, "UpdateType" -> 1], 
    TypeSystem`NestedGrid`PackagePrivate`$outputID$$, 
    TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
    DynamicModule[{TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
        Style[
         Grid[{{
            Item[
             Pane[
              Annotation[
               Mouseover[
                
                Graphics[{}, ImageSize -> 6, BaselinePosition -> 
                 Scaled[-0.15]], 
                Graphics[{
                  GrayLevel[0.6], 
                  
                  Polygon[{{2^Rational[-1, 2], -2^Rational[-1, 2]}, {
                    2^Rational[-1, 2], 2^
                    Rational[-1, 2]}, {-2^Rational[-1, 2], 2^
                    Rational[-1, 2]}, {-2^Rational[-1, 2], -2^
                    Rational[-1, 2]}}]}, ImageSize -> 6, BaselinePosition -> 
                 Scaled[-0.15]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, Keys}, "KeyDummy", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["TestsSucceeded", 
                  Style[
                  "TestsSucceeded", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "TestsSucceeded"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "TestsSucceeded"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["TestsFailedWrongResults", 
                  Style[
                  "TestsFailedWrongResults", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "TestsFailedWrongResults"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "TestsFailedWrongResults"}, "ColumnHeader", True], 
               "Mouse"], ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["TestsFailedWithMessages", 
                  Style[
                  "TestsFailedWithMessages", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "TestsFailedWithMessages"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "TestsFailedWithMessages"}, "ColumnHeader", True], 
               "Mouse"], ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["TestsFailedWithErrors", 
                  Style[
                  "TestsFailedWithErrors", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "TestsFailedWithErrors"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "TestsFailedWithErrors"}, "ColumnHeader", True], 
               "Mouse"], ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["DualNumbers.wlt", 
                  Style[
                  "DualNumbers.wlt", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["DualNumbers.wlt"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["DualNumbers.wlt"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{182.40000000000003`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["29"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["DualNumbers.wlt"], 
                 Key["TestsSucceeded"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["DualNumbers.wlt"], 
                 Key["TestsFailedWrongResults"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["DualNumbers.wlt"], 
                 Key["TestsFailedWithMessages"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["DualNumbers.wlt"], 
                 Key["TestsFailedWithErrors"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["HelperFunctions.wlt", 
                  Style[
                  "HelperFunctions.wlt", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["HelperFunctions.wlt"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["HelperFunctions.wlt"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{182.40000000000003`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["36"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["HelperFunctions.wlt"], 
                 Key["TestsSucceeded"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["HelperFunctions.wlt"], 
                 Key["TestsFailedWrongResults"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["HelperFunctions.wlt"], 
                 Key["TestsFailedWithMessages"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["HelperFunctions.wlt"], 
                 Key["TestsFailedWithErrors"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["UpValues.wlt", 
                  Style[
                  "UpValues.wlt", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["UpValues.wlt"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["UpValues.wlt"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{182.40000000000003`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["59"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["UpValues.wlt"], 
                 Key["TestsSucceeded"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["UpValues.wlt"], 
                 Key["TestsFailedWrongResults"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["UpValues.wlt"], 
                 Key["TestsFailedWithMessages"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["UpValues.wlt"], 
                 Key["TestsFailedWithErrors"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}}, 
          BaseStyle -> {
           ContextMenu -> 
            Dynamic[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
              Which[TypeSystem`NestedGrid`PackagePrivate`$lastOutputID =!= 
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                 TypeSystem`NestedGrid`PackagePrivate`$outputID$$], {}, 
                TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger === 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu, True, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger = 
                 TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu = 
                 Block[{TypeSystem`NestedGrid`PackagePrivate`$globalScrollPos = \
{TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$}}, 
                   
                   With[{TypeSystem`NestedGrid`PackagePrivate`lastPath$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$\
lastPathIsLeafHeader, TypeSystem`NestedGrid`PackagePrivate`headerHidden$ = And[
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    Alternatives["RowHeader", "ColumnHeader"]], 
                    TypeSystem`NestedGrid`PackagePrivate`headerHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]], 
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`allHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`anyHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`anyHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ = 
                    TypeSystem`NestedGrid`PackagePrivate`columnSortDirection[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortPaths"], 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortDirections"]], 
                    TypeSystem`NestedGrid`PackagePrivate`haveData$ = Not[
                    FailureQ[
                    TypeSystem`NestedGrid`PackagePrivate`datasetInitialData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]]], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$ = Not[
                    FreeQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, Keys]]}, 
                    Join[{
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    Not[TypeSystem`NestedGrid`PackagePrivate`anyHidden$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$], 
                    Nothing, 
                    MenuItem[
                    StringJoin["Show ", 
                    Which[
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""]], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "remove"]], MenuEvaluator -> Automatic]], 
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    TypeSystem`NestedGrid`PackagePrivate`pathEmptyQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$, 
                    And[
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$, 
                    TypeSystem`NestedGrid`PackagePrivate`headerHidden$]], 
                    Nothing, 
                    MenuItem[
                    StringJoin["Hide ", 
                    Which[
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""]], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, "add"]], 
                    MenuEvaluator -> Automatic]], Delimiter}, 
                    If[
                    And[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`lastPathType$, 
                    Alternatives["ColumnHeader", "KeyDummy"]], 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
                    Not[TypeSystem`NestedGrid`PackagePrivate`allHidden$]], {
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Ascending", 
                    MenuItem["Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Ascending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Descending", 
                    MenuItem["Reverse Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Descending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    None, 
                    MenuItem["Unsort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, None]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter}, {}], {
                    MenuItem["Copy Position to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Copy Data to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter, 
                    MenuItem["Paste Position in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Paste Data in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], Nothing]}]]]]], FontFamily -> 
            "Verdana", FontSize -> 12}, Spacings -> {0, 0}, Alignment -> Left,
           Dividers -> All, FrameStyle -> GrayLevel[0.7490196078431373], 
          BaseStyle -> {FontFamily -> "Verdana", FontSize -> 12}], 
         LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> False, 
         ShowAutoStyles -> False]], 
      TypeSystem`NestedGrid`PackagePrivate`initialQ = True}, 
     Dynamic[
      TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
         Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
         Module[{
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
           TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
           TypeSystem`NestedGrid`PackagePrivate`datasetData[
            TypeSystem`NestedGrid`PackagePrivate`$state$$]}, 
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = If[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpData$], 
             TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
             TypeSystem`NestedGrid`PackagePrivate`renderGrid[
             TypeSystem`NestedGrid`PackagePrivate`$state$$, 
              TypeSystem`NestedGrid`PackagePrivate`$path$$, 
              TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
              TypeSystem`NestedGrid`PackagePrivate`localHold[
              TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
             TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
            Not[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
            TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
            TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
       TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$; 
       TypeSystem`NestedGrid`PackagePrivate`$hPos$$; If[
         FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
         TypeSystem`SparseGrid[
          TypeSystem`H["(data no longer present)"]], 
         If[GeneralUtilities`$DebugMode, 
          Row[{TypeSystem`NestedGrid`PackagePrivate`renderedGrid, "  ", 
            TypeSystem`NestedGrid`PackagePrivate`formatState[
            TypeSystem`NestedGrid`PackagePrivate`$state$$, 
             TypeSystem`NestedGrid`PackagePrivate`$path$$, 
             TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
             TypeSystem`NestedGrid`PackagePrivate`$hPos$$]}], 
          TypeSystem`NestedGrid`PackagePrivate`renderedGrid]]], 
      TrackedSymbols :> {
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$}], 
     DynamicModuleValues :> {}], 
    TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
     TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
      TypeSystem`PackageScope`SubViewPathbar[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, 
       TypeSystem`NestedGrid`PackagePrivate`updateState[
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$path$$, 
        TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
        TypeSystem`NestedGrid`PackagePrivate`localHold[
        TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]]], 
     TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
    TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Style[
     Framed[
      Dynamic[
       Replace[
       TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$, {
        TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
           TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][Null, 
           Blank[]] -> "", TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
           TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
           Pattern[TypeSystem`NestedGrid`PackagePrivate`path$, 
            Blank[]], 
           Pattern[TypeSystem`NestedGrid`PackagePrivate`pathType$, 
            Blank[]], 
           Pattern[TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
            Blank[]]] :> (
          Increment[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger]; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
           TypeSystem`NestedGrid`PackagePrivate`path$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPathType = 
           TypeSystem`NestedGrid`PackagePrivate`pathType$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPathIsLeafHeader = 
           TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastOutputID = 
           TypeSystem`NestedGrid`PackagePrivate`localHold[
            TypeSystem`NestedGrid`PackagePrivate`$outputID$$]; 
          TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
           TypeSystem`NestedGrid`PackagePrivate`path$, 
            TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
         Spacer[10], Blank[] :> Spacer[10]}], 
       TrackedSymbols :> {
        TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$}], FrameStyle -> 
      None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> Top, 
      ImageSize -> {Automatic, 15}], FontSize -> 1], 
    TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = Null}, 
    DynamicWrapperBox[
     DynamicBox[ToBoxes[
       Dataset`DatasetContent[
       2, "Path" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$path$$], 
        "Grid" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$grid$$], "State" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$state$$], "VPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$vPos$$], "HPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$hPos$$], "TopBar" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$topBar$$], "BottomBar" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$], "OutputID" -> 
        Hold[
          TypeSystem`NestedGrid`PackagePrivate`localHold[
          TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]], StandardForm],
      ImageSizeCache->{884., {74., 81.}},
      TrackedSymbols:>{
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
     TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = 
     MouseAnnotation[],
     ImageSizeCache->{884., {74., 81.}}],
    BaseStyle->{LineBreakWithin -> False},
    DynamicModuleValues:>{},
    Initialization:>
     Block[{$ContextPath = $ContextPath}, Needs["TypeSystem`"]; 
      Needs["Dataset`"]; 
      TypeSystem`NestedGrid`PackagePrivate`$outputID$$ = CreateUUID[]],
    UnsavedVariables:>{TypeSystem`NestedGrid`PackagePrivate`$outputID$$}],
   Deploy,
   DefaultBaseStyle->"Deploy"],
  Dataset`InterpretDataset[1],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellLabel->"Out[18]=",ExpressionUUID->"1bc7fbf9-7f8a-4eb5-a70f-9a4609bbe53d"]
}, Open  ]],

Cell["\<\
Reset docked cells in testing notebooks (this can help if the testing \
notebooks become slow):\
\>", "Text",ExpressionUUID->"2e597dde-62c2-4905-9ee0-88d7c86050a3"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"SetOptions", "[", 
     RowBox[{"#", ",", 
      RowBox[{"DockedCells", "\[Rule]", "Inherited"}]}], "]"}], "&"}], "/@", 
   RowBox[{"Notebooks", "[", "]"}]}], ";"}]], "Input",
 CellLabel->"In[45]:=",ExpressionUUID->"f02bec0c-c9d4-4217-a676-fc3261674141"]
}, Closed]],

Cell[CellGroupData[{

Cell["Re-building the paclet", \
"Section",ExpressionUUID->"b17fd04e-5216-4de6-9df2-053310fbcad6"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"CreatePacletArchive", "[", 
   RowBox[{"FileNameJoin", "[", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"NotebookDirectory", "[", "]"}], ",", "\"\<DualNumbers\>\""}], 
     "}"}], "]"}], "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"FileNameTake", "[", "%", "]"}]}], "Input",
 CellLabel->"In[54]:=",ExpressionUUID->"40eb1cdb-cbf5-4009-94db-f10d3cd02e26"],

Cell[BoxData["\<\"DualNumbers-1.2.0.1.paclet\"\>"], "Output",
 CellLabel->"Out[55]=",ExpressionUUID->"2b77de37-97fd-4d96-b111-41326e18d4c3"]
}, Open  ]]
}, Closed]]
},
WindowSize->{1236.75, 676.5},
WindowMargins->{{92.25, Automatic}, {Automatic, 66.75}},
PrivateNotebookOptions->{"FileOutlineCache"->False},
ShowGroupOpener->True,
TaggingRules->{"SaveDialogDataSavesBlog" -> False, "TryRealOnly" -> False},
ShowCellLabel->True,
TrackCellChangeTimes->False,
Magnification:>1.2 Inherited,
FrontEndVersion->"12.2 for Microsoft Windows (64-bit) (December 12, 2020)",
StyleDefinitions->"Default.nb",
ExpressionUUID->"9220aa73-8720-4446-a63d-8589ef2eb51f"
]

